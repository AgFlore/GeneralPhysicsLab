%!PS-Adobe-3.1
%ADO_DSC_Encoding: Windows Roman
%%Title: 10mA.pdf
%%Creator: Adobe Acrobat 17.12.0
%%For: <6731><5BC5><6770>
%%CreationDate: 2017/10/17, 14:12:33
%%BoundingBox: 0 0 843 595
%%HiResBoundingBox: 0 0 842.0400 594.9601
%%CropBox: 0 0 842.0400 594.9601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1032 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2017-10-17T14:12:11+08:00"
   xmp:CreateDate="2017-10-17T14:12:10+08:00"
   xmp:MetadataDate="2017-10-17T14:12:11+08:00"
   xmp:CreatorTool="Acrobat PDFMaker 17 Excel 版"
   xmpMM:DocumentID="uuid:2d1fcc5b-3a16-49b3-9393-1868c1e5e1d1"
   xmpMM:InstanceID="uuid:67992f3a-4f6b-48dd-9094-2d4f2dc5ebdc"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 15.0"
   pdfx:Company="北京大学">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>朱寅杰</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [842.04 594.96 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -594.96 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 594.96 li
842.04 594.96 li
842.04 0 li
cp
clp
.12 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
22.7675 573.683 mo
801.338 573.683 li
22.7675 517.681 mo
801.338 517.681 li
22.7675 461.761 mo
801.338 461.761 li
22.7675 405.841 mo
801.338 405.841 li
22.7675 349.801 mo
801.338 349.801 li
22.7675 293.881 mo
801.338 293.881 li
22.7675 237.961 mo
801.338 237.961 li
22.7675 181.921 mo
801.338 181.921 li
22.7675 126.001 mo
801.338 126.001 li
22.7675 70.0811 mo
801.338 70.0811 li
false sop
.514519 .431739 .431739 .0775464 cmyk
@
22.7675 14.0739 mo
22.7675 573.683 li
134.04 14.0739 mo
134.04 573.683 li
245.16 14.0739 mo
245.16 573.683 li
356.4 14.0739 mo
356.4 573.683 li
467.64 14.0739 mo
467.64 573.683 li
578.881 14.0739 mo
578.881 573.683 li
690.121 14.0739 mo
690.121 573.683 li
801.338 14.0739 mo
801.338 573.683 li
@
.75 lw
801.338 573.683 mo
801.338 14.0741 li
.750179 .679652 .670192 .901488 cmyk
@
22.7675 14.0739 mo
801.338 14.0739 li
@
78.361 559.321 mo
50.574 559.321 li
78.361 559.321 mo
106.186 559.321 li
50.574 557.107 mo
50.574 561.607 li
106.186 557.107 mo
106.186 561.607 li
.814939 .681422 .474861 .381506 cmyk
@
134.041 458.041 mo
106.186 458.041 li
134.041 458.041 mo
161.798 458.041 li
106.186 455.762 mo
106.186 460.262 li
161.798 455.762 mo
161.798 460.262 li
@
161.761 397.561 mo
133.992 397.561 li
161.761 397.561 mo
189.604 397.561 li
133.992 395.268 mo
133.992 399.768 li
189.604 395.268 mo
189.604 399.768 li
@
206.281 323.761 mo
178.482 323.761 li
206.281 323.761 mo
234.094 323.761 li
178.482 321.568 mo
178.482 326.068 li
234.094 321.568 mo
234.094 326.068 li
@
217.441 306.361 mo
189.604 306.361 li
217.441 306.361 mo
245.216 306.361 li
189.604 304.052 mo
189.604 308.552 li
245.216 304.052 mo
245.216 308.552 li
@
228.481 293.881 mo
200.727 293.881 li
228.481 293.881 mo
256.339 293.881 li
200.727 291.628 mo
200.727 296.128 li
256.339 291.628 mo
256.339 296.128 li
@
239.641 290.881 mo
211.849 290.881 li
239.641 290.881 mo
267.461 290.881 li
211.849 288.691 mo
211.849 293.191 li
267.461 288.691 mo
267.461 293.191 li
@
250.801 288.121 mo
222.971 288.121 li
250.801 288.121 mo
278.584 288.121 li
222.971 285.837 mo
222.971 290.337 li
278.584 285.837 mo
278.584 290.337 li
@
261.841 277.561 mo
234.094 277.561 li
261.841 277.561 mo
289.706 277.561 li
234.094 275.344 mo
234.094 279.844 li
289.706 275.344 mo
289.706 279.844 li
@
289.681 243.361 mo
261.9 243.361 li
289.681 243.361 mo
317.512 243.361 li
261.9 241.096 mo
261.9 245.596 li
317.512 241.096 mo
317.512 245.596 li
@
300.841 225.121 mo
273.022 225.121 li
300.841 225.121 mo
328.635 225.121 li
273.022 222.908 mo
273.022 227.408 li
328.635 222.908 mo
328.635 227.408 li
@
323.041 186.001 mo
295.267 186.001 li
323.041 186.001 mo
350.879 186.001 li
295.267 183.736 mo
295.267 188.236 li
350.879 183.736 mo
350.879 188.236 li
@
345.361 144.001 mo
317.512 144.001 li
345.361 144.001 mo
373.124 144.001 li
317.512 141.737 mo
317.512 146.237 li
373.124 141.737 mo
373.124 146.237 li
@
373.081 104.521 mo
345.318 104.521 li
373.081 104.521 mo
400.93 104.521 li
345.318 102.229 mo
345.318 106.729 li
400.93 102.229 mo
400.93 106.729 li
@
395.401 76.5611 mo
367.563 76.5611 li
395.401 76.5611 mo
423.175 76.5611 li
367.563 74.3321 mo
367.563 78.8321 li
423.175 74.3321 mo
423.175 78.8321 li
@
417.601 54.2411 mo
389.808 54.2411 li
417.601 54.2411 mo
445.42 54.2411 li
389.808 51.9811 mo
389.808 56.4811 li
445.42 51.9811 mo
445.42 56.4811 li
@
434.281 41.281 mo
406.492 41.281 li
434.281 41.281 mo
462.104 41.281 li
406.492 39.083 mo
406.492 43.583 li
462.104 39.083 mo
462.104 43.583 li
@
456.601 29.881 mo
428.736 29.881 li
456.601 29.881 mo
484.349 29.881 li
428.736 27.658 mo
428.736 32.158 li
484.349 27.658 mo
484.349 32.158 li
@
473.281 24.361 mo
445.42 24.361 li
473.281 24.361 mo
501.032 24.361 li
445.42 22.082 mo
445.42 26.582 li
501.032 22.082 mo
501.032 26.582 li
@
512.161 20.641 mo
484.349 20.641 li
512.161 20.641 mo
539.961 20.641 li
484.349 18.444 mo
484.349 22.944 li
539.961 18.444 mo
539.961 22.944 li
@
562.201 19.081 mo
534.4 19.081 li
562.201 19.081 mo
590.012 19.081 li
534.4 16.883 mo
534.4 21.383 li
590.012 16.883 mo
590.012 21.383 li
@
gsave
22.681 574.321 mo
801.241 574.321 li
801.241 14.041 li
22.681 14.041 li
cp
clp
751.321 16.921 mo
723.481 16.921 li
751.321 16.921 mo
779.093 16.921 li
723.481 14.6689 mo
723.481 19.1689 li
779.093 14.6689 mo
779.093 19.1689 li
@
grestore
78.361 559.321 mo
78.361 556.631 li
78.361 559.321 mo
78.361 562.083 li
76.13 556.631 mo
80.63 556.631 li
76.13 562.083 mo
80.63 562.083 li
@
134.041 458.041 mo
134.041 455.792 li
134.041 458.041 mo
134.041 460.232 li
131.742 455.792 mo
136.242 455.792 li
131.742 460.232 mo
136.242 460.232 li
@
161.761 397.561 mo
161.761 395.601 li
161.761 397.561 mo
161.761 399.435 li
159.548 395.601 mo
164.048 395.601 li
159.548 399.435 mo
164.048 399.435 li
@
206.281 323.761 mo
206.281 322.269 li
206.281 323.761 mo
206.281 325.366 li
204.038 322.269 mo
208.538 322.269 li
204.038 325.366 mo
208.538 325.366 li
@
217.441 306.361 mo
217.441 304.841 li
217.441 306.361 mo
217.441 307.763 li
215.16 304.841 mo
219.66 304.841 li
215.16 307.763 mo
219.66 307.763 li
@
228.481 293.881 mo
228.481 292.479 li
228.481 293.881 mo
228.481 295.278 li
226.283 292.479 mo
230.783 292.479 li
226.283 295.278 mo
230.783 295.278 li
@
239.641 290.881 mo
239.641 289.556 li
239.641 290.881 mo
239.641 292.325 li
237.405 289.556 mo
241.905 289.556 li
237.405 292.325 mo
241.905 292.325 li
@
250.801 288.121 mo
250.801 286.716 li
250.801 288.121 mo
250.801 289.457 li
248.528 286.716 mo
253.028 286.716 li
248.528 289.457 mo
253.028 289.457 li
@
261.841 277.561 mo
261.841 276.276 li
261.841 277.561 mo
261.841 278.911 li
259.65 276.276 mo
264.15 276.276 li
259.65 278.911 mo
264.15 278.911 li
@
289.681 243.361 mo
289.681 242.199 li
289.681 243.361 mo
289.681 244.492 li
287.456 242.199 mo
291.956 242.199 li
287.456 244.492 mo
291.956 244.492 li
@
300.841 225.121 mo
300.841 224.103 li
300.841 225.121 mo
300.841 226.214 li
298.578 224.103 mo
303.078 224.103 li
298.578 226.214 mo
303.078 226.214 li
@
323.041 186.001 mo
323.041 185.126 li
323.041 186.001 mo
323.041 186.845 li
320.823 185.126 mo
325.323 185.126 li
320.823 186.845 mo
325.323 186.845 li
@
345.361 144.001 mo
345.361 143.338 li
345.361 144.001 mo
345.361 144.637 li
343.068 143.338 mo
347.568 143.338 li
343.068 144.637 mo
347.568 144.637 li
@
373.081 104.521 mo
373.081 104.027 li
373.081 104.521 mo
373.081 104.931 li
370.874 104.027 mo
375.374 104.027 li
370.874 104.931 mo
375.374 104.931 li
@
395.401 76.5611 mo
395.401 76.2701 li
395.401 76.5611 mo
395.401 76.8951 li
393.119 76.2701 mo
397.619 76.2701 li
393.119 76.8951 mo
397.619 76.8951 li
@
417.601 54.2411 mo
417.601 54.0311 li
417.601 54.2411 mo
417.601 54.4321 li
415.364 54.0311 mo
419.864 54.0311 li
415.364 54.4321 mo
419.864 54.4321 li
@
434.281 41.281 mo
434.281 41.196 li
434.281 41.281 mo
434.281 41.469 li
432.048 41.196 mo
436.548 41.196 li
432.048 41.469 mo
436.548 41.469 li
@
456.601 29.881 mo
456.601 29.829 li
456.601 29.881 mo
456.601 29.987 li
454.293 29.829 mo
458.793 29.829 li
454.293 29.987 mo
458.793 29.987 li
@
473.281 24.361 mo
473.281 24.28 li
473.281 24.361 mo
473.281 24.3829 li
470.976 24.28 mo
475.476 24.28 li
470.976 24.3829 mo
475.476 24.3829 li
@
512.161 20.641 mo
512.161 20.661 li
512.161 20.641 mo
512.161 20.727 li
509.905 20.661 mo
514.405 20.661 li
509.905 20.727 mo
514.405 20.727 li
@
562.201 19.0811 mo
562.201 19.1071 li
562.201 19.0811 mo
562.201 19.1581 li
559.956 19.1071 mo
564.456 19.1071 li
559.956 19.1581 mo
564.456 19.1581 li
@
751.321 16.921 mo
751.321 16.905 li
751.321 16.921 mo
751.321 16.934 li
749.037 16.905 mo
753.537 16.905 li
749.037 16.934 mo
753.537 16.934 li
@
.3 lw
1 lc
78.3797 559.357 mo
96.9167 525.575 120.089 484.985 133.992 458.012 cv
147.895 431.039 149.749 419.884 161.798 397.518 cv
173.848 375.152 197.019 339.02 206.288 323.817 cv
211.688 314.96 215.25 309.209 217.41 306.302 cv
221.118 301.312 224.825 296.439 228.533 293.878 cv
232.24 291.318 235.948 291.906 239.655 290.94 cv
243.363 289.975 247.07 290.311 250.778 288.086 cv
253.645 286.366 256.882 283.361 261.9 277.594 cv
268.388 270.137 283.218 252.085 289.706 243.346 cv
295.959 234.923 295.469 234.372 300.829 225.158 cv
306.39 215.598 315.659 199.514 323.074 185.986 cv
330.489 172.457 336.977 157.572 345.319 143.987 cv
353.66 130.403 364.783 115.713 373.125 104.479 cv
381.466 93.2451 387.954 84.9571 395.369 76.5821 cv
402.784 68.2081 411.126 60.1061 417.614 54.2311 cv
424.102 48.3561 427.81 45.386 434.298 41.332 cv
440.786 37.2791 450.055 32.741 456.543 29.9081 cv
462.617 27.2551 464.549 25.769 473.227 24.3311 cv
482.495 22.7961 497.325 21.5601 512.155 20.694 cv
521.47 20.1501 537.171 19.5281 562.206 19.1331 cv
602.061 18.504 688.26 17.657 751.287 16.9191 cv
.615564 .534936 .527672 .251621 cmyk
@
.72 lw
0 lc
78.361 557.881 mo
78.361 560.761 li
76.921 559.321 mo
79.801 559.321 li
@
134.041 456.601 mo
134.041 459.481 li
132.601 458.041 mo
135.481 458.041 li
@
161.761 396.121 mo
161.761 399.001 li
160.321 397.561 mo
163.201 397.561 li
@
206.281 322.321 mo
206.281 325.201 li
204.841 323.761 mo
207.721 323.761 li
@
217.441 304.921 mo
217.441 307.801 li
216.001 306.361 mo
218.881 306.361 li
@
228.481 292.441 mo
228.481 295.321 li
227.041 293.881 mo
229.921 293.881 li
@
239.641 289.441 mo
239.641 292.321 li
238.201 290.881 mo
241.081 290.881 li
@
250.801 286.681 mo
250.801 289.561 li
249.361 288.121 mo
252.241 288.121 li
@
261.841 276.121 mo
261.841 279.001 li
260.401 277.561 mo
263.281 277.561 li
@
289.681 241.921 mo
289.681 244.801 li
288.241 243.361 mo
291.121 243.361 li
@
300.841 223.681 mo
300.841 226.561 li
299.401 225.121 mo
302.281 225.121 li
@
323.041 184.561 mo
323.041 187.441 li
321.601 186.001 mo
324.481 186.001 li
@
345.361 142.561 mo
345.361 145.441 li
343.921 144.001 mo
346.801 144.001 li
@
373.081 103.081 mo
373.081 105.961 li
371.641 104.521 mo
374.521 104.521 li
@
395.401 75.1211 mo
395.401 78.0011 li
393.961 76.5611 mo
396.841 76.5611 li
@
417.601 52.8011 mo
417.601 55.6811 li
416.161 54.2411 mo
419.041 54.2411 li
@
434.281 39.8411 mo
434.281 42.7211 li
432.841 41.2811 mo
435.721 41.2811 li
@
456.601 28.4411 mo
456.601 31.3211 li
455.161 29.8811 mo
458.041 29.8811 li
@
473.281 22.9211 mo
473.281 25.8011 li
471.841 24.3611 mo
474.721 24.3611 li
@
512.161 19.201 mo
512.161 22.0811 li
510.721 20.6411 mo
513.601 20.6411 li
@
562.201 17.6411 mo
562.201 20.5211 li
560.761 19.0811 mo
563.641 19.0811 li
@
751.321 15.4811 mo
751.321 18.3611 li
749.881 16.9211 mo
752.761 16.9211 li
@
775.102 568.367 mo
775.026 568.499 774.958 568.581 774.898 568.615 cv
774.838 568.648 774.78 568.648 774.722 568.615 cv
772.601 567.39 li
772.54 567.355 772.51 567.302 772.51 567.232 cv
772.509 567.162 772.546 567.063 772.621 566.934 cv
772.695 566.806 772.762 566.725 772.822 566.692 cv
772.881 566.659 772.942 566.66 773.003 566.695 cv
775.124 567.919 li
775.151 567.935 775.172 567.954 775.188 567.977 cv
775.205 568 775.212 568.03 775.211 568.068 cv
775.209 568.105 775.2 568.148 775.183 568.197 cv
775.166 568.246 775.139 568.303 775.102 568.367 cv
778.918 573.486 mo
778.883 573.547 778.848 573.599 778.812 573.641 cv
778.776 573.684 778.741 573.717 778.707 573.74 cv
778.674 573.763 778.64 573.775 778.605 573.776 cv
778.571 573.777 778.539 573.768 778.509 573.75 cv
774.88 571.656 li
774.833 571.628 774.795 571.599 774.766 571.566 cv
774.738 571.534 774.718 571.497 774.709 571.455 cv
774.699 571.413 774.703 571.364 774.72 571.306 cv
774.738 571.249 774.768 571.183 774.811 571.108 cv
774.85 571.041 774.887 570.983 774.921 570.935 cv
774.956 570.887 774.993 570.849 775.033 570.82 cv
775.073 570.791 775.117 570.765 775.166 570.741 cv
775.214 570.718 775.272 570.696 775.339 570.676 cv
777.431 570.084 li
777.914 569.948 778.318 569.809 778.644 569.668 cv
778.97 569.526 779.241 569.383 779.457 569.237 cv
779.674 569.092 779.845 568.945 779.973 568.797 cv
780.1 568.65 780.205 568.503 780.289 568.358 cv
780.373 568.212 780.428 568.06 780.455 567.902 cv
780.481 567.743 780.476 567.588 780.44 567.437 cv
780.404 567.285 780.333 567.141 780.227 567.002 cv
780.12 566.864 779.977 566.743 779.795 566.638 cv
779.582 566.515 779.374 566.434 779.172 566.393 cv
778.969 566.353 778.785 566.33 778.618 566.324 cv
778.452 566.318 778.309 566.319 778.191 566.328 cv
778.072 566.336 777.992 566.328 777.95 566.303 cv
777.925 566.289 777.907 566.27 777.896 566.245 cv
777.885 566.221 777.882 566.19 777.887 566.152 cv
777.892 566.115 777.906 566.069 777.928 566.014 cv
777.951 565.959 777.982 565.896 778.023 565.825 cv
778.053 565.774 778.08 565.731 778.105 565.696 cv
778.13 565.661 778.154 565.632 778.178 565.61 cv
778.202 565.588 778.228 565.569 778.255 565.553 cv
778.282 565.537 778.326 565.523 778.388 565.511 cv
778.449 565.499 778.547 565.491 778.682 565.488 cv
778.817 565.485 778.976 565.497 779.161 565.525 cv
779.346 565.552 779.54 565.598 779.745 565.662 cv
779.949 565.726 780.151 565.815 780.351 565.931 cv
780.669 566.114 780.921 566.32 781.108 566.547 cv
781.295 566.774 781.422 567.011 781.489 567.258 cv
781.557 567.504 781.57 567.753 781.528 568.004 cv
781.487 568.256 781.399 568.498 781.264 568.731 cv
781.143 568.941 781.004 569.139 780.847 569.326 cv
780.689 569.512 780.481 569.692 780.221 569.864 cv
779.961 570.037 779.633 570.206 779.235 570.371 cv
778.838 570.536 778.34 570.703 777.742 570.872 cv
776.074 571.357 li
778.931 573.007 li
778.958 573.022 778.98 573.045 778.997 573.075 cv
779.013 573.105 779.022 573.14 779.023 573.182 cv
779.024 573.223 779.016 573.269 778.998 573.319 cv
778.98 573.37 778.953 573.425 778.918 573.486 cv
786.02 573.689 mo
785.729 574.194 785.424 574.631 785.104 575.001 cv
784.784 575.371 784.446 575.653 784.088 575.846 cv
783.731 576.038 783.356 576.131 782.964 576.123 cv
782.572 576.115 782.157 575.986 781.721 575.734 cv
781.308 575.495 781.003 575.221 780.805 574.911 cv
780.608 574.601 780.505 574.253 780.498 573.867 cv
780.49 573.482 780.571 573.059 780.739 572.599 cv
780.908 572.14 781.148 571.639 781.461 571.098 cv
781.75 570.597 782.056 570.161 782.378 569.79 cv
782.7 569.42 783.039 569.137 783.395 568.943 cv
783.75 568.749 784.124 568.656 784.517 568.664 cv
784.909 568.672 785.322 568.801 785.755 569.051 cv
786.171 569.291 786.478 569.566 786.675 569.876 cv
786.873 570.187 786.975 570.535 786.983 570.92 cv
786.99 571.305 786.91 571.728 786.741 572.188 cv
786.573 572.648 786.333 573.148 786.02 573.689 cv
785.092 573.235 mo
785.281 572.907 785.439 572.605 785.566 572.331 cv
785.693 572.057 785.791 571.807 785.86 571.581 cv
785.93 571.355 785.97 571.149 785.98 570.964 cv
785.99 570.778 785.972 570.609 785.924 570.457 cv
785.876 570.306 785.799 570.171 785.693 570.054 cv
785.588 569.936 785.454 569.831 785.291 569.737 cv
785.004 569.571 784.731 569.504 784.474 569.536 cv
784.216 569.567 783.968 569.672 783.728 569.849 cv
783.488 570.026 783.258 570.263 783.037 570.56 cv
782.816 570.856 782.6 571.187 782.389 571.553 cv
782.106 572.043 781.891 572.475 781.743 572.847 cv
781.596 573.22 781.514 573.546 781.499 573.826 cv
781.484 574.106 781.534 574.345 781.648 574.541 cv
781.762 574.738 781.941 574.907 782.185 575.047 cv
782.374 575.157 782.558 575.223 782.737 575.245 cv
782.916 575.267 783.09 575.251 783.258 575.197 cv
783.427 575.143 783.591 575.057 783.751 574.937 cv
783.91 574.817 784.066 574.672 784.218 574.503 cv
784.37 574.333 784.518 574.141 784.663 573.924 cv
784.808 573.708 784.951 573.478 785.092 573.235 cv
.779507 .629786 .405798 .222019 cmyk
f
775.102 512.406 mo
775.026 512.538 774.958 512.62 774.898 512.654 cv
774.838 512.687 774.78 512.687 774.722 512.654 cv
772.601 511.429 li
772.54 511.394 772.51 511.341 772.51 511.271 cv
772.509 511.201 772.546 511.102 772.621 510.973 cv
772.695 510.845 772.762 510.764 772.822 510.731 cv
772.881 510.698 772.942 510.699 773.003 510.734 cv
775.124 511.958 li
775.151 511.974 775.172 511.993 775.188 512.016 cv
775.205 512.039 775.212 512.069 775.211 512.107 cv
775.209 512.144 775.2 512.187 775.183 512.236 cv
775.166 512.285 775.139 512.342 775.102 512.406 cv
778.916 517.565 mo
778.879 517.629 778.842 517.68 778.807 517.718 cv
778.771 517.756 778.737 517.784 778.705 517.801 cv
778.672 517.819 778.641 517.827 778.613 517.826 cv
778.584 517.825 778.558 517.818 778.534 517.804 cv
775.104 515.824 li
775.08 515.81 775.061 515.791 775.048 515.768 cv
775.034 515.744 775.026 515.714 775.023 515.676 cv
775.02 515.638 775.026 515.594 775.042 515.544 cv
775.057 515.494 775.083 515.437 775.12 515.373 cv
775.155 515.312 775.191 515.263 775.226 515.225 cv
775.262 515.187 775.295 515.157 775.327 515.138 cv
775.359 515.118 775.39 515.106 775.421 515.104 cv
775.452 515.101 775.481 515.108 775.508 515.123 cv
776.878 515.914 li
779.761 510.921 li
778.056 510.945 li
777.972 510.942 777.909 510.932 777.866 510.916 cv
777.823 510.901 777.796 510.875 777.785 510.839 cv
777.774 510.804 777.779 510.758 777.8 510.702 cv
777.821 510.647 777.854 510.58 777.899 510.502 cv
777.932 510.445 777.963 510.397 777.991 510.36 cv
778.02 510.322 778.047 510.292 778.073 510.271 cv
778.098 510.25 778.126 510.235 778.157 510.225 cv
778.187 510.216 778.223 510.209 778.265 510.207 cv
780.337 510.111 li
780.357 510.108 780.378 510.11 780.403 510.114 cv
780.427 510.119 780.456 510.127 780.49 510.138 cv
780.525 510.149 780.563 510.165 780.604 510.187 cv
780.646 510.209 780.697 510.237 780.758 510.272 cv
780.839 510.319 780.905 510.362 780.955 510.4 cv
781.005 510.438 781.042 510.471 781.066 510.501 cv
781.089 510.53 781.101 510.557 781.1 510.582 cv
781.1 510.606 781.094 510.628 781.082 510.649 cv
777.751 516.418 li
778.938 517.104 li
778.965 517.12 778.986 517.142 779.001 517.171 cv
779.016 517.2 779.023 517.233 779.021 517.27 cv
779.02 517.308 779.011 517.351 778.994 517.4 cv
778.977 517.449 778.951 517.504 778.916 517.565 cv
785.022 519.304 mo
784.858 519.588 784.662 519.812 784.432 519.975 cv
784.203 520.138 783.949 520.24 783.67 520.282 cv
783.391 520.324 783.088 520.303 782.762 520.218 cv
782.437 520.134 782.093 519.987 781.731 519.778 cv
781.393 519.583 781.11 519.373 780.884 519.148 cv
780.658 518.922 780.492 518.686 780.386 518.44 cv
780.28 518.194 780.236 517.941 780.255 517.682 cv
780.275 517.422 780.359 517.162 780.51 516.902 cv
780.629 516.695 780.772 516.525 780.939 516.392 cv
781.107 516.258 781.296 516.156 781.506 516.083 cv
781.717 516.011 781.952 515.965 782.212 515.946 cv
782.471 515.926 782.75 515.927 783.05 515.946 cv
782.908 515.724 782.793 515.51 782.704 515.303 cv
782.616 515.097 782.557 514.894 782.528 514.694 cv
782.499 514.495 782.502 514.301 782.536 514.113 cv
782.57 513.925 782.639 513.74 782.745 513.557 cv
782.878 513.327 783.044 513.136 783.243 512.982 cv
783.442 512.829 783.668 512.726 783.921 512.674 cv
784.175 512.622 784.456 512.627 784.764 512.69 cv
785.073 512.753 785.4 512.885 785.745 513.084 cv
786.076 513.275 786.34 513.481 786.536 513.7 cv
786.732 513.919 786.869 514.142 786.947 514.37 cv
787.026 514.598 787.048 514.826 787.015 515.055 cv
786.982 515.284 786.904 515.506 786.781 515.719 cv
786.682 515.891 786.558 516.041 786.41 516.168 cv
786.263 516.294 786.094 516.398 785.903 516.477 cv
785.713 516.557 785.504 516.613 785.275 516.646 cv
785.047 516.678 784.8 516.69 784.534 516.681 cv
784.706 516.938 784.85 517.183 784.965 517.417 cv
785.081 517.651 785.16 517.876 785.204 518.093 cv
785.248 518.31 785.256 518.518 785.23 518.717 cv
785.203 518.915 785.134 519.111 785.022 519.304 cv
785.872 515.302 mo
785.954 515.16 786.003 515.017 786.021 514.874 cv
786.038 514.73 786.023 514.591 785.975 514.455 cv
785.927 514.319 785.845 514.189 785.729 514.066 cv
785.613 513.943 785.466 513.829 785.286 513.726 cv
784.921 513.515 784.597 513.438 784.313 513.495 cv
784.03 513.553 783.805 513.725 783.639 514.013 cv
783.563 514.145 783.515 514.281 783.495 514.42 cv
783.475 514.56 783.484 514.708 783.522 514.865 cv
783.56 515.023 783.625 515.192 783.716 515.373 cv
783.808 515.555 783.925 515.756 784.067 515.978 cv
784.51 516 784.885 515.957 785.19 515.849 cv
785.496 515.741 785.723 515.559 785.872 515.302 cv
784.087 518.886 mo
784.177 518.73 784.229 518.572 784.245 518.412 cv
784.261 518.252 784.242 518.083 784.189 517.906 cv
784.136 517.729 784.052 517.538 783.937 517.334 cv
783.822 517.131 783.682 516.906 783.517 516.662 cv
783.243 516.644 782.996 516.641 782.774 516.653 cv
782.553 516.665 782.359 516.697 782.191 516.749 cv
782.023 516.801 781.878 516.874 781.754 516.967 cv
781.63 517.06 781.525 517.181 781.439 517.33 cv
781.25 517.658 781.216 517.977 781.337 518.286 cv
781.459 518.595 781.743 518.879 782.189 519.137 cv
782.622 519.387 783.002 519.485 783.328 519.432 cv
783.654 519.379 783.907 519.197 784.087 518.886 cv
f
775.102 456.445 mo
775.026 456.577 774.958 456.659 774.898 456.693 cv
774.838 456.726 774.78 456.726 774.722 456.693 cv
772.601 455.468 li
772.54 455.433 772.51 455.38 772.51 455.31 cv
772.509 455.24 772.546 455.141 772.621 455.012 cv
772.695 454.884 772.762 454.803 772.822 454.77 cv
772.881 454.737 772.942 454.738 773.003 454.773 cv
775.124 455.997 li
775.151 456.013 775.172 456.032 775.188 456.055 cv
775.205 456.078 775.212 456.108 775.211 456.146 cv
775.209 456.183 775.2 456.226 775.183 456.275 cv
775.166 456.324 775.139 456.381 775.102 456.445 cv
778.916 461.604 mo
778.879 461.668 778.842 461.719 778.807 461.757 cv
778.771 461.795 778.737 461.823 778.705 461.84 cv
778.672 461.858 778.641 461.866 778.613 461.865 cv
778.584 461.864 778.558 461.857 778.534 461.843 cv
775.104 459.863 li
775.08 459.849 775.061 459.83 775.048 459.807 cv
775.034 459.783 775.026 459.753 775.023 459.715 cv
775.02 459.677 775.026 459.633 775.042 459.583 cv
775.057 459.533 775.083 459.476 775.12 459.412 cv
775.155 459.351 775.191 459.302 775.226 459.264 cv
775.262 459.226 775.295 459.196 775.327 459.177 cv
775.359 459.157 775.39 459.145 775.421 459.143 cv
775.452 459.14 775.481 459.147 775.508 459.162 cv
776.878 459.953 li
779.761 454.96 li
778.056 454.984 li
777.972 454.981 777.909 454.971 777.866 454.955 cv
777.823 454.94 777.796 454.914 777.785 454.878 cv
777.774 454.843 777.779 454.797 777.8 454.741 cv
777.821 454.686 777.854 454.619 777.899 454.541 cv
777.932 454.484 777.963 454.436 777.991 454.399 cv
778.02 454.361 778.047 454.331 778.073 454.31 cv
778.098 454.289 778.126 454.274 778.157 454.264 cv
778.187 454.255 778.223 454.248 778.265 454.246 cv
780.337 454.15 li
780.357 454.147 780.378 454.149 780.403 454.153 cv
780.427 454.158 780.456 454.166 780.49 454.177 cv
780.525 454.188 780.563 454.204 780.604 454.226 cv
780.646 454.248 780.697 454.276 780.758 454.311 cv
780.839 454.358 780.905 454.401 780.955 454.439 cv
781.005 454.477 781.042 454.51 781.066 454.54 cv
781.089 454.569 781.101 454.596 781.1 454.621 cv
781.1 454.645 781.094 454.667 781.082 454.688 cv
777.751 460.457 li
778.938 461.143 li
778.965 461.159 778.986 461.181 779.001 461.21 cv
779.016 461.239 779.023 461.272 779.021 461.309 cv
779.02 461.347 779.011 461.39 778.994 461.439 cv
778.977 461.488 778.951 461.543 778.916 461.604 cv
785.292 462.91 mo
785.126 463.198 784.922 463.451 784.679 463.669 cv
784.435 463.887 784.163 464.046 783.862 464.145 cv
783.562 464.244 783.235 464.274 782.883 464.236 cv
782.531 464.197 782.164 464.067 781.782 463.847 cv
781.508 463.689 781.285 463.515 781.115 463.326 cv
780.944 463.138 780.817 462.936 780.734 462.721 cv
780.65 462.506 780.61 462.277 780.612 462.035 cv
780.614 461.793 780.651 461.537 780.724 461.267 cv
780.796 460.998 780.899 460.716 781.032 460.423 cv
781.165 460.13 781.323 459.825 781.507 459.507 cv
781.669 459.226 781.848 458.951 782.045 458.681 cv
782.241 458.411 782.455 458.164 782.687 457.942 cv
782.919 457.72 783.17 457.53 783.44 457.372 cv
783.709 457.214 783.995 457.106 784.296 457.048 cv
784.598 456.99 784.919 456.991 785.258 457.052 cv
785.598 457.112 785.953 457.25 786.326 457.465 cv
786.451 457.537 786.573 457.618 786.693 457.707 cv
786.813 457.797 786.919 457.886 787.013 457.973 cv
787.107 458.061 787.182 458.142 787.239 458.215 cv
787.295 458.289 787.33 458.342 787.343 458.374 cv
787.356 458.406 787.362 458.437 787.361 458.466 cv
787.361 458.494 787.356 458.523 787.348 458.553 cv
787.34 458.582 787.329 458.614 787.314 458.648 cv
787.299 458.682 787.277 458.723 787.25 458.77 cv
787.215 458.831 787.184 458.883 787.157 458.926 cv
787.13 458.969 787.102 459 787.075 459.021 cv
787.047 459.041 787.02 459.052 786.994 459.055 cv
786.968 459.058 786.939 459.051 786.909 459.033 cv
786.871 459.011 786.828 458.97 786.777 458.91 cv
786.726 458.849 786.664 458.778 786.589 458.696 cv
786.514 458.615 786.419 458.524 786.302 458.426 cv
786.185 458.327 786.041 458.227 785.868 458.128 cv
785.554 457.946 785.246 457.854 784.945 457.852 cv
784.644 457.85 784.359 457.915 784.091 458.049 cv
783.822 458.182 783.57 458.372 783.336 458.618 cv
783.102 458.863 782.889 459.139 782.7 459.444 cv
782.817 459.444 782.945 459.451 783.084 459.464 cv
783.224 459.476 783.37 459.5 783.524 459.535 cv
783.677 459.569 783.834 459.616 783.994 459.674 cv
784.154 459.733 784.317 459.81 784.483 459.906 cv
784.838 460.111 785.11 460.332 785.298 460.569 cv
785.486 460.806 785.606 461.054 785.658 461.311 cv
785.709 461.569 785.701 461.832 785.631 462.101 cv
785.562 462.37 785.449 462.64 785.292 462.91 cv
784.363 462.482 mo
784.476 462.286 784.56 462.096 784.613 461.913 cv
784.667 461.73 784.681 461.556 784.654 461.391 cv
784.627 461.227 784.555 461.071 784.438 460.922 cv
784.321 460.773 784.151 460.634 783.927 460.505 cv
783.802 460.433 783.671 460.372 783.533 460.321 cv
783.395 460.271 783.256 460.232 783.117 460.203 cv
782.978 460.175 782.84 460.156 782.703 460.147 cv
782.566 460.138 782.437 460.138 782.313 460.148 cv
782.061 460.585 781.878 460.966 781.764 461.293 cv
781.65 461.619 781.595 461.902 781.599 462.141 cv
781.603 462.38 781.663 462.584 781.778 462.752 cv
781.893 462.92 782.057 463.065 782.27 463.188 cv
782.487 463.313 782.698 463.381 782.904 463.392 cv
783.11 463.402 783.304 463.369 783.488 463.293 cv
783.672 463.216 783.838 463.107 783.986 462.964 cv
784.134 462.822 784.259 462.661 784.363 462.482 cv
f
775.102 400.484 mo
775.026 400.616 774.958 400.698 774.898 400.732 cv
774.838 400.765 774.78 400.765 774.722 400.732 cv
772.601 399.507 li
772.54 399.472 772.51 399.419 772.51 399.349 cv
772.509 399.279 772.546 399.18 772.621 399.051 cv
772.695 398.923 772.762 398.842 772.822 398.809 cv
772.881 398.776 772.942 398.777 773.003 398.812 cv
775.124 400.036 li
775.151 400.052 775.172 400.071 775.188 400.094 cv
775.205 400.117 775.212 400.147 775.211 400.185 cv
775.209 400.222 775.2 400.265 775.183 400.314 cv
775.166 400.363 775.139 400.42 775.102 400.484 cv
778.916 405.643 mo
778.879 405.707 778.842 405.758 778.807 405.796 cv
778.771 405.834 778.737 405.862 778.705 405.879 cv
778.672 405.897 778.641 405.905 778.613 405.904 cv
778.584 405.903 778.558 405.896 778.534 405.882 cv
775.104 403.902 li
775.08 403.888 775.061 403.869 775.048 403.846 cv
775.034 403.822 775.026 403.792 775.023 403.754 cv
775.02 403.716 775.026 403.672 775.042 403.622 cv
775.057 403.572 775.083 403.515 775.12 403.451 cv
775.155 403.39 775.191 403.341 775.226 403.303 cv
775.262 403.265 775.295 403.235 775.327 403.216 cv
775.359 403.196 775.39 403.184 775.421 403.182 cv
775.452 403.179 775.481 403.186 775.508 403.201 cv
776.878 403.992 li
779.761 398.999 li
778.056 399.023 li
777.972 399.02 777.909 399.01 777.866 398.994 cv
777.823 398.979 777.796 398.953 777.785 398.917 cv
777.774 398.882 777.779 398.836 777.8 398.78 cv
777.821 398.725 777.854 398.658 777.899 398.58 cv
777.932 398.523 777.963 398.475 777.991 398.438 cv
778.02 398.4 778.047 398.37 778.073 398.349 cv
778.098 398.328 778.126 398.313 778.157 398.303 cv
778.187 398.294 778.223 398.287 778.265 398.285 cv
780.337 398.189 li
780.357 398.186 780.378 398.188 780.403 398.192 cv
780.427 398.197 780.456 398.205 780.49 398.216 cv
780.525 398.227 780.563 398.243 780.604 398.265 cv
780.646 398.287 780.697 398.315 780.758 398.35 cv
780.839 398.397 780.905 398.44 780.955 398.478 cv
781.005 398.516 781.042 398.549 781.066 398.579 cv
781.089 398.608 781.101 398.635 781.1 398.66 cv
781.1 398.684 781.094 398.706 781.082 398.727 cv
777.751 404.496 li
778.938 405.182 li
778.965 405.198 778.986 405.22 779.001 405.249 cv
779.016 405.278 779.023 405.311 779.021 405.348 cv
779.02 405.386 779.011 405.429 778.994 405.478 cv
778.977 405.527 778.951 405.582 778.916 405.643 cv
785.255 407.273 mo
785.19 407.384 785.123 407.462 785.052 407.507 cv
784.981 407.552 784.915 407.557 784.854 407.522 cv
784.113 407.094 li
783.316 408.474 li
783.301 408.501 783.28 408.52 783.256 408.53 cv
783.231 408.541 783.197 408.543 783.155 408.536 cv
783.112 408.53 783.061 408.514 783.001 408.488 cv
782.942 408.463 782.868 408.425 782.781 408.375 cv
782.697 408.327 782.63 408.283 782.578 408.244 cv
782.526 408.205 782.487 408.169 782.462 408.137 cv
782.437 408.104 782.424 408.075 782.422 408.049 cv
782.421 408.024 782.428 407.997 782.443 407.97 cv
783.24 406.59 li
780.554 405.039 li
780.514 405.016 780.483 404.991 780.462 404.966 cv
780.441 404.94 780.428 404.907 780.421 404.868 cv
780.415 404.828 780.422 404.78 780.443 404.725 cv
780.464 404.669 780.498 404.601 780.545 404.52 cv
780.582 404.455 780.617 404.399 780.65 404.35 cv
780.682 404.301 780.716 404.259 780.75 404.222 cv
780.785 404.186 780.822 404.153 780.861 404.124 cv
780.9 404.094 780.944 404.064 780.993 404.034 cv
785.636 401.397 li
785.669 401.38 785.708 401.371 785.752 401.369 cv
785.797 401.368 785.849 401.375 785.908 401.392 cv
785.968 401.408 786.037 401.435 786.116 401.474 cv
786.195 401.513 786.286 401.562 786.389 401.622 cv
786.503 401.688 786.6 401.749 786.679 401.806 cv
786.759 401.864 786.821 401.914 786.865 401.957 cv
786.909 402.001 786.938 402.041 786.953 402.079 cv
786.968 402.117 786.967 402.151 786.949 402.182 cv
784.529 406.373 li
785.27 406.801 li
785.327 406.834 785.357 406.891 785.358 406.97 cv
785.36 407.05 785.325 407.151 785.255 407.273 cv
785.736 402.267 mo
785.726 402.261 li
781.535 404.645 li
783.656 405.869 li
cp
f
775.102 344.523 mo
775.026 344.655 774.958 344.737 774.898 344.771 cv
774.838 344.804 774.78 344.804 774.722 344.771 cv
772.601 343.546 li
772.54 343.511 772.51 343.458 772.51 343.388 cv
772.509 343.318 772.546 343.219 772.621 343.09 cv
772.695 342.962 772.762 342.881 772.822 342.848 cv
772.881 342.815 772.942 342.816 773.003 342.851 cv
775.124 344.075 li
775.151 344.091 775.172 344.11 775.188 344.133 cv
775.205 344.156 775.212 344.186 775.211 344.224 cv
775.209 344.261 775.2 344.304 775.183 344.353 cv
775.166 344.402 775.139 344.459 775.102 344.523 cv
778.916 349.682 mo
778.879 349.746 778.842 349.797 778.807 349.835 cv
778.771 349.873 778.737 349.901 778.705 349.918 cv
778.672 349.936 778.641 349.944 778.613 349.943 cv
778.584 349.942 778.558 349.935 778.534 349.921 cv
775.104 347.941 li
775.08 347.927 775.061 347.908 775.048 347.885 cv
775.034 347.861 775.026 347.831 775.023 347.793 cv
775.02 347.755 775.026 347.711 775.042 347.661 cv
775.057 347.611 775.083 347.554 775.12 347.49 cv
775.155 347.429 775.191 347.38 775.226 347.342 cv
775.262 347.304 775.295 347.274 775.327 347.255 cv
775.359 347.235 775.39 347.223 775.421 347.221 cv
775.452 347.218 775.481 347.225 775.508 347.24 cv
776.878 348.031 li
779.761 343.038 li
778.056 343.062 li
777.972 343.059 777.909 343.049 777.866 343.033 cv
777.823 343.018 777.796 342.992 777.785 342.956 cv
777.774 342.921 777.779 342.875 777.8 342.819 cv
777.821 342.764 777.854 342.697 777.899 342.619 cv
777.932 342.562 777.963 342.514 777.991 342.477 cv
778.02 342.439 778.047 342.409 778.073 342.388 cv
778.098 342.367 778.126 342.352 778.157 342.342 cv
778.187 342.333 778.223 342.326 778.265 342.324 cv
780.337 342.228 li
780.357 342.225 780.378 342.227 780.403 342.231 cv
780.427 342.236 780.456 342.244 780.49 342.255 cv
780.525 342.266 780.563 342.282 780.604 342.304 cv
780.646 342.326 780.697 342.354 780.758 342.389 cv
780.839 342.436 780.905 342.479 780.955 342.517 cv
781.005 342.555 781.042 342.588 781.066 342.618 cv
781.089 342.647 781.101 342.674 781.1 342.699 cv
781.1 342.723 781.094 342.745 781.082 342.766 cv
777.751 348.535 li
778.938 349.221 li
778.965 349.237 778.986 349.259 779.001 349.288 cv
779.016 349.317 779.023 349.35 779.021 349.387 cv
779.02 349.425 779.011 349.468 778.994 349.517 cv
778.977 349.566 778.951 349.621 778.916 349.682 cv
784.114 352.642 mo
784.079 352.703 784.044 352.755 784.008 352.797 cv
783.972 352.84 783.937 352.873 783.904 352.896 cv
783.87 352.919 783.836 352.931 783.802 352.932 cv
783.767 352.933 783.735 352.924 783.705 352.906 cv
780.076 350.812 li
780.029 350.784 779.991 350.755 779.962 350.722 cv
779.934 350.69 779.915 350.653 779.905 350.611 cv
779.895 350.569 779.899 350.52 779.916 350.462 cv
779.934 350.405 779.964 350.339 780.007 350.264 cv
780.046 350.197 780.083 350.139 780.117 350.091 cv
780.152 350.043 780.189 350.005 780.229 349.976 cv
780.269 349.947 780.313 349.921 780.362 349.897 cv
780.41 349.874 780.468 349.852 780.535 349.832 cv
782.627 349.24 li
783.11 349.104 783.514 348.965 783.84 348.824 cv
784.166 348.682 784.437 348.539 784.653 348.393 cv
784.87 348.248 785.042 348.101 785.169 347.953 cv
785.296 347.806 785.401 347.659 785.485 347.514 cv
785.569 347.368 785.624 347.216 785.651 347.058 cv
785.677 346.899 785.672 346.744 785.636 346.593 cv
785.601 346.441 785.529 346.297 785.423 346.158 cv
785.317 346.02 785.173 345.899 784.991 345.794 cv
784.778 345.671 784.571 345.59 784.368 345.549 cv
784.166 345.509 783.981 345.486 783.815 345.48 cv
783.648 345.474 783.506 345.475 783.387 345.484 cv
783.268 345.492 783.188 345.484 783.146 345.459 cv
783.121 345.445 783.104 345.426 783.092 345.401 cv
783.081 345.377 783.078 345.346 783.083 345.308 cv
783.088 345.271 783.102 345.225 783.125 345.17 cv
783.147 345.115 783.179 345.052 783.22 344.981 cv
783.249 344.93 783.276 344.887 783.301 344.852 cv
783.326 344.817 783.35 344.788 783.374 344.766 cv
783.398 344.744 783.424 344.725 783.451 344.709 cv
783.478 344.693 783.523 344.679 783.584 344.667 cv
783.645 344.655 783.743 344.647 783.878 344.644 cv
784.013 344.641 784.173 344.653 784.357 344.681 cv
784.542 344.708 784.737 344.754 784.941 344.818 cv
785.145 344.882 785.347 344.971 785.547 345.087 cv
785.865 345.27 786.117 345.476 786.304 345.703 cv
786.491 345.93 786.618 346.167 786.685 346.414 cv
786.753 346.66 786.766 346.909 786.725 347.16 cv
786.683 347.412 786.595 347.654 786.46 347.887 cv
786.339 348.097 786.2 348.295 786.043 348.482 cv
785.885 348.668 785.677 348.848 785.417 349.02 cv
785.157 349.193 784.829 349.362 784.431 349.527 cv
784.034 349.692 783.536 349.859 782.938 350.028 cv
781.27 350.513 li
784.127 352.163 li
784.154 352.178 784.176 352.201 784.193 352.231 cv
784.209 352.261 784.218 352.296 784.219 352.338 cv
784.22 352.379 784.212 352.425 784.194 352.475 cv
784.176 352.526 784.149 352.581 784.114 352.642 cv
f
775.102 288.562 mo
775.026 288.694 774.958 288.776 774.898 288.81 cv
774.838 288.843 774.78 288.843 774.722 288.81 cv
772.601 287.585 li
772.54 287.55 772.51 287.497 772.51 287.427 cv
772.509 287.357 772.546 287.258 772.621 287.129 cv
772.695 287.001 772.762 286.92 772.822 286.887 cv
772.881 286.854 772.942 286.855 773.003 286.89 cv
775.124 288.114 li
775.151 288.13 775.172 288.149 775.188 288.172 cv
775.205 288.195 775.212 288.225 775.211 288.263 cv
775.209 288.3 775.2 288.343 775.183 288.392 cv
775.166 288.441 775.139 288.498 775.102 288.562 cv
778.916 293.721 mo
778.879 293.785 778.842 293.836 778.807 293.874 cv
778.771 293.912 778.737 293.94 778.705 293.957 cv
778.672 293.975 778.641 293.983 778.613 293.982 cv
778.584 293.981 778.558 293.974 778.534 293.96 cv
775.104 291.98 li
775.08 291.966 775.061 291.947 775.048 291.924 cv
775.034 291.9 775.026 291.87 775.023 291.832 cv
775.02 291.794 775.026 291.75 775.042 291.7 cv
775.057 291.65 775.083 291.593 775.12 291.529 cv
775.155 291.468 775.191 291.419 775.226 291.381 cv
775.262 291.343 775.295 291.313 775.327 291.294 cv
775.359 291.274 775.39 291.262 775.421 291.26 cv
775.452 291.257 775.481 291.264 775.508 291.279 cv
776.878 292.07 li
779.761 287.077 li
778.056 287.101 li
777.972 287.098 777.909 287.088 777.866 287.072 cv
777.823 287.057 777.796 287.031 777.785 286.995 cv
777.774 286.96 777.779 286.914 777.8 286.858 cv
777.821 286.803 777.854 286.736 777.899 286.658 cv
777.932 286.601 777.963 286.553 777.991 286.516 cv
778.02 286.478 778.047 286.448 778.073 286.427 cv
778.098 286.406 778.126 286.391 778.157 286.381 cv
778.187 286.372 778.223 286.365 778.265 286.363 cv
780.337 286.267 li
780.357 286.264 780.378 286.266 780.403 286.27 cv
780.427 286.275 780.456 286.283 780.49 286.294 cv
780.525 286.305 780.563 286.321 780.604 286.343 cv
780.646 286.365 780.697 286.393 780.758 286.428 cv
780.839 286.475 780.905 286.518 780.955 286.556 cv
781.005 286.594 781.042 286.627 781.066 286.657 cv
781.089 286.686 781.101 286.713 781.1 286.738 cv
781.1 286.762 781.094 286.784 781.082 286.805 cv
777.751 292.574 li
778.938 293.26 li
778.965 293.276 778.986 293.298 779.001 293.327 cv
779.016 293.356 779.023 293.389 779.021 293.426 cv
779.02 293.464 779.011 293.507 778.994 293.556 cv
778.977 293.605 778.951 293.66 778.916 293.721 cv
786.02 293.884 mo
785.729 294.389 785.424 294.826 785.104 295.196 cv
784.784 295.566 784.446 295.848 784.088 296.041 cv
783.731 296.234 783.356 296.326 782.964 296.318 cv
782.572 296.31 782.157 296.181 781.721 295.929 cv
781.308 295.69 781.003 295.416 780.805 295.106 cv
780.608 294.796 780.505 294.448 780.498 294.062 cv
780.49 293.677 780.571 293.254 780.739 292.794 cv
780.908 292.335 781.148 291.834 781.461 291.293 cv
781.75 290.792 782.056 290.356 782.378 289.985 cv
782.7 289.615 783.039 289.332 783.395 289.138 cv
783.75 288.944 784.124 288.851 784.517 288.859 cv
784.909 288.867 785.322 288.996 785.755 289.246 cv
786.171 289.486 786.478 289.761 786.675 290.071 cv
786.873 290.382 786.975 290.73 786.983 291.115 cv
786.99 291.5 786.91 291.923 786.741 292.383 cv
786.573 292.843 786.333 293.343 786.02 293.884 cv
785.092 293.43 mo
785.281 293.102 785.439 292.8 785.566 292.526 cv
785.693 292.252 785.791 292.002 785.86 291.776 cv
785.93 291.55 785.97 291.344 785.98 291.159 cv
785.99 290.973 785.972 290.804 785.924 290.652 cv
785.876 290.501 785.799 290.366 785.693 290.249 cv
785.588 290.131 785.454 290.026 785.291 289.932 cv
785.004 289.766 784.731 289.699 784.474 289.731 cv
784.216 289.762 783.968 289.867 783.728 290.044 cv
783.488 290.221 783.258 290.458 783.037 290.755 cv
782.816 291.051 782.6 291.382 782.389 291.748 cv
782.106 292.238 781.891 292.67 781.743 293.042 cv
781.596 293.415 781.514 293.741 781.499 294.021 cv
781.484 294.301 781.534 294.54 781.648 294.736 cv
781.762 294.933 781.941 295.102 782.185 295.242 cv
782.374 295.352 782.558 295.418 782.737 295.44 cv
782.916 295.462 783.09 295.446 783.258 295.392 cv
783.427 295.338 783.591 295.252 783.751 295.132 cv
783.91 295.012 784.066 294.867 784.218 294.698 cv
784.37 294.528 784.518 294.336 784.663 294.119 cv
784.808 293.903 784.951 293.673 785.092 293.43 cv
f
780.368 235.641 mo
780.292 235.773 780.224 235.855 780.164 235.889 cv
780.104 235.922 780.046 235.922 779.988 235.889 cv
777.867 234.664 li
777.806 234.629 777.776 234.576 777.776 234.506 cv
777.775 234.436 777.812 234.337 777.887 234.208 cv
777.961 234.08 778.028 233.999 778.088 233.966 cv
778.147 233.933 778.208 233.934 778.269 233.969 cv
780.39 235.193 li
780.417 235.209 780.438 235.228 780.454 235.251 cv
780.471 235.274 780.478 235.304 780.477 235.342 cv
780.475 235.379 780.466 235.422 780.449 235.471 cv
780.432 235.52 780.405 235.577 780.368 235.641 cv
785.092 239.539 mo
784.928 239.823 784.731 240.047 784.502 240.21 cv
784.273 240.373 784.018 240.475 783.739 240.517 cv
783.46 240.559 783.158 240.538 782.832 240.453 cv
782.507 240.369 782.163 240.222 781.801 240.013 cv
781.462 239.818 781.18 239.608 780.954 239.383 cv
780.728 239.157 780.562 238.921 780.456 238.675 cv
780.35 238.429 780.306 238.176 780.325 237.917 cv
780.344 237.657 780.429 237.397 780.579 237.137 cv
780.699 236.93 780.842 236.76 781.009 236.627 cv
781.176 236.493 781.365 236.391 781.576 236.318 cv
781.787 236.246 782.022 236.2 782.282 236.181 cv
782.541 236.161 782.82 236.162 783.12 236.181 cv
782.978 235.959 782.862 235.745 782.774 235.538 cv
782.686 235.332 782.627 235.129 782.598 234.929 cv
782.569 234.73 782.571 234.536 782.605 234.348 cv
782.639 234.16 782.709 233.975 782.815 233.792 cv
782.948 233.562 783.113 233.371 783.313 233.217 cv
783.512 233.064 783.738 232.961 783.991 232.909 cv
784.245 232.857 784.526 232.862 784.834 232.925 cv
785.143 232.988 785.47 233.12 785.815 233.319 cv
786.146 233.51 786.41 233.716 786.606 233.935 cv
786.802 234.154 786.939 234.377 787.017 234.605 cv
787.095 234.833 787.118 235.061 787.085 235.29 cv
787.052 235.519 786.974 235.741 786.851 235.954 cv
786.751 236.126 786.628 236.276 786.48 236.403 cv
786.333 236.529 786.164 236.633 785.973 236.712 cv
785.783 236.792 785.574 236.848 785.345 236.881 cv
785.116 236.913 784.869 236.925 784.604 236.916 cv
784.776 237.173 784.919 237.418 785.035 237.652 cv
785.15 237.886 785.23 238.111 785.274 238.328 cv
785.318 238.545 785.326 238.753 785.299 238.952 cv
785.273 239.15 785.204 239.346 785.092 239.539 cv
785.941 235.537 mo
786.024 235.395 786.073 235.252 786.091 235.109 cv
786.108 234.965 786.093 234.826 786.045 234.69 cv
785.997 234.554 785.915 234.424 785.799 234.301 cv
785.683 234.178 785.535 234.064 785.356 233.961 cv
784.991 233.75 784.666 233.673 784.383 233.73 cv
784.1 233.788 783.875 233.96 783.709 234.248 cv
783.633 234.38 783.585 234.516 783.565 234.655 cv
783.545 234.795 783.554 234.943 783.592 235.1 cv
783.63 235.258 783.694 235.427 783.786 235.608 cv
783.877 235.79 783.994 235.991 784.137 236.213 cv
784.58 236.235 784.955 236.192 785.26 236.084 cv
785.566 235.976 785.793 235.794 785.941 235.537 cv
784.157 239.121 mo
784.246 238.965 784.299 238.807 784.315 238.647 cv
784.331 238.487 784.312 238.318 784.259 238.141 cv
784.205 237.964 784.121 237.773 784.007 237.569 cv
783.892 237.366 783.752 237.141 783.587 236.897 cv
783.313 236.879 783.065 236.876 782.844 236.888 cv
782.623 236.9 782.428 236.932 782.261 236.984 cv
782.093 237.036 781.948 237.109 781.824 237.202 cv
781.7 237.295 781.595 237.416 781.509 237.565 cv
781.32 237.893 781.286 238.212 781.407 238.521 cv
781.529 238.83 781.813 239.114 782.259 239.372 cv
782.692 239.622 783.072 239.72 783.398 239.667 cv
783.724 239.614 783.977 239.432 784.157 239.121 cv
f
780.368 179.68 mo
780.292 179.812 780.224 179.894 780.164 179.928 cv
780.104 179.961 780.046 179.961 779.988 179.928 cv
777.867 178.703 li
777.806 178.668 777.776 178.615 777.776 178.545 cv
777.775 178.475 777.812 178.376 777.887 178.247 cv
777.961 178.119 778.028 178.038 778.088 178.005 cv
778.147 177.972 778.208 177.973 778.269 178.008 cv
780.39 179.232 li
780.417 179.248 780.438 179.267 780.454 179.29 cv
780.471 179.313 780.478 179.343 780.477 179.381 cv
780.475 179.418 780.466 179.461 780.449 179.51 cv
780.432 179.559 780.405 179.616 780.368 179.68 cv
785.362 183.145 mo
785.196 183.433 784.992 183.686 784.748 183.904 cv
784.505 184.122 784.233 184.281 783.932 184.38 cv
783.632 184.479 783.305 184.509 782.953 184.471 cv
782.601 184.432 782.234 184.302 781.852 184.082 cv
781.577 183.924 781.355 183.75 781.184 183.561 cv
781.014 183.373 780.887 183.171 780.803 182.956 cv
780.72 182.741 780.68 182.512 780.682 182.27 cv
780.684 182.028 780.721 181.772 780.794 181.502 cv
780.866 181.233 780.968 180.951 781.101 180.658 cv
781.235 180.365 781.393 180.06 781.576 179.742 cv
781.739 179.461 781.918 179.186 782.114 178.916 cv
782.311 178.646 782.525 178.399 782.757 178.177 cv
782.989 177.955 783.24 177.765 783.509 177.607 cv
783.779 177.449 784.064 177.341 784.366 177.283 cv
784.668 177.225 784.989 177.226 785.328 177.287 cv
785.667 177.347 786.023 177.485 786.395 177.7 cv
786.521 177.772 786.643 177.853 786.763 177.942 cv
786.883 178.032 786.989 178.121 787.083 178.208 cv
787.176 178.296 787.252 178.377 787.308 178.45 cv
787.365 178.524 787.4 178.577 787.413 178.609 cv
787.426 178.641 787.432 178.672 787.431 178.701 cv
787.43 178.729 787.426 178.758 787.418 178.788 cv
787.41 178.817 787.399 178.849 787.384 178.883 cv
787.368 178.917 787.347 178.958 787.32 179.005 cv
787.285 179.066 787.254 179.118 787.226 179.161 cv
787.199 179.204 787.172 179.235 787.145 179.256 cv
787.117 179.276 787.09 179.287 787.064 179.29 cv
787.037 179.293 787.009 179.286 786.979 179.268 cv
786.941 179.246 786.897 179.205 786.847 179.145 cv
786.796 179.084 786.734 179.013 786.659 178.931 cv
786.584 178.85 786.488 178.759 786.372 178.661 cv
786.255 178.562 786.111 178.462 785.938 178.363 cv
785.624 178.181 785.316 178.089 785.015 178.087 cv
784.714 178.085 784.429 178.15 784.16 178.284 cv
783.892 178.417 783.64 178.607 783.406 178.853 cv
783.171 179.098 782.959 179.374 782.769 179.679 cv
782.887 179.679 783.015 179.686 783.154 179.699 cv
783.293 179.711 783.44 179.735 783.594 179.77 cv
783.747 179.804 783.904 179.851 784.064 179.909 cv
784.224 179.968 784.387 180.045 784.553 180.141 cv
784.908 180.346 785.18 180.567 785.368 180.804 cv
785.556 181.041 785.675 181.288 785.727 181.546 cv
785.779 181.804 785.771 182.067 785.701 182.336 cv
785.631 182.605 785.519 182.875 785.362 183.145 cv
784.433 182.717 mo
784.546 182.521 784.629 182.331 784.683 182.148 cv
784.737 181.965 784.751 181.791 784.724 181.626 cv
784.697 181.462 784.625 181.306 784.508 181.157 cv
784.391 181.008 784.221 180.869 783.997 180.74 cv
783.872 180.668 783.741 180.607 783.603 180.556 cv
783.465 180.506 783.326 180.467 783.187 180.438 cv
783.048 180.41 782.91 180.391 782.773 180.382 cv
782.636 180.373 782.506 180.373 782.383 180.383 cv
782.131 180.82 781.948 181.201 781.834 181.528 cv
781.72 181.854 781.665 182.137 781.669 182.376 cv
781.673 182.615 781.733 182.819 781.848 182.987 cv
781.963 183.155 782.127 183.3 782.34 183.423 cv
782.556 183.548 782.768 183.616 782.973 183.627 cv
783.179 183.637 783.374 183.604 783.558 183.528 cv
783.742 183.451 783.908 183.342 784.056 183.2 cv
784.203 183.057 784.329 182.896 784.433 182.717 cv
f
780.368 123.719 mo
780.292 123.851 780.224 123.933 780.164 123.967 cv
780.104 124 780.046 124 779.988 123.967 cv
777.867 122.742 li
777.806 122.707 777.776 122.654 777.776 122.584 cv
777.775 122.514 777.812 122.415 777.887 122.286 cv
777.961 122.158 778.028 122.077 778.088 122.044 cv
778.147 122.011 778.208 122.012 778.269 122.047 cv
780.39 123.271 li
780.417 123.287 780.438 123.306 780.454 123.329 cv
780.471 123.352 780.478 123.382 780.477 123.42 cv
780.475 123.457 780.466 123.5 780.449 123.549 cv
780.432 123.598 780.405 123.655 780.368 123.719 cv
785.325 127.508 mo
785.26 127.619 785.192 127.697 785.121 127.742 cv
785.051 127.787 784.985 127.792 784.924 127.757 cv
784.183 127.329 li
783.386 128.709 li
783.37 128.736 783.35 128.755 783.326 128.765 cv
783.301 128.776 783.267 128.778 783.225 128.771 cv
783.182 128.765 783.131 128.749 783.071 128.723 cv
783.011 128.698 782.938 128.66 782.851 128.61 cv
782.767 128.562 782.7 128.518 782.648 128.479 cv
782.596 128.44 782.557 128.404 782.532 128.372 cv
782.507 128.339 782.493 128.31 782.492 128.284 cv
782.49 128.259 782.498 128.232 782.513 128.205 cv
783.31 126.825 li
780.624 125.274 li
780.584 125.251 780.553 125.226 780.532 125.201 cv
780.511 125.175 780.497 125.142 780.491 125.103 cv
780.485 125.063 780.492 125.015 780.513 124.96 cv
780.534 124.904 780.568 124.836 780.615 124.755 cv
780.652 124.69 780.687 124.634 780.72 124.585 cv
780.752 124.536 780.786 124.494 780.82 124.457 cv
780.855 124.421 780.892 124.388 780.931 124.359 cv
780.97 124.329 781.014 124.299 781.063 124.269 cv
785.706 121.632 li
785.739 121.615 785.778 121.606 785.822 121.604 cv
785.867 121.603 785.919 121.61 785.978 121.627 cv
786.038 121.643 786.107 121.67 786.186 121.709 cv
786.265 121.748 786.356 121.797 786.459 121.857 cv
786.573 121.923 786.67 121.984 786.749 122.041 cv
786.829 122.099 786.891 122.149 786.935 122.192 cv
786.979 122.236 787.008 122.276 787.023 122.314 cv
787.038 122.352 787.036 122.386 787.019 122.417 cv
784.599 126.608 li
785.34 127.036 li
785.397 127.069 785.427 127.126 785.428 127.205 cv
785.429 127.285 785.395 127.386 785.325 127.508 cv
785.806 122.502 mo
785.796 122.496 li
781.605 124.88 li
783.726 126.104 li
cp
f
780.368 67.7586 mo
780.292 67.8906 780.224 67.9726 780.164 68.0066 cv
780.104 68.0396 780.046 68.0396 779.988 68.0066 cv
777.867 66.7816 li
777.806 66.7466 777.776 66.6936 777.776 66.6236 cv
777.775 66.5536 777.812 66.4546 777.887 66.3256 cv
777.961 66.1976 778.028 66.1166 778.088 66.0836 cv
778.147 66.0506 778.208 66.0516 778.269 66.0866 cv
780.39 67.3106 li
780.417 67.3266 780.438 67.3456 780.454 67.3686 cv
780.471 67.3916 780.478 67.4216 780.477 67.4596 cv
780.475 67.4966 780.466 67.5396 780.449 67.5886 cv
780.432 67.6376 780.405 67.6946 780.368 67.7586 cv
784.184 72.8776 mo
784.149 72.9386 784.114 72.9906 784.078 73.0326 cv
784.042 73.0756 784.007 73.1086 783.973 73.1316 cv
783.94 73.1546 783.906 73.1666 783.871 73.1676 cv
783.837 73.1686 783.805 73.1596 783.775 73.1416 cv
780.146 71.0476 li
780.099 71.0196 780.061 70.9906 780.032 70.9576 cv
780.004 70.9256 779.984 70.8886 779.975 70.8466 cv
779.965 70.8046 779.969 70.7556 779.986 70.6976 cv
780.004 70.6406 780.034 70.5746 780.077 70.4996 cv
780.116 70.4326 780.153 70.3746 780.187 70.3266 cv
780.222 70.2786 780.259 70.2406 780.299 70.2116 cv
780.339 70.1826 780.383 70.1566 780.432 70.1326 cv
780.48 70.1096 780.538 70.0876 780.605 70.0676 cv
782.697 69.4756 li
783.18 69.3396 783.584 69.2006 783.91 69.0596 cv
784.236 68.9176 784.507 68.7746 784.723 68.6286 cv
784.94 68.4836 785.111 68.3366 785.239 68.1886 cv
785.366 68.0416 785.471 67.8946 785.555 67.7496 cv
785.639 67.6036 785.694 67.4516 785.721 67.2936 cv
785.747 67.1346 785.742 66.9796 785.706 66.8286 cv
785.67 66.6766 785.599 66.5326 785.493 66.3936 cv
785.386 66.2556 785.243 66.1346 785.061 66.0296 cv
784.848 65.9066 784.64 65.8256 784.438 65.7846 cv
784.235 65.7446 784.051 65.7216 783.884 65.7156 cv
783.718 65.7096 783.575 65.7106 783.457 65.7196 cv
783.338 65.7276 783.258 65.7196 783.216 65.6946 cv
783.191 65.6806 783.173 65.6616 783.162 65.6366 cv
783.151 65.6126 783.148 65.5816 783.153 65.5436 cv
783.158 65.5066 783.172 65.4606 783.194 65.4056 cv
783.217 65.3506 783.248 65.2876 783.289 65.2166 cv
783.319 65.1656 783.346 65.1226 783.371 65.0876 cv
783.396 65.0526 783.42 65.0236 783.444 65.0016 cv
783.468 64.9796 783.494 64.9606 783.521 64.9446 cv
783.548 64.9286 783.592 64.9146 783.654 64.9026 cv
783.715 64.8906 783.813 64.8826 783.948 64.8796 cv
784.083 64.8766 784.242 64.8886 784.427 64.9166 cv
784.612 64.9436 784.806 64.9896 785.011 65.0536 cv
785.215 65.1176 785.417 65.2066 785.617 65.3226 cv
785.935 65.5056 786.187 65.7116 786.374 65.9386 cv
786.561 66.1656 786.688 66.4026 786.755 66.6496 cv
786.823 66.8956 786.836 67.1446 786.794 67.3956 cv
786.753 67.6476 786.665 67.8896 786.53 68.1226 cv
786.409 68.3326 786.27 68.5306 786.113 68.7176 cv
785.955 68.9036 785.747 69.0836 785.487 69.2556 cv
785.227 69.4286 784.899 69.5976 784.501 69.7626 cv
784.104 69.9276 783.606 70.0946 783.008 70.2636 cv
781.34 70.7486 li
784.197 72.3986 li
784.224 72.4136 784.246 72.4366 784.263 72.4666 cv
784.279 72.4966 784.288 72.5316 784.289 72.5736 cv
784.29 72.6146 784.282 72.6606 784.264 72.7106 cv
784.246 72.7616 784.219 72.8166 784.184 72.8776 cv
f
786.05 14.0976 mo
785.759 14.6016 785.454 15.0386 785.134 15.4086 cv
784.814 15.7796 784.477 16.0606 784.118 16.2536 cv
783.761 16.4466 783.386 16.5396 782.994 16.5316 cv
782.602 16.5236 782.188 16.3936 781.751 16.1416 cv
781.339 15.9036 781.033 15.6296 780.835 15.3186 cv
780.638 15.0086 780.535 14.6606 780.529 14.2756 cv
780.52 13.8896 780.602 13.4676 780.769 13.0076 cv
780.938 12.5476 781.178 12.0476 781.491 11.5056 cv
781.78 11.0056 782.086 10.5696 782.408 10.1986 cv
782.73 9.82758 783.069 9.54559 783.425 9.35162 cv
783.78 9.15759 784.154 9.06458 784.547 9.07257 cv
784.939 9.07959 785.352 9.20862 785.785 9.45862 cv
786.201 9.69958 786.508 9.97461 786.706 10.2846 cv
786.904 10.5946 787.005 10.9426 787.013 11.3286 cv
787.02 11.7136 786.94 12.1366 786.771 12.5956 cv
786.603 13.0556 786.362 13.5566 786.05 14.0976 cv
785.122 13.6426 mo
785.311 13.3146 785.469 13.0136 785.596 12.7396 cv
785.723 12.4656 785.821 12.2156 785.891 11.9896 cv
785.96 11.7636 786 11.5576 786.01 11.3716 cv
786.02 11.1856 786.003 11.0176 785.954 10.8656 cv
785.906 10.7136 785.829 10.5796 785.724 10.4616 cv
785.618 10.3446 785.484 10.2386 785.321 10.1446 cv
785.034 9.97858 784.761 9.91162 784.504 9.9436 cv
784.246 9.97559 783.998 10.0796 783.758 10.2576 cv
783.518 10.4346 783.288 10.6716 783.068 10.9676 cv
782.846 11.2646 782.63 11.5956 782.419 11.9606 cv
782.136 12.4516 781.921 12.8826 781.773 13.2556 cv
781.626 13.6286 781.544 13.9546 781.529 14.2346 cv
781.514 14.5146 781.564 14.7526 781.678 14.9496 cv
781.792 15.1466 781.971 15.3146 782.215 15.4556 cv
782.404 15.5646 782.589 15.6306 782.767 15.6526 cv
782.946 15.6746 783.12 15.6596 783.288 15.6056 cv
783.457 15.5516 783.621 15.4646 783.781 15.3446 cv
783.94 15.2246 784.096 15.0806 784.248 14.9106 cv
784.4 14.7416 784.548 14.5486 784.693 14.3326 cv
784.839 14.1166 784.982 13.8866 785.122 13.6426 cv
f
25.4582 30.7408 mo
25.4062 30.8838 25.3532 30.9768 25.3002 31.0198 cv
25.2472 31.0628 25.1892 31.0728 25.1272 31.0508 cv
22.8262 30.2128 li
22.7592 30.1888 22.7202 30.1428 22.7082 30.0738 cv
22.6962 30.0048 22.7152 29.9008 22.7662 29.7608 cv
22.8162 29.6218 22.8682 29.5298 22.9212 29.4868 cv
22.9742 29.4438 23.0342 29.4348 23.1002 29.4588 cv
25.4022 30.2958 li
25.4312 30.3068 25.4562 30.3218 25.4752 30.3418 cv
25.4952 30.3618 25.5082 30.3898 25.5132 30.4268 cv
25.5182 30.4648 25.5172 30.5088 25.5082 30.5598 cv
25.5002 30.6108 25.4832 30.6708 25.4582 30.7408 cv
30.7572 33.2248 mo
30.6192 33.6068 30.4312 33.9228 30.1942 34.1728 cv
29.9572 34.4238 29.6842 34.6078 29.3752 34.7258 cv
29.0662 34.8448 28.7302 34.8978 28.3662 34.8858 cv
28.0032 34.8738 27.6232 34.7958 27.2262 34.6518 cv
27.0062 34.5718 26.8032 34.4798 26.6162 34.3768 cv
26.4292 34.2728 26.2672 34.1708 26.1292 34.0688 cv
25.9922 33.9668 25.8812 33.8758 25.7982 33.7958 cv
25.7152 33.7148 25.6652 33.6578 25.6462 33.6218 cv
25.6282 33.5858 25.6182 33.5548 25.6152 33.5288 cv
25.6122 33.5028 25.6112 33.4728 25.6132 33.4378 cv
25.6162 33.4038 25.6242 33.3618 25.6372 33.3128 cv
25.6512 33.2638 25.6702 33.2058 25.6942 33.1398 cv
25.7172 33.0778 25.7402 33.0228 25.7632 32.9748 cv
25.7872 32.9278 25.8122 32.8908 25.8382 32.8648 cv
25.8642 32.8388 25.8902 32.8228 25.9152 32.8148 cv
25.9412 32.8078 25.9662 32.8088 25.9922 32.8178 cv
26.0292 32.8318 26.0772 32.8748 26.1382 32.9488 cv
26.1982 33.0228 26.2842 33.1108 26.3942 33.2108 cv
26.5052 33.3118 26.6492 33.4208 26.8242 33.5388 cv
26.9992 33.6568 27.2192 33.7638 27.4832 33.8598 cv
27.7292 33.9498 27.9662 34.0018 28.1932 34.0188 cv
28.4202 34.0348 28.6302 34.0068 28.8242 33.9368 cv
29.0182 33.8658 29.1922 33.7508 29.3452 33.5928 cv
29.4982 33.4348 29.6242 33.2198 29.7232 32.9478 cv
29.8062 32.7208 29.8432 32.5068 29.8352 32.3058 cv
29.8272 32.1058 29.7702 31.9208 29.6632 31.7508 cv
29.5572 31.5808 29.4002 31.4258 29.1932 31.2868 cv
28.9862 31.1468 28.7252 31.0198 28.4092 30.9048 cv
28.1852 30.8228 27.9892 30.7638 27.8192 30.7268 cv
27.6502 30.6908 27.4952 30.6468 27.3562 30.5958 cv
27.2532 30.5588 27.1882 30.5078 27.1612 30.4438 cv
27.1352 30.3808 27.1462 30.2808 27.1962 30.1448 cv
28.2522 27.2428 li
28.2962 27.1218 28.3572 27.0428 28.4352 27.0048 cv
28.5142 26.9668 28.6062 26.9668 28.7122 27.0058 cv
31.8672 28.1538 li
31.8972 28.1648 31.9222 28.1828 31.9442 28.2098 cv
31.9652 28.2358 31.9792 28.2698 31.9852 28.3088 cv
31.9922 28.3488 31.9902 28.3958 31.9812 28.4508 cv
31.9712 28.5058 31.9542 28.5678 31.9282 28.6378 cv
31.8802 28.7698 31.8252 28.8658 31.7632 28.9268 cv
31.7012 28.9868 31.6392 29.0058 31.5762 28.9828 cv
29.0282 28.0558 li
28.3012 30.0548 li
28.4312 30.0808 28.5622 30.1158 28.6922 30.1598 cv
28.8232 30.2028 28.9732 30.2558 29.1432 30.3168 cv
29.5352 30.4598 29.8602 30.6338 30.1182 30.8378 cv
30.3772 31.0418 30.5712 31.2688 30.7032 31.5178 cv
30.8342 31.7678 30.9042 32.0368 30.9132 32.3268 cv
30.9222 32.6168 30.8702 32.9158 30.7572 33.2248 cv
32.7412 35.8608 mo
32.6462 36.1218 32.5402 36.2788 32.4222 36.3338 cv
32.3052 36.3888 32.1322 36.3748 31.9042 36.2918 cv
31.6842 36.2118 31.5472 36.1138 31.4942 35.9988 cv
31.4402 35.8838 31.4592 35.6998 31.5512 35.4468 cv
31.6462 35.1858 31.7522 35.0278 31.8702 34.9728 cv
31.9882 34.9188 32.1602 34.9328 32.3882 35.0148 cv
32.6082 35.0958 32.7452 35.1928 32.7992 35.3078 cv
32.8532 35.4238 32.8332 35.6078 32.7412 35.8608 cv
39.3272 36.3438 mo
39.1892 36.7258 39.0012 37.0418 38.7642 37.2928 cv
38.5272 37.5428 38.2542 37.7268 37.9452 37.8458 cv
37.6362 37.9638 37.3002 38.0168 36.9362 38.0048 cv
36.5732 37.9938 36.1932 37.9148 35.7962 37.7708 cv
35.5762 37.6908 35.3732 37.5988 35.1862 37.4958 cv
34.9992 37.3928 34.8372 37.2898 34.6992 37.1878 cv
34.5622 37.0858 34.4512 36.9948 34.3682 36.9148 cv
34.2852 36.8348 34.2352 36.7768 34.2162 36.7408 cv
34.1982 36.7048 34.1882 36.6738 34.1852 36.6478 cv
34.1822 36.6218 34.1812 36.5918 34.1832 36.5578 cv
34.1862 36.5228 34.1942 36.4808 34.2072 36.4318 cv
34.2212 36.3828 34.2402 36.3258 34.2642 36.2588 cv
34.2872 36.1968 34.3102 36.1418 34.3332 36.0948 cv
34.3572 36.0468 34.3822 36.0098 34.4082 35.9838 cv
34.4342 35.9588 34.4592 35.9418 34.4852 35.9348 cv
34.5112 35.9268 34.5362 35.9278 34.5622 35.9378 cv
34.5992 35.9508 34.6472 35.9948 34.7082 36.0688 cv
34.7682 36.1428 34.8542 36.2298 34.9642 36.3298 cv
35.0752 36.4308 35.2192 36.5398 35.3942 36.6578 cv
35.5692 36.7758 35.7892 36.8828 36.0532 36.9788 cv
36.2992 37.0688 36.5362 37.1218 36.7632 37.1378 cv
36.9902 37.1538 37.2002 37.1258 37.3942 37.0558 cv
37.5882 36.9848 37.7622 36.8708 37.9152 36.7118 cv
38.0682 36.5538 38.1942 36.3388 38.2932 36.0668 cv
38.3762 35.8398 38.4132 35.6258 38.4052 35.4248 cv
38.3972 35.2248 38.3402 35.0398 38.2332 34.8698 cv
38.1272 34.6998 37.9702 34.5458 37.7632 34.4058 cv
37.5562 34.2658 37.2952 34.1388 36.9792 34.0238 cv
36.7552 33.9428 36.5592 33.8828 36.3892 33.8468 cv
36.2202 33.8098 36.0652 33.7658 35.9262 33.7148 cv
35.8232 33.6778 35.7582 33.6268 35.7312 33.5638 cv
35.7052 33.4998 35.7162 33.3998 35.7662 33.2638 cv
36.8222 30.3628 li
36.8662 30.2408 36.9272 30.1618 37.0052 30.1238 cv
37.0842 30.0858 37.1762 30.0858 37.2822 30.1248 cv
40.4372 31.2728 li
40.4672 31.2838 40.4922 31.3028 40.5142 31.3288 cv
40.5352 31.3558 40.5492 31.3888 40.5552 31.4278 cv
40.5622 31.4678 40.5602 31.5148 40.5512 31.5698 cv
40.5412 31.6248 40.5242 31.6868 40.4982 31.7568 cv
40.4502 31.8888 40.3952 31.9848 40.3332 32.0458 cv
40.2712 32.1068 40.2092 32.1248 40.1462 32.1018 cv
37.5982 31.1748 li
36.8712 33.1738 li
37.0012 33.2008 37.1322 33.2358 37.2622 33.2788 cv
37.3932 33.3218 37.5432 33.3748 37.7132 33.4368 cv
38.1052 33.5798 38.4302 33.7528 38.6882 33.9568 cv
38.9472 34.1608 39.1412 34.3878 39.2732 34.6368 cv
39.4042 34.8868 39.4742 35.1568 39.4832 35.4468 cv
39.4922 35.7368 39.4402 36.0358 39.3272 36.3438 cv
44.9662 38.3958 mo
44.8272 38.7778 44.6392 39.0938 44.4022 39.3448 cv
44.1652 39.5948 43.8932 39.7798 43.5842 39.8978 cv
43.2742 40.0158 42.9382 40.0688 42.5752 40.0568 cv
42.2112 40.0458 41.8312 39.9678 41.4342 39.8228 cv
41.2142 39.7428 41.0112 39.6508 40.8242 39.5478 cv
40.6372 39.4448 40.4752 39.3418 40.3372 39.2398 cv
40.2002 39.1378 40.0902 39.0468 40.0072 38.9668 cv
39.9232 38.8868 39.8732 38.8288 39.8552 38.7928 cv
39.8362 38.7568 39.8262 38.7268 39.8232 38.6998 cv
39.8202 38.6738 39.8192 38.6438 39.8222 38.6098 cv
39.8242 38.5748 39.8322 38.5328 39.8452 38.4838 cv
39.8592 38.4348 39.8782 38.3778 39.9022 38.3118 cv
39.9252 38.2488 39.9482 38.1938 39.9712 38.1468 cv
39.9952 38.0988 40.0202 38.0618 40.0462 38.0368 cv
40.0722 38.0108 40.0982 37.9938 40.1232 37.9868 cv
40.1492 37.9788 40.1742 37.9798 40.2002 37.9898 cv
40.2372 38.0028 40.2852 38.0468 40.3462 38.1208 cv
40.4062 38.1948 40.4922 38.2818 40.6032 38.3828 cv
40.7142 38.4828 40.8572 38.5928 41.0322 38.7098 cv
41.2072 38.8278 41.4272 38.9348 41.6922 39.0308 cv
41.9372 39.1208 42.1742 39.1738 42.4012 39.1898 cv
42.6282 39.2058 42.8382 39.1788 43.0322 39.1078 cv
43.2262 39.0368 43.4002 38.9228 43.5532 38.7638 cv
43.7072 38.6058 43.8332 38.3908 43.9312 38.1188 cv
44.0142 37.8918 44.0522 37.6778 44.0442 37.4778 cv
44.0352 37.2768 43.9782 37.0918 43.8712 36.9218 cv
43.7652 36.7528 43.6082 36.5978 43.4012 36.4578 cv
43.1942 36.3178 42.9332 36.1908 42.6172 36.0758 cv
42.3942 35.9948 42.1972 35.9358 42.0272 35.8988 cv
41.8582 35.8618 41.7032 35.8178 41.5642 35.7668 cv
41.4612 35.7298 41.3962 35.6788 41.3702 35.6158 cv
41.3432 35.5518 41.3542 35.4518 41.4042 35.3158 cv
42.4602 32.4148 li
42.5042 32.2938 42.5652 32.2138 42.6432 32.1758 cv
42.7222 32.1378 42.8142 32.1378 42.9202 32.1768 cv
46.0752 33.3248 li
46.1052 33.3358 46.1302 33.3548 46.1522 33.3808 cv
46.1732 33.4078 46.1872 33.4408 46.1942 33.4808 cv
46.2002 33.5198 46.1982 33.5678 46.1892 33.6218 cv
46.1792 33.6768 46.1622 33.7388 46.1362 33.8088 cv
46.0882 33.9408 46.0332 34.0378 45.9712 34.0978 cv
45.9102 34.1588 45.8472 34.1778 45.7842 34.1548 cv
43.2372 33.2268 li
42.5092 35.2258 li
42.6402 35.2528 42.7702 35.2878 42.9002 35.3308 cv
43.0312 35.3738 43.1812 35.4268 43.3512 35.4888 cv
43.7432 35.6318 44.0682 35.8048 44.3272 36.0088 cv
44.5852 36.2128 44.7802 36.4398 44.9112 36.6898 cv
45.0422 36.9388 45.1122 37.2088 45.1212 37.4988 cv
45.1302 37.7888 45.0782 38.0878 44.9662 38.3958 cv
f
136.683 30.7408 mo
136.631 30.8838 136.578 30.9768 136.525 31.0198 cv
136.472 31.0628 136.414 31.0728 136.352 31.0508 cv
134.051 30.2128 li
133.984 30.1888 133.945 30.1428 133.933 30.0738 cv
133.921 30.0048 133.94 29.9008 133.991 29.7608 cv
134.041 29.6218 134.093 29.5298 134.146 29.4868 cv
134.199 29.4438 134.259 29.4348 134.325 29.4588 cv
136.627 30.2958 li
136.656 30.3068 136.681 30.3218 136.7 30.3418 cv
136.72 30.3618 136.733 30.3898 136.738 30.4268 cv
136.743 30.4648 136.742 30.5088 136.733 30.5598 cv
136.725 30.6108 136.708 30.6708 136.683 30.7408 cv
141.982 33.2248 mo
141.844 33.6068 141.656 33.9228 141.419 34.1728 cv
141.182 34.4238 140.909 34.6078 140.6 34.7258 cv
140.291 34.8448 139.955 34.8978 139.591 34.8858 cv
139.228 34.8738 138.848 34.7958 138.451 34.6518 cv
138.231 34.5718 138.028 34.4798 137.841 34.3768 cv
137.654 34.2728 137.492 34.1708 137.354 34.0688 cv
137.217 33.9668 137.106 33.8758 137.023 33.7958 cv
136.94 33.7148 136.89 33.6578 136.871 33.6218 cv
136.853 33.5858 136.843 33.5548 136.84 33.5288 cv
136.837 33.5028 136.836 33.4728 136.838 33.4378 cv
136.841 33.4038 136.849 33.3618 136.862 33.3128 cv
136.876 33.2638 136.895 33.2058 136.919 33.1398 cv
136.942 33.0778 136.965 33.0228 136.988 32.9748 cv
137.012 32.9278 137.037 32.8908 137.063 32.8648 cv
137.089 32.8388 137.115 32.8228 137.14 32.8148 cv
137.166 32.8078 137.191 32.8088 137.217 32.8178 cv
137.254 32.8318 137.302 32.8748 137.363 32.9488 cv
137.423 33.0228 137.509 33.1108 137.619 33.2108 cv
137.73 33.3118 137.874 33.4208 138.049 33.5388 cv
138.224 33.6568 138.444 33.7638 138.708 33.8598 cv
138.954 33.9498 139.191 34.0018 139.418 34.0188 cv
139.645 34.0348 139.855 34.0068 140.049 33.9368 cv
140.243 33.8658 140.417 33.7508 140.57 33.5928 cv
140.723 33.4348 140.849 33.2198 140.948 32.9478 cv
141.031 32.7208 141.068 32.5068 141.06 32.3058 cv
141.052 32.1058 140.995 31.9208 140.888 31.7508 cv
140.782 31.5808 140.625 31.4258 140.418 31.2868 cv
140.211 31.1468 139.95 31.0198 139.634 30.9048 cv
139.41 30.8228 139.214 30.7638 139.044 30.7268 cv
138.875 30.6908 138.72 30.6468 138.581 30.5958 cv
138.478 30.5588 138.413 30.5078 138.386 30.4438 cv
138.36 30.3808 138.371 30.2808 138.421 30.1448 cv
139.477 27.2428 li
139.521 27.1218 139.582 27.0428 139.66 27.0048 cv
139.739 26.9668 139.831 26.9668 139.937 27.0058 cv
143.092 28.1538 li
143.122 28.1648 143.147 28.1828 143.169 28.2098 cv
143.19 28.2358 143.204 28.2698 143.21 28.3088 cv
143.217 28.3488 143.215 28.3958 143.206 28.4508 cv
143.196 28.5058 143.179 28.5678 143.153 28.6378 cv
143.105 28.7698 143.05 28.8658 142.988 28.9268 cv
142.926 28.9868 142.864 29.0058 142.801 28.9828 cv
140.253 28.0558 li
139.526 30.0548 li
139.656 30.0808 139.787 30.1158 139.917 30.1598 cv
140.048 30.2028 140.198 30.2558 140.368 30.3168 cv
140.76 30.4598 141.085 30.6338 141.343 30.8378 cv
141.602 31.0418 141.796 31.2688 141.928 31.5178 cv
142.059 31.7678 142.129 32.0368 142.138 32.3268 cv
142.147 32.6168 142.095 32.9158 141.982 33.2248 cv
143.966 35.8608 mo
143.871 36.1218 143.765 36.2788 143.647 36.3338 cv
143.53 36.3888 143.357 36.3748 143.129 36.2918 cv
142.909 36.2118 142.772 36.1138 142.719 35.9988 cv
142.665 35.8838 142.684 35.6998 142.776 35.4468 cv
142.871 35.1858 142.977 35.0278 143.095 34.9728 cv
143.213 34.9188 143.385 34.9328 143.613 35.0148 cv
143.833 35.0958 143.97 35.1928 144.024 35.3078 cv
144.078 35.4238 144.058 35.6078 143.966 35.8608 cv
150.552 36.3438 mo
150.414 36.7258 150.226 37.0418 149.989 37.2928 cv
149.752 37.5428 149.479 37.7268 149.17 37.8458 cv
148.861 37.9638 148.525 38.0168 148.161 38.0048 cv
147.798 37.9938 147.418 37.9148 147.021 37.7708 cv
146.801 37.6908 146.598 37.5988 146.411 37.4958 cv
146.224 37.3928 146.062 37.2898 145.924 37.1878 cv
145.787 37.0858 145.676 36.9948 145.593 36.9148 cv
145.51 36.8348 145.46 36.7768 145.441 36.7408 cv
145.423 36.7048 145.413 36.6738 145.41 36.6478 cv
145.407 36.6218 145.406 36.5918 145.408 36.5578 cv
145.411 36.5228 145.419 36.4808 145.432 36.4318 cv
145.446 36.3828 145.465 36.3258 145.489 36.2588 cv
145.512 36.1968 145.535 36.1418 145.558 36.0948 cv
145.582 36.0468 145.607 36.0098 145.633 35.9838 cv
145.659 35.9588 145.684 35.9418 145.71 35.9348 cv
145.736 35.9268 145.761 35.9278 145.787 35.9378 cv
145.824 35.9508 145.872 35.9948 145.933 36.0688 cv
145.993 36.1428 146.079 36.2298 146.189 36.3298 cv
146.3 36.4308 146.444 36.5398 146.619 36.6578 cv
146.794 36.7758 147.014 36.8828 147.278 36.9788 cv
147.524 37.0688 147.761 37.1218 147.988 37.1378 cv
148.215 37.1538 148.425 37.1258 148.619 37.0558 cv
148.813 36.9848 148.987 36.8708 149.14 36.7118 cv
149.293 36.5538 149.419 36.3388 149.518 36.0668 cv
149.601 35.8398 149.638 35.6258 149.63 35.4248 cv
149.622 35.2248 149.565 35.0398 149.458 34.8698 cv
149.352 34.6998 149.195 34.5458 148.988 34.4058 cv
148.781 34.2658 148.52 34.1388 148.204 34.0238 cv
147.98 33.9428 147.784 33.8828 147.614 33.8468 cv
147.445 33.8098 147.29 33.7658 147.151 33.7148 cv
147.048 33.6778 146.983 33.6268 146.956 33.5638 cv
146.93 33.4998 146.941 33.3998 146.991 33.2638 cv
148.047 30.3628 li
148.091 30.2408 148.152 30.1618 148.23 30.1238 cv
148.309 30.0858 148.401 30.0858 148.507 30.1248 cv
151.662 31.2728 li
151.692 31.2838 151.717 31.3028 151.739 31.3288 cv
151.76 31.3558 151.774 31.3888 151.78 31.4278 cv
151.787 31.4678 151.785 31.5148 151.776 31.5698 cv
151.766 31.6248 151.749 31.6868 151.723 31.7568 cv
151.675 31.8888 151.62 31.9848 151.558 32.0458 cv
151.496 32.1068 151.434 32.1248 151.371 32.1018 cv
148.823 31.1748 li
148.096 33.1738 li
148.226 33.2008 148.357 33.2358 148.487 33.2788 cv
148.618 33.3218 148.768 33.3748 148.938 33.4368 cv
149.33 33.5798 149.655 33.7528 149.913 33.9568 cv
150.172 34.1608 150.366 34.3878 150.498 34.6368 cv
150.629 34.8868 150.699 35.1568 150.708 35.4468 cv
150.717 35.7368 150.665 36.0358 150.552 36.3438 cv
156.076 38.6408 mo
155.958 38.9678 155.793 39.2418 155.584 39.4628 cv
155.375 39.6838 155.13 39.8488 154.849 39.9588 cv
154.568 40.0688 154.253 40.1168 153.904 40.1048 cv
153.555 40.0918 153.184 40.0138 152.792 39.8708 cv
152.553 39.7848 152.337 39.6838 152.144 39.5698 cv
151.95 39.4558 151.783 39.3428 151.64 39.2308 cv
151.498 39.1188 151.384 39.0148 151.299 38.9198 cv
151.213 38.8238 151.161 38.7578 151.143 38.7228 cv
151.125 38.6868 151.113 38.6528 151.107 38.6218 cv
151.102 38.5908 151.101 38.5558 151.103 38.5148 cv
151.105 38.4738 151.113 38.4258 151.127 38.3708 cv
151.141 38.3158 151.162 38.2488 151.19 38.1718 cv
151.238 38.0398 151.285 37.9528 151.33 37.9108 cv
151.375 37.8698 151.422 37.8578 151.471 37.8758 cv
151.505 37.8878 151.561 37.9418 151.639 38.0368 cv
151.718 38.1318 151.823 38.2418 151.954 38.3658 cv
152.086 38.4908 152.246 38.6208 152.433 38.7558 cv
152.621 38.8908 152.843 39.0048 153.099 39.0978 cv
153.347 39.1878 153.577 39.2358 153.788 39.2428 cv
153.999 39.2488 154.189 39.2178 154.359 39.1508 cv
154.528 39.0838 154.673 38.9838 154.794 38.8508 cv
154.915 38.7178 155.008 38.5598 155.075 38.3768 cv
155.149 38.1748 155.174 37.9778 155.151 37.7868 cv
155.129 37.5958 155.06 37.4128 154.946 37.2378 cv
154.831 37.0638 154.67 36.9028 154.464 36.7568 cv
154.257 36.6118 154.008 36.4858 153.716 36.3788 cv
153.016 36.1248 li
152.986 36.1138 152.959 36.0968 152.935 36.0728 cv
152.912 36.0498 152.895 36.0198 152.884 35.9828 cv
152.874 35.9458 152.871 35.9008 152.875 35.8488 cv
152.879 35.7958 152.895 35.7308 152.924 35.6538 cv
152.949 35.5848 152.975 35.5288 153.003 35.4868 cv
153.031 35.4448 153.06 35.4138 153.09 35.3938 cv
153.12 35.3738 153.151 35.3618 153.181 35.3578 cv
153.211 35.3548 153.243 35.3588 153.276 35.3708 cv
153.898 35.5978 li
154.14 35.6858 154.369 35.7338 154.585 35.7408 cv
154.8 35.7488 154.996 35.7188 155.173 35.6498 cv
155.35 35.5808 155.504 35.4778 155.635 35.3408 cv
155.766 35.2038 155.868 35.0338 155.941 34.8318 cv
155.995 34.6848 156.022 34.5358 156.023 34.3848 cv
156.024 34.2338 155.995 34.0908 155.936 33.9568 cv
155.876 33.8228 155.783 33.7008 155.655 33.5898 cv
155.527 33.4788 155.365 33.3878 155.171 33.3168 cv
154.958 33.2398 154.751 33.2008 154.549 33.1998 cv
154.348 33.1998 154.164 33.2108 153.998 33.2328 cv
153.832 33.2558 153.691 33.2828 153.576 33.3138 cv
153.461 33.3438 153.385 33.3528 153.348 33.3398 cv
153.323 33.3298 153.301 33.3168 153.284 33.3008 cv
153.268 33.2838 153.258 33.2598 153.255 33.2278 cv
153.252 33.1958 153.257 33.1538 153.269 33.1018 cv
153.282 33.0508 153.303 32.9838 153.332 32.9038 cv
153.352 32.8488 153.372 32.8008 153.391 32.7598 cv
153.41 32.7188 153.431 32.6848 153.453 32.6578 cv
153.475 32.6308 153.499 32.6068 153.523 32.5858 cv
153.547 32.5658 153.582 32.5448 153.63 32.5228 cv
153.678 32.4998 153.767 32.4758 153.897 32.4478 cv
154.028 32.4208 154.183 32.4038 154.362 32.3958 cv
154.541 32.3888 154.741 32.3998 154.961 32.4298 cv
155.18 32.4598 155.408 32.5178 155.643 32.6038 cv
155.973 32.7238 156.248 32.8718 156.467 33.0468 cv
156.685 33.2218 156.85 33.4168 156.961 33.6318 cv
157.072 33.8468 157.13 34.0768 157.134 34.3218 cv
157.139 34.5668 157.093 34.8188 156.999 35.0798 cv
156.917 35.3038 156.812 35.5008 156.683 35.6728 cv
156.554 35.8438 156.406 35.9828 156.238 36.0908 cv
156.07 36.1978 155.884 36.2738 155.681 36.3178 cv
155.478 36.3628 155.261 36.3658 155.029 36.3268 cv
155.025 36.3378 li
155.262 36.4538 155.464 36.5968 155.633 36.7678 cv
155.801 36.9398 155.932 37.1258 156.025 37.3258 cv
156.119 37.5258 156.171 37.7388 156.182 37.9658 cv
156.193 38.1918 156.158 38.4178 156.076 38.6408 cv
f
247.907 30.7408 mo
247.855 30.8838 247.802 30.9768 247.749 31.0198 cv
247.696 31.0628 247.638 31.0728 247.576 31.0508 cv
245.275 30.2128 li
245.208 30.1888 245.169 30.1428 245.157 30.0738 cv
245.145 30.0048 245.164 29.9008 245.215 29.7608 cv
245.265 29.6218 245.317 29.5298 245.37 29.4868 cv
245.423 29.4438 245.483 29.4348 245.549 29.4588 cv
247.851 30.2958 li
247.88 30.3068 247.905 30.3218 247.924 30.3418 cv
247.944 30.3618 247.957 30.3898 247.962 30.4268 cv
247.967 30.4648 247.966 30.5088 247.957 30.5598 cv
247.949 30.6108 247.932 30.6708 247.907 30.7408 cv
253.206 33.2248 mo
253.068 33.6068 252.88 33.9228 252.643 34.1728 cv
252.406 34.4238 252.133 34.6078 251.824 34.7258 cv
251.515 34.8448 251.179 34.8978 250.815 34.8858 cv
250.452 34.8738 250.072 34.7958 249.675 34.6518 cv
249.455 34.5718 249.252 34.4798 249.065 34.3768 cv
248.878 34.2728 248.716 34.1708 248.578 34.0688 cv
248.441 33.9668 248.33 33.8758 248.247 33.7958 cv
248.164 33.7148 248.114 33.6578 248.095 33.6218 cv
248.077 33.5858 248.067 33.5548 248.064 33.5288 cv
248.061 33.5028 248.06 33.4728 248.062 33.4378 cv
248.065 33.4038 248.073 33.3618 248.086 33.3128 cv
248.1 33.2638 248.119 33.2058 248.143 33.1398 cv
248.166 33.0778 248.189 33.0228 248.212 32.9748 cv
248.236 32.9278 248.261 32.8908 248.287 32.8648 cv
248.313 32.8388 248.339 32.8228 248.364 32.8148 cv
248.39 32.8078 248.415 32.8088 248.441 32.8178 cv
248.478 32.8318 248.526 32.8748 248.587 32.9488 cv
248.647 33.0228 248.733 33.1108 248.843 33.2108 cv
248.954 33.3118 249.098 33.4208 249.273 33.5388 cv
249.448 33.6568 249.668 33.7638 249.932 33.8598 cv
250.178 33.9498 250.415 34.0018 250.642 34.0188 cv
250.869 34.0348 251.079 34.0068 251.273 33.9368 cv
251.467 33.8658 251.641 33.7508 251.794 33.5928 cv
251.947 33.4348 252.073 33.2198 252.172 32.9478 cv
252.255 32.7208 252.292 32.5068 252.284 32.3058 cv
252.276 32.1058 252.219 31.9208 252.112 31.7508 cv
252.006 31.5808 251.849 31.4258 251.642 31.2868 cv
251.435 31.1468 251.174 31.0198 250.858 30.9048 cv
250.634 30.8228 250.438 30.7638 250.268 30.7268 cv
250.099 30.6908 249.944 30.6468 249.805 30.5958 cv
249.702 30.5588 249.637 30.5078 249.61 30.4438 cv
249.584 30.3808 249.595 30.2808 249.645 30.1448 cv
250.701 27.2428 li
250.745 27.1218 250.806 27.0428 250.884 27.0048 cv
250.963 26.9668 251.055 26.9668 251.161 27.0058 cv
254.316 28.1538 li
254.346 28.1648 254.371 28.1828 254.393 28.2098 cv
254.414 28.2358 254.428 28.2698 254.434 28.3088 cv
254.441 28.3488 254.439 28.3958 254.43 28.4508 cv
254.42 28.5058 254.403 28.5678 254.377 28.6378 cv
254.329 28.7698 254.274 28.8658 254.212 28.9268 cv
254.15 28.9868 254.088 29.0058 254.025 28.9828 cv
251.477 28.0558 li
250.75 30.0548 li
250.88 30.0808 251.011 30.1158 251.141 30.1598 cv
251.272 30.2028 251.422 30.2558 251.592 30.3168 cv
251.984 30.4598 252.309 30.6338 252.567 30.8378 cv
252.826 31.0418 253.02 31.2688 253.152 31.5178 cv
253.283 31.7678 253.353 32.0368 253.362 32.3268 cv
253.371 32.6168 253.319 32.9158 253.206 33.2248 cv
255.19 35.8608 mo
255.095 36.1218 254.989 36.2788 254.871 36.3338 cv
254.754 36.3888 254.581 36.3748 254.353 36.2918 cv
254.133 36.2118 253.996 36.1138 253.943 35.9988 cv
253.889 35.8838 253.908 35.6998 254 35.4468 cv
254.095 35.1858 254.201 35.0278 254.319 34.9728 cv
254.437 34.9188 254.609 34.9328 254.837 35.0148 cv
255.057 35.0958 255.194 35.1928 255.248 35.3078 cv
255.302 35.4238 255.282 35.6078 255.19 35.8608 cv
261.776 36.3438 mo
261.638 36.7258 261.45 37.0418 261.213 37.2928 cv
260.976 37.5428 260.703 37.7268 260.394 37.8458 cv
260.085 37.9638 259.749 38.0168 259.385 38.0048 cv
259.022 37.9938 258.642 37.9148 258.245 37.7708 cv
258.025 37.6908 257.822 37.5988 257.635 37.4958 cv
257.448 37.3928 257.286 37.2898 257.148 37.1878 cv
257.011 37.0858 256.9 36.9948 256.817 36.9148 cv
256.734 36.8348 256.684 36.7768 256.665 36.7408 cv
256.647 36.7048 256.637 36.6738 256.634 36.6478 cv
256.631 36.6218 256.63 36.5918 256.632 36.5578 cv
256.635 36.5228 256.643 36.4808 256.656 36.4318 cv
256.67 36.3828 256.689 36.3258 256.713 36.2588 cv
256.736 36.1968 256.759 36.1418 256.782 36.0948 cv
256.806 36.0468 256.831 36.0098 256.857 35.9838 cv
256.883 35.9588 256.908 35.9418 256.934 35.9348 cv
256.96 35.9268 256.985 35.9278 257.011 35.9378 cv
257.048 35.9508 257.096 35.9948 257.157 36.0688 cv
257.217 36.1428 257.303 36.2298 257.413 36.3298 cv
257.524 36.4308 257.668 36.5398 257.843 36.6578 cv
258.018 36.7758 258.238 36.8828 258.502 36.9788 cv
258.748 37.0688 258.985 37.1218 259.212 37.1378 cv
259.439 37.1538 259.649 37.1258 259.843 37.0558 cv
260.037 36.9848 260.211 36.8708 260.364 36.7118 cv
260.517 36.5538 260.643 36.3388 260.742 36.0668 cv
260.825 35.8398 260.863 35.6258 260.854 35.4248 cv
260.846 35.2248 260.789 35.0398 260.682 34.8698 cv
260.576 34.6998 260.419 34.5458 260.212 34.4058 cv
260.005 34.2658 259.744 34.1388 259.428 34.0238 cv
259.204 33.9428 259.008 33.8828 258.838 33.8468 cv
258.669 33.8098 258.514 33.7658 258.375 33.7148 cv
258.272 33.6778 258.207 33.6268 258.18 33.5638 cv
258.154 33.4998 258.165 33.3998 258.215 33.2638 cv
259.271 30.3628 li
259.315 30.2408 259.376 30.1618 259.454 30.1238 cv
259.533 30.0858 259.625 30.0858 259.731 30.1248 cv
262.886 31.2728 li
262.916 31.2838 262.941 31.3028 262.963 31.3288 cv
262.984 31.3558 262.998 31.3888 263.004 31.4278 cv
263.011 31.4678 263.009 31.5148 263 31.5698 cv
262.99 31.6248 262.973 31.6868 262.947 31.7568 cv
262.899 31.8888 262.844 31.9848 262.782 32.0458 cv
262.72 32.1068 262.658 32.1248 262.595 32.1018 cv
260.047 31.1748 li
259.32 33.1738 li
259.45 33.2008 259.581 33.2358 259.711 33.2788 cv
259.842 33.3218 259.992 33.3748 260.162 33.4368 cv
260.554 33.5798 260.879 33.7528 261.137 33.9568 cv
261.396 34.1608 261.59 34.3878 261.722 34.6368 cv
261.853 34.8868 261.923 35.1568 261.932 35.4468 cv
261.941 35.7368 261.889 36.0358 261.776 36.3438 cv
266.767 40.3298 mo
266.741 40.3998 266.714 40.4568 266.686 40.4998 cv
266.658 40.5438 266.629 40.5768 266.6 40.5998 cv
266.571 40.6228 266.542 40.6358 266.514 40.6398 cv
266.485 40.6448 266.458 40.6418 266.432 40.6328 cv
262.71 39.2778 li
262.685 39.2678 262.663 39.2528 262.646 39.2328 cv
262.628 39.2118 262.615 39.1828 262.605 39.1458 cv
262.596 39.1088 262.594 39.0648 262.601 39.0128 cv
262.607 38.9618 262.623 38.9008 262.648 38.8308 cv
262.672 38.7648 262.699 38.7098 262.727 38.6668 cv
262.755 38.6228 262.783 38.5878 262.811 38.5628 cv
262.839 38.5378 262.868 38.5218 262.898 38.5138 cv
262.928 38.5058 262.957 38.5068 262.987 38.5178 cv
264.473 39.0588 li
266.445 33.6408 li
264.77 33.9608 li
264.687 33.9718 264.623 33.9738 264.578 33.9648 cv
264.533 33.9568 264.502 33.9368 264.485 33.9038 cv
264.468 33.8698 264.465 33.8248 264.476 33.7658 cv
264.487 33.7078 264.508 33.6358 264.539 33.5518 cv
264.561 33.4898 264.583 33.4368 264.605 33.3948 cv
264.627 33.3528 264.648 33.3198 264.67 33.2938 cv
264.692 33.2688 264.716 33.2488 264.745 33.2338 cv
264.773 33.2198 264.808 33.2068 264.849 33.1968 cv
266.872 32.7428 li
266.891 32.7368 266.913 32.7348 266.937 32.7348 cv
266.962 32.7358 266.992 32.7388 267.028 32.7428 cv
267.064 32.7478 267.104 32.7568 267.148 32.7718 cv
267.193 32.7858 267.249 32.8048 267.315 32.8288 cv
267.403 32.8608 267.475 32.8908 267.531 32.9198 cv
267.587 32.9488 267.629 32.9758 267.657 33.0008 cv
267.686 33.0248 267.702 33.0498 267.706 33.0738 cv
267.709 33.0978 267.707 33.1208 267.699 33.1428 cv
265.42 39.4038 li
266.709 39.8728 li
266.738 39.8828 266.763 39.9018 266.782 39.9278 cv
266.802 39.9528 266.815 39.9848 266.82 40.0218 cv
266.825 40.0588 266.823 40.1038 266.815 40.1548 cv
266.807 40.2058 266.791 40.2638 266.767 40.3298 cv
f
359.131 30.7408 mo
359.079 30.8838 359.026 30.9768 358.973 31.0198 cv
358.92 31.0628 358.862 31.0728 358.8 31.0508 cv
356.498 30.2128 li
356.432 30.1888 356.393 30.1428 356.381 30.0738 cv
356.369 30.0048 356.388 29.9008 356.439 29.7608 cv
356.489 29.6218 356.541 29.5298 356.594 29.4868 cv
356.647 29.4438 356.707 29.4348 356.773 29.4588 cv
359.075 30.2958 li
359.104 30.3068 359.129 30.3218 359.148 30.3418 cv
359.168 30.3618 359.181 30.3898 359.186 30.4268 cv
359.191 30.4648 359.19 30.5088 359.181 30.5598 cv
359.173 30.6108 359.156 30.6708 359.131 30.7408 cv
364.43 33.2248 mo
364.292 33.6068 364.104 33.9228 363.867 34.1728 cv
363.63 34.4238 363.357 34.6078 363.048 34.7258 cv
362.739 34.8448 362.403 34.8978 362.039 34.8858 cv
361.676 34.8738 361.296 34.7958 360.899 34.6518 cv
360.679 34.5718 360.476 34.4798 360.289 34.3768 cv
360.102 34.2728 359.94 34.1708 359.802 34.0688 cv
359.665 33.9668 359.554 33.8758 359.471 33.7958 cv
359.388 33.7148 359.338 33.6578 359.319 33.6218 cv
359.301 33.5858 359.291 33.5548 359.288 33.5288 cv
359.285 33.5028 359.284 33.4728 359.286 33.4378 cv
359.289 33.4038 359.297 33.3618 359.31 33.3128 cv
359.324 33.2638 359.343 33.2058 359.367 33.1398 cv
359.39 33.0778 359.413 33.0228 359.436 32.9748 cv
359.46 32.9278 359.485 32.8908 359.511 32.8648 cv
359.537 32.8388 359.562 32.8228 359.588 32.8148 cv
359.614 32.8078 359.639 32.8088 359.665 32.8178 cv
359.702 32.8318 359.75 32.8748 359.811 32.9488 cv
359.871 33.0228 359.957 33.1108 360.067 33.2108 cv
360.178 33.3118 360.322 33.4208 360.497 33.5388 cv
360.672 33.6568 360.892 33.7638 361.156 33.8598 cv
361.402 33.9498 361.639 34.0018 361.866 34.0188 cv
362.093 34.0348 362.303 34.0068 362.497 33.9368 cv
362.691 33.8658 362.865 33.7508 363.018 33.5928 cv
363.171 33.4348 363.297 33.2198 363.396 32.9478 cv
363.479 32.7208 363.516 32.5068 363.508 32.3058 cv
363.5 32.1058 363.443 31.9208 363.336 31.7508 cv
363.23 31.5808 363.073 31.4258 362.866 31.2868 cv
362.659 31.1468 362.398 31.0198 362.082 30.9048 cv
361.858 30.8228 361.662 30.7638 361.492 30.7268 cv
361.323 30.6908 361.168 30.6468 361.029 30.5958 cv
360.926 30.5588 360.861 30.5078 360.834 30.4438 cv
360.808 30.3808 360.819 30.2808 360.869 30.1448 cv
361.925 27.2428 li
361.969 27.1218 362.03 27.0428 362.108 27.0048 cv
362.187 26.9668 362.279 26.9668 362.385 27.0058 cv
365.54 28.1538 li
365.57 28.1648 365.595 28.1828 365.617 28.2098 cv
365.638 28.2358 365.652 28.2698 365.658 28.3088 cv
365.665 28.3488 365.663 28.3958 365.654 28.4508 cv
365.644 28.5058 365.627 28.5678 365.601 28.6378 cv
365.553 28.7698 365.498 28.8658 365.436 28.9268 cv
365.374 28.9868 365.312 29.0058 365.249 28.9828 cv
362.701 28.0558 li
361.974 30.0548 li
362.104 30.0808 362.235 30.1158 362.365 30.1598 cv
362.496 30.2028 362.646 30.2558 362.816 30.3168 cv
363.208 30.4598 363.533 30.6338 363.791 30.8378 cv
364.05 31.0418 364.244 31.2688 364.376 31.5178 cv
364.507 31.7678 364.577 32.0368 364.586 32.3268 cv
364.595 32.6168 364.543 32.9158 364.43 33.2248 cv
366.414 35.8608 mo
366.319 36.1218 366.213 36.2788 366.095 36.3338 cv
365.978 36.3888 365.805 36.3748 365.577 36.2918 cv
365.357 36.2118 365.22 36.1138 365.167 35.9988 cv
365.113 35.8838 365.132 35.6998 365.224 35.4468 cv
365.319 35.1858 365.425 35.0278 365.543 34.9728 cv
365.661 34.9188 365.833 34.9328 366.061 35.0148 cv
366.281 35.0958 366.418 35.1928 366.472 35.3078 cv
366.526 35.4238 366.506 35.6078 366.414 35.8608 cv
373.24 36.7308 mo
373.196 36.8518 373.143 36.9398 373.081 36.9968 cv
373.019 37.0528 372.955 37.0688 372.889 37.0448 cv
372.085 36.7528 li
371.54 38.2498 li
371.529 38.2798 371.512 38.3018 371.49 38.3158 cv
371.467 38.3308 371.435 38.3388 371.391 38.3398 cv
371.348 38.3408 371.295 38.3338 371.232 38.3188 cv
371.169 38.3048 371.09 38.2798 370.996 38.2458 cv
370.905 38.2128 370.83 38.1808 370.773 38.1518 cv
370.715 38.1228 370.671 38.0938 370.64 38.0658 cv
370.609 38.0388 370.591 38.0118 370.585 37.9868 cv
370.58 37.9618 370.582 37.9348 370.593 37.9058 cv
371.138 36.4078 li
368.223 35.3468 li
368.179 35.3308 368.145 35.3118 368.12 35.2908 cv
368.095 35.2688 368.076 35.2388 368.063 35.2018 cv
368.05 35.1638 368.049 35.1148 368.06 35.0568 cv
368.07 34.9988 368.092 34.9248 368.124 34.8368 cv
368.149 34.7678 368.174 34.7058 368.198 34.6518 cv
368.221 34.5978 368.247 34.5508 368.275 34.5088 cv
368.302 34.4668 368.333 34.4278 368.366 34.3918 cv
368.4 34.3568 368.438 34.3198 368.481 34.2808 cv
372.596 30.8778 li
372.625 30.8548 372.661 30.8388 372.705 30.8298 cv
372.749 30.8208 372.801 30.8198 372.863 30.8248 cv
372.924 30.8308 372.997 30.8458 373.081 30.8708 cv
373.166 30.8948 373.264 30.9278 373.376 30.9688 cv
373.5 31.0138 373.606 31.0568 373.694 31.0998 cv
373.782 31.1418 373.852 31.1808 373.903 31.2158 cv
373.954 31.2518 373.99 31.2858 374.011 31.3208 cv
374.032 31.3558 374.037 31.3898 374.025 31.4228 cv
372.369 35.9708 li
373.173 36.2628 li
373.236 36.2858 373.274 36.3368 373.29 36.4148 cv
373.305 36.4928 373.288 36.5978 373.24 36.7308 cv
372.845 31.7168 mo
372.834 31.7128 li
369.121 34.7888 li
371.422 35.6258 li
cp
379.292 36.8758 mo
379.18 37.1838 379.048 37.4888 378.896 37.7908 cv
378.744 38.0938 378.572 38.3748 378.377 38.6348 cv
378.183 38.8938 377.965 39.1248 377.723 39.3258 cv
377.482 39.5268 377.214 39.6818 376.918 39.7898 cv
376.623 39.8988 376.301 39.9508 375.951 39.9458 cv
375.602 39.9418 375.221 39.8648 374.81 39.7148 cv
374.652 39.6578 374.503 39.5918 374.361 39.5168 cv
374.22 39.4428 374.095 39.3698 373.987 39.2968 cv
373.878 39.2238 373.789 39.1558 373.721 39.0938 cv
373.652 39.0318 373.605 38.9768 373.58 38.9308 cv
373.556 38.8838 373.545 38.8298 373.55 38.7668 cv
373.554 38.7038 373.573 38.6248 373.608 38.5288 cv
373.637 38.4488 373.664 38.3848 373.686 38.3398 cv
373.709 38.2938 373.731 38.2598 373.751 38.2378 cv
373.772 38.2168 373.794 38.2048 373.817 38.2028 cv
373.841 38.2008 373.867 38.2058 373.896 38.2168 cv
373.937 38.2308 373.989 38.2658 374.052 38.3198 cv
374.116 38.3738 374.197 38.4378 374.297 38.5118 cv
374.397 38.5858 374.517 38.6638 374.658 38.7458 cv
374.798 38.8278 374.962 38.9038 375.149 38.9718 cv
375.505 39.1008 375.836 39.1438 376.141 39.0988 cv
376.446 39.0538 376.722 38.9458 376.968 38.7728 cv
377.213 38.6008 377.432 38.3768 377.623 38.1008 cv
377.815 37.8258 377.976 37.5208 378.106 37.1858 cv
377.87 37.2288 377.601 37.2448 377.297 37.2338 cv
376.993 37.2238 376.665 37.1538 376.313 37.0258 cv
375.916 36.8818 375.603 36.7058 375.373 36.4998 cv
375.142 36.2928 374.979 36.0668 374.884 35.8198 cv
374.789 35.5728 374.752 35.3078 374.774 35.0248 cv
374.796 34.7418 374.863 34.4488 374.973 34.1438 cv
375.088 33.8278 375.243 33.5448 375.439 33.2938 cv
375.634 33.0428 375.868 32.8438 376.142 32.6988 cv
376.415 32.5528 376.726 32.4698 377.074 32.4518 cv
377.421 32.4328 377.804 32.4988 378.223 32.6518 cv
378.52 32.7598 378.77 32.8928 378.972 33.0518 cv
379.174 33.2108 379.334 33.3918 379.451 33.5938 cv
379.568 33.7968 379.649 34.0198 379.694 34.2628 cv
379.739 34.5058 379.751 34.7668 379.73 35.0458 cv
379.71 35.3248 379.661 35.6178 379.585 35.9248 cv
379.508 36.2318 379.411 36.5488 379.292 36.8758 cv
378.366 36.4198 mo
378.537 35.9498 378.65 35.5428 378.705 35.1998 cv
378.759 34.8558 378.762 34.5628 378.713 34.3198 cv
378.664 34.0778 378.567 33.8808 378.423 33.7278 cv
378.279 33.5758 378.091 33.4578 377.86 33.3738 cv
377.622 33.2868 377.402 33.2558 377.202 33.2808 cv
377.002 33.3058 376.821 33.3708 376.66 33.4758 cv
376.499 33.5818 376.359 33.7168 376.241 33.8818 cv
376.123 34.0468 376.028 34.2268 375.958 34.4208 cv
375.879 34.6378 375.83 34.8438 375.81 35.0408 cv
375.79 35.2368 375.809 35.4168 375.867 35.5788 cv
375.924 35.7408 376.023 35.8858 376.163 36.0138 cv
376.304 36.1418 376.495 36.2498 376.737 36.3388 cv
377.013 36.4388 377.294 36.4938 377.581 36.5048 cv
377.868 36.5158 378.13 36.4878 378.366 36.4198 cv
f
470.356 30.7408 mo
470.304 30.8838 470.251 30.9768 470.198 31.0198 cv
470.145 31.0628 470.087 31.0728 470.025 31.0508 cv
467.723 30.2128 li
467.657 30.1888 467.618 30.1428 467.606 30.0738 cv
467.594 30.0048 467.613 29.9008 467.664 29.7608 cv
467.714 29.6218 467.766 29.5298 467.819 29.4868 cv
467.872 29.4438 467.932 29.4348 467.998 29.4588 cv
470.3 30.2958 li
470.329 30.3068 470.354 30.3218 470.373 30.3418 cv
470.393 30.3618 470.406 30.3898 470.411 30.4268 cv
470.416 30.4648 470.415 30.5088 470.406 30.5598 cv
470.398 30.6108 470.381 30.6708 470.356 30.7408 cv
475.655 33.2248 mo
475.517 33.6068 475.329 33.9228 475.092 34.1728 cv
474.855 34.4238 474.582 34.6078 474.273 34.7258 cv
473.964 34.8448 473.628 34.8978 473.264 34.8858 cv
472.901 34.8738 472.521 34.7958 472.124 34.6518 cv
471.904 34.5718 471.701 34.4798 471.514 34.3768 cv
471.327 34.2728 471.165 34.1708 471.027 34.0688 cv
470.89 33.9668 470.779 33.8758 470.696 33.7958 cv
470.613 33.7148 470.563 33.6578 470.544 33.6218 cv
470.526 33.5858 470.516 33.5548 470.513 33.5288 cv
470.51 33.5028 470.509 33.4728 470.511 33.4378 cv
470.514 33.4038 470.522 33.3618 470.535 33.3128 cv
470.549 33.2638 470.568 33.2058 470.592 33.1398 cv
470.615 33.0778 470.638 33.0228 470.661 32.9748 cv
470.685 32.9278 470.71 32.8908 470.736 32.8648 cv
470.762 32.8388 470.787 32.8228 470.813 32.8148 cv
470.839 32.8078 470.864 32.8088 470.89 32.8178 cv
470.927 32.8318 470.975 32.8748 471.036 32.9488 cv
471.096 33.0228 471.182 33.1108 471.292 33.2108 cv
471.403 33.3118 471.547 33.4208 471.722 33.5388 cv
471.897 33.6568 472.117 33.7638 472.381 33.8598 cv
472.627 33.9498 472.864 34.0018 473.091 34.0188 cv
473.318 34.0348 473.528 34.0068 473.722 33.9368 cv
473.916 33.8658 474.09 33.7508 474.243 33.5928 cv
474.396 33.4348 474.522 33.2198 474.621 32.9478 cv
474.704 32.7208 474.741 32.5068 474.733 32.3058 cv
474.725 32.1058 474.668 31.9208 474.561 31.7508 cv
474.455 31.5808 474.298 31.4258 474.091 31.2868 cv
473.884 31.1468 473.623 31.0198 473.307 30.9048 cv
473.083 30.8228 472.887 30.7638 472.717 30.7268 cv
472.548 30.6908 472.393 30.6468 472.254 30.5958 cv
472.151 30.5588 472.086 30.5078 472.059 30.4438 cv
472.033 30.3808 472.044 30.2808 472.094 30.1448 cv
473.15 27.2428 li
473.194 27.1218 473.255 27.0428 473.333 27.0048 cv
473.412 26.9668 473.504 26.9668 473.61 27.0058 cv
476.765 28.1538 li
476.795 28.1648 476.82 28.1828 476.842 28.2098 cv
476.863 28.2358 476.877 28.2698 476.883 28.3088 cv
476.89 28.3488 476.888 28.3958 476.879 28.4508 cv
476.869 28.5058 476.852 28.5678 476.826 28.6378 cv
476.778 28.7698 476.723 28.8658 476.661 28.9268 cv
476.599 28.9868 476.537 29.0058 476.474 28.9828 cv
473.926 28.0558 li
473.199 30.0548 li
473.329 30.0808 473.46 30.1158 473.59 30.1598 cv
473.721 30.2028 473.871 30.2558 474.041 30.3168 cv
474.433 30.4598 474.758 30.6338 475.016 30.8378 cv
475.275 31.0418 475.469 31.2688 475.601 31.5178 cv
475.732 31.7678 475.802 32.0368 475.811 32.3268 cv
475.82 32.6168 475.768 32.9158 475.655 33.2248 cv
477.639 35.8608 mo
477.544 36.1218 477.438 36.2788 477.32 36.3338 cv
477.203 36.3888 477.03 36.3748 476.802 36.2918 cv
476.582 36.2118 476.445 36.1138 476.392 35.9988 cv
476.338 35.8838 476.357 35.6998 476.449 35.4468 cv
476.544 35.1858 476.65 35.0278 476.768 34.9728 cv
476.886 34.9188 477.058 34.9328 477.286 35.0148 cv
477.506 35.0958 477.643 35.1928 477.697 35.3078 cv
477.751 35.4238 477.731 35.6078 477.639 35.8608 cv
484.465 36.7308 mo
484.421 36.8518 484.368 36.9398 484.306 36.9968 cv
484.244 37.0528 484.18 37.0688 484.114 37.0448 cv
483.31 36.7528 li
482.765 38.2498 li
482.754 38.2798 482.737 38.3018 482.715 38.3158 cv
482.692 38.3308 482.66 38.3388 482.616 38.3398 cv
482.573 38.3408 482.52 38.3338 482.457 38.3188 cv
482.394 38.3048 482.315 38.2798 482.221 38.2458 cv
482.13 38.2128 482.055 38.1808 481.998 38.1518 cv
481.94 38.1228 481.896 38.0938 481.865 38.0658 cv
481.834 38.0388 481.816 38.0118 481.81 37.9868 cv
481.805 37.9618 481.807 37.9348 481.818 37.9058 cv
482.363 36.4078 li
479.448 35.3468 li
479.404 35.3308 479.37 35.3118 479.345 35.2908 cv
479.32 35.2688 479.301 35.2388 479.288 35.2018 cv
479.275 35.1638 479.274 35.1148 479.285 35.0568 cv
479.295 34.9988 479.317 34.9248 479.349 34.8368 cv
479.374 34.7678 479.399 34.7058 479.423 34.6518 cv
479.446 34.5978 479.472 34.5508 479.5 34.5088 cv
479.527 34.4668 479.558 34.4278 479.591 34.3918 cv
479.625 34.3568 479.663 34.3198 479.706 34.2808 cv
483.821 30.8778 li
483.85 30.8548 483.886 30.8388 483.93 30.8298 cv
483.974 30.8208 484.026 30.8198 484.088 30.8248 cv
484.149 30.8308 484.222 30.8458 484.306 30.8708 cv
484.391 30.8948 484.489 30.9278 484.601 30.9688 cv
484.725 31.0138 484.831 31.0568 484.919 31.0998 cv
485.007 31.1418 485.077 31.1808 485.128 31.2158 cv
485.179 31.2518 485.215 31.2858 485.236 31.3208 cv
485.257 31.3558 485.262 31.3898 485.25 31.4228 cv
483.594 35.9708 li
484.398 36.2628 li
484.461 36.2858 484.499 36.3368 484.515 36.4148 cv
484.53 36.4928 484.513 36.5978 484.465 36.7308 cv
484.07 31.7168 mo
484.059 31.7128 li
480.346 34.7888 li
482.647 35.6258 li
cp
491.613 34.0188 mo
491.588 34.0848 491.564 34.1438 491.539 34.1948 cv
491.514 34.2468 491.488 34.2948 491.461 34.3418 cv
491.434 34.3878 491.404 34.4308 491.37 34.4708 cv
491.337 34.5108 491.3 34.5518 491.259 34.5948 cv
486.541 39.5748 li
486.507 39.6118 486.471 39.6398 486.433 39.6568 cv
486.396 39.6748 486.353 39.6838 486.305 39.6848 cv
486.257 39.6868 486.198 39.6778 486.13 39.6588 cv
486.062 39.6408 485.98 39.6138 485.885 39.5788 cv
485.76 39.5338 485.665 39.4928 485.599 39.4568 cv
485.533 39.4198 485.489 39.3838 485.467 39.3488 cv
485.444 39.3138 485.441 39.2798 485.458 39.2458 cv
485.474 39.2128 485.502 39.1758 485.541 39.1358 cv
490.44 34.0728 li
487.02 32.8278 li
486.951 32.8028 486.912 32.7468 486.904 32.6608 cv
486.895 32.5748 486.915 32.4658 486.963 32.3338 cv
486.989 32.2638 487.015 32.2048 487.043 32.1568 cv
487.071 32.1088 487.101 32.0708 487.132 32.0418 cv
487.163 32.0138 487.194 31.9968 487.226 31.9888 cv
487.258 31.9818 487.29 31.9848 487.323 31.9968 cv
491.474 33.5078 li
491.526 33.5258 491.569 33.5478 491.603 33.5728 cv
491.638 33.5978 491.659 33.6308 491.667 33.6718 cv
491.676 33.7118 491.676 33.7598 491.668 33.8148 cv
491.66 33.8708 491.642 33.9388 491.613 34.0188 cv
f
581.58 30.7408 mo
581.528 30.8838 581.475 30.9768 581.422 31.0198 cv
581.369 31.0628 581.311 31.0728 581.249 31.0508 cv
578.947 30.2128 li
578.881 30.1888 578.842 30.1428 578.83 30.0738 cv
578.818 30.0048 578.837 29.9008 578.888 29.7608 cv
578.938 29.6218 578.99 29.5298 579.043 29.4868 cv
579.096 29.4438 579.156 29.4348 579.222 29.4588 cv
581.524 30.2958 li
581.553 30.3068 581.577 30.3218 581.597 30.3418 cv
581.617 30.3618 581.63 30.3898 581.635 30.4268 cv
581.64 30.4648 581.639 30.5088 581.63 30.5598 cv
581.622 30.6108 581.605 30.6708 581.58 30.7408 cv
586.879 33.2248 mo
586.741 33.6068 586.553 33.9228 586.316 34.1728 cv
586.079 34.4238 585.806 34.6078 585.497 34.7258 cv
585.188 34.8448 584.852 34.8978 584.488 34.8858 cv
584.125 34.8738 583.745 34.7958 583.348 34.6518 cv
583.128 34.5718 582.924 34.4798 582.738 34.3768 cv
582.551 34.2728 582.389 34.1708 582.251 34.0688 cv
582.114 33.9668 582.003 33.8758 581.92 33.7958 cv
581.837 33.7148 581.787 33.6578 581.768 33.6218 cv
581.75 33.5858 581.74 33.5548 581.737 33.5288 cv
581.734 33.5028 581.733 33.4728 581.735 33.4378 cv
581.738 33.4038 581.746 33.3618 581.759 33.3128 cv
581.773 33.2638 581.792 33.2058 581.816 33.1398 cv
581.839 33.0778 581.862 33.0228 581.885 32.9748 cv
581.909 32.9278 581.934 32.8908 581.96 32.8648 cv
581.986 32.8388 582.011 32.8228 582.037 32.8148 cv
582.063 32.8078 582.088 32.8088 582.114 32.8178 cv
582.151 32.8318 582.199 32.8748 582.26 32.9488 cv
582.32 33.0228 582.406 33.1108 582.516 33.2108 cv
582.627 33.3118 582.771 33.4208 582.946 33.5388 cv
583.121 33.6568 583.341 33.7638 583.605 33.8598 cv
583.851 33.9498 584.088 34.0018 584.315 34.0188 cv
584.542 34.0348 584.752 34.0068 584.946 33.9368 cv
585.14 33.8658 585.314 33.7508 585.467 33.5928 cv
585.62 33.4348 585.746 33.2198 585.845 32.9478 cv
585.928 32.7208 585.965 32.5068 585.957 32.3058 cv
585.949 32.1058 585.892 31.9208 585.785 31.7508 cv
585.679 31.5808 585.522 31.4258 585.315 31.2868 cv
585.108 31.1468 584.847 31.0198 584.531 30.9048 cv
584.307 30.8228 584.111 30.7638 583.941 30.7268 cv
583.772 30.6908 583.617 30.6468 583.478 30.5958 cv
583.375 30.5588 583.31 30.5078 583.283 30.4438 cv
583.257 30.3808 583.268 30.2808 583.318 30.1448 cv
584.374 27.2428 li
584.418 27.1218 584.479 27.0428 584.557 27.0048 cv
584.635 26.9668 584.728 26.9668 584.834 27.0058 cv
587.989 28.1538 li
588.019 28.1648 588.044 28.1828 588.066 28.2098 cv
588.087 28.2358 588.101 28.2698 588.107 28.3088 cv
588.114 28.3488 588.112 28.3958 588.103 28.4508 cv
588.093 28.5058 588.076 28.5678 588.05 28.6378 cv
588.002 28.7698 587.947 28.8658 587.885 28.9268 cv
587.823 28.9868 587.761 29.0058 587.697 28.9828 cv
585.15 28.0558 li
584.423 30.0548 li
584.553 30.0808 584.684 30.1158 584.814 30.1598 cv
584.945 30.2028 585.095 30.2558 585.265 30.3168 cv
585.657 30.4598 585.982 30.6338 586.24 30.8378 cv
586.499 31.0418 586.693 31.2688 586.825 31.5178 cv
586.956 31.7678 587.026 32.0368 587.035 32.3268 cv
587.044 32.6168 586.992 32.9158 586.879 33.2248 cv
588.863 35.8608 mo
588.768 36.1218 588.662 36.2788 588.544 36.3338 cv
588.427 36.3888 588.254 36.3748 588.026 36.2918 cv
587.806 36.2118 587.669 36.1138 587.616 35.9988 cv
587.562 35.8838 587.581 35.6998 587.673 35.4468 cv
587.768 35.1858 587.874 35.0278 587.992 34.9728 cv
588.11 34.9188 588.282 34.9328 588.51 35.0148 cv
588.73 35.0958 588.867 35.1928 588.921 35.3078 cv
588.974 35.4238 588.955 35.6078 588.863 35.8608 cv
595.689 36.7308 mo
595.645 36.8518 595.592 36.9398 595.53 36.9968 cv
595.468 37.0528 595.404 37.0688 595.338 37.0448 cv
594.534 36.7528 li
593.989 38.2498 li
593.978 38.2798 593.961 38.3018 593.939 38.3158 cv
593.916 38.3308 593.884 38.3388 593.84 38.3398 cv
593.797 38.3408 593.744 38.3338 593.681 38.3188 cv
593.618 38.3048 593.539 38.2798 593.444 38.2458 cv
593.354 38.2128 593.279 38.1808 593.222 38.1518 cv
593.164 38.1228 593.12 38.0938 593.089 38.0658 cv
593.058 38.0388 593.04 38.0118 593.034 37.9868 cv
593.028 37.9618 593.031 37.9348 593.042 37.9058 cv
593.587 36.4078 li
590.672 35.3468 li
590.628 35.3308 590.594 35.3118 590.569 35.2908 cv
590.544 35.2688 590.525 35.2388 590.512 35.2018 cv
590.499 35.1638 590.498 35.1148 590.509 35.0568 cv
590.519 34.9988 590.541 34.9248 590.573 34.8368 cv
590.598 34.7678 590.623 34.7058 590.647 34.6518 cv
590.67 34.5978 590.696 34.5508 590.724 34.5088 cv
590.751 34.4668 590.782 34.4278 590.815 34.3918 cv
590.849 34.3568 590.887 34.3198 590.93 34.2808 cv
595.045 30.8778 li
595.074 30.8548 595.11 30.8388 595.154 30.8298 cv
595.198 30.8208 595.25 30.8198 595.312 30.8248 cv
595.373 30.8308 595.446 30.8458 595.53 30.8708 cv
595.615 30.8948 595.713 30.9278 595.825 30.9688 cv
595.949 31.0138 596.055 31.0568 596.143 31.0998 cv
596.231 31.1418 596.301 31.1808 596.352 31.2158 cv
596.403 31.2518 596.439 31.2858 596.46 31.3208 cv
596.481 31.3558 596.486 31.3898 596.474 31.4228 cv
594.818 35.9708 li
595.622 36.2628 li
595.685 36.2858 595.723 36.3368 595.739 36.4148 cv
595.754 36.4928 595.737 36.5978 595.689 36.7308 cv
595.294 31.7168 mo
595.283 31.7128 li
591.57 34.7888 li
593.871 35.6258 li
cp
601.088 38.3958 mo
600.949 38.7778 600.761 39.0938 600.524 39.3448 cv
600.287 39.5948 600.015 39.7798 599.705 39.8978 cv
599.396 40.0158 599.06 40.0688 598.696 40.0568 cv
598.333 40.0458 597.953 39.9678 597.556 39.8228 cv
597.336 39.7428 597.133 39.6508 596.946 39.5478 cv
596.759 39.4448 596.597 39.3418 596.459 39.2398 cv
596.322 39.1378 596.212 39.0468 596.128 38.9668 cv
596.045 38.8868 595.995 38.8288 595.977 38.7928 cv
595.958 38.7568 595.948 38.7268 595.945 38.6998 cv
595.942 38.6738 595.941 38.6438 595.944 38.6098 cv
595.946 38.5748 595.954 38.5328 595.967 38.4838 cv
595.981 38.4348 596 38.3778 596.024 38.3118 cv
596.047 38.2488 596.07 38.1938 596.093 38.1468 cv
596.117 38.0988 596.142 38.0618 596.168 38.0368 cv
596.194 38.0108 596.22 37.9938 596.245 37.9868 cv
596.271 37.9788 596.296 37.9798 596.322 37.9898 cv
596.359 38.0028 596.407 38.0468 596.468 38.1208 cv
596.528 38.1948 596.614 38.2818 596.725 38.3828 cv
596.836 38.4828 596.979 38.5928 597.154 38.7098 cv
597.329 38.8278 597.549 38.9348 597.813 39.0308 cv
598.059 39.1208 598.296 39.1738 598.523 39.1898 cv
598.75 39.2058 598.96 39.1788 599.154 39.1078 cv
599.348 39.0368 599.522 38.9228 599.675 38.7638 cv
599.829 38.6058 599.955 38.3908 600.053 38.1188 cv
600.136 37.8918 600.174 37.6778 600.166 37.4778 cv
600.157 37.2768 600.1 37.0918 599.993 36.9218 cv
599.887 36.7528 599.73 36.5978 599.523 36.4578 cv
599.316 36.3178 599.055 36.1908 598.739 36.0758 cv
598.516 35.9948 598.319 35.9358 598.149 35.8988 cv
597.98 35.8618 597.825 35.8178 597.686 35.7668 cv
597.583 35.7298 597.518 35.6788 597.492 35.6158 cv
597.465 35.5518 597.476 35.4518 597.526 35.3158 cv
598.582 32.4148 li
598.626 32.2938 598.687 32.2138 598.765 32.1758 cv
598.844 32.1378 598.936 32.1378 599.042 32.1768 cv
602.197 33.3248 li
602.227 33.3358 602.252 33.3548 602.274 33.3808 cv
602.295 33.4078 602.309 33.4408 602.316 33.4808 cv
602.322 33.5198 602.32 33.5678 602.311 33.6218 cv
602.301 33.6768 602.284 33.7388 602.258 33.8088 cv
602.21 33.9408 602.155 34.0378 602.093 34.0978 cv
602.031 34.1588 601.969 34.1778 601.906 34.1548 cv
599.359 33.2268 li
598.631 35.2258 li
598.762 35.2528 598.892 35.2878 599.022 35.3308 cv
599.153 35.3738 599.303 35.4268 599.473 35.4888 cv
599.865 35.6318 600.19 35.8048 600.449 36.0088 cv
600.707 36.2128 600.901 36.4398 601.033 36.6898 cv
601.164 36.9388 601.234 37.2088 601.243 37.4988 cv
601.252 37.7888 601.2 38.0878 601.088 38.3958 cv
f
692.804 30.7408 mo
692.752 30.8838 692.699 30.9768 692.646 31.0198 cv
692.593 31.0628 692.535 31.0728 692.473 31.0508 cv
690.171 30.2128 li
690.105 30.1888 690.066 30.1428 690.054 30.0738 cv
690.042 30.0048 690.061 29.9008 690.112 29.7608 cv
690.162 29.6218 690.214 29.5298 690.267 29.4868 cv
690.32 29.4438 690.38 29.4348 690.446 29.4588 cv
692.748 30.2958 li
692.777 30.3068 692.801 30.3218 692.821 30.3418 cv
692.841 30.3618 692.854 30.3898 692.859 30.4268 cv
692.864 30.4648 692.863 30.5088 692.854 30.5598 cv
692.846 30.6108 692.829 30.6708 692.804 30.7408 cv
698.103 33.2248 mo
697.965 33.6068 697.777 33.9228 697.54 34.1728 cv
697.303 34.4238 697.03 34.6078 696.721 34.7258 cv
696.412 34.8448 696.076 34.8978 695.712 34.8858 cv
695.349 34.8738 694.969 34.7958 694.572 34.6518 cv
694.352 34.5718 694.148 34.4798 693.962 34.3768 cv
693.775 34.2728 693.613 34.1708 693.475 34.0688 cv
693.338 33.9668 693.227 33.8758 693.144 33.7958 cv
693.061 33.7148 693.011 33.6578 692.992 33.6218 cv
692.974 33.5858 692.964 33.5548 692.961 33.5288 cv
692.958 33.5028 692.957 33.4728 692.959 33.4378 cv
692.962 33.4038 692.97 33.3618 692.983 33.3128 cv
692.997 33.2638 693.016 33.2058 693.04 33.1398 cv
693.063 33.0778 693.086 33.0228 693.109 32.9748 cv
693.133 32.9278 693.158 32.8908 693.184 32.8648 cv
693.21 32.8388 693.235 32.8228 693.261 32.8148 cv
693.287 32.8078 693.312 32.8088 693.338 32.8178 cv
693.375 32.8318 693.423 32.8748 693.484 32.9488 cv
693.544 33.0228 693.63 33.1108 693.74 33.2108 cv
693.851 33.3118 693.995 33.4208 694.17 33.5388 cv
694.345 33.6568 694.565 33.7638 694.829 33.8598 cv
695.075 33.9498 695.312 34.0018 695.539 34.0188 cv
695.766 34.0348 695.976 34.0068 696.17 33.9368 cv
696.364 33.8658 696.538 33.7508 696.691 33.5928 cv
696.844 33.4348 696.97 33.2198 697.069 32.9478 cv
697.152 32.7208 697.189 32.5068 697.181 32.3058 cv
697.173 32.1058 697.116 31.9208 697.009 31.7508 cv
696.903 31.5808 696.746 31.4258 696.539 31.2868 cv
696.332 31.1468 696.071 31.0198 695.755 30.9048 cv
695.531 30.8228 695.335 30.7638 695.165 30.7268 cv
694.996 30.6908 694.841 30.6468 694.702 30.5958 cv
694.599 30.5588 694.534 30.5078 694.507 30.4438 cv
694.481 30.3808 694.492 30.2808 694.542 30.1448 cv
695.598 27.2428 li
695.642 27.1218 695.703 27.0428 695.781 27.0048 cv
695.859 26.9668 695.952 26.9668 696.058 27.0058 cv
699.213 28.1538 li
699.243 28.1648 699.268 28.1828 699.29 28.2098 cv
699.311 28.2358 699.325 28.2698 699.331 28.3088 cv
699.338 28.3488 699.336 28.3958 699.327 28.4508 cv
699.317 28.5058 699.3 28.5678 699.274 28.6378 cv
699.226 28.7698 699.171 28.8658 699.109 28.9268 cv
699.047 28.9868 698.985 29.0058 698.921 28.9828 cv
696.374 28.0558 li
695.647 30.0548 li
695.777 30.0808 695.908 30.1158 696.038 30.1598 cv
696.169 30.2028 696.319 30.2558 696.489 30.3168 cv
696.881 30.4598 697.206 30.6338 697.464 30.8378 cv
697.723 31.0418 697.917 31.2688 698.049 31.5178 cv
698.18 31.7678 698.25 32.0368 698.259 32.3268 cv
698.268 32.6168 698.216 32.9158 698.103 33.2248 cv
700.087 35.8608 mo
699.992 36.1218 699.886 36.2788 699.768 36.3338 cv
699.651 36.3888 699.478 36.3748 699.25 36.2918 cv
699.03 36.2118 698.893 36.1138 698.84 35.9988 cv
698.786 35.8838 698.805 35.6998 698.897 35.4468 cv
698.992 35.1858 699.098 35.0278 699.216 34.9728 cv
699.334 34.9188 699.506 34.9328 699.734 35.0148 cv
699.954 35.0958 700.091 35.1928 700.145 35.3078 cv
700.198 35.4238 700.179 35.6078 700.087 35.8608 cv
706.913 36.7308 mo
706.869 36.8518 706.816 36.9398 706.754 36.9968 cv
706.692 37.0528 706.628 37.0688 706.562 37.0448 cv
705.758 36.7528 li
705.213 38.2498 li
705.202 38.2798 705.185 38.3018 705.163 38.3158 cv
705.14 38.3308 705.108 38.3388 705.064 38.3398 cv
705.021 38.3408 704.968 38.3338 704.905 38.3188 cv
704.842 38.3048 704.763 38.2798 704.668 38.2458 cv
704.578 38.2128 704.503 38.1808 704.446 38.1518 cv
704.388 38.1228 704.344 38.0938 704.313 38.0658 cv
704.282 38.0388 704.264 38.0118 704.258 37.9868 cv
704.252 37.9618 704.255 37.9348 704.266 37.9058 cv
704.811 36.4078 li
701.896 35.3468 li
701.852 35.3308 701.818 35.3118 701.793 35.2908 cv
701.768 35.2688 701.749 35.2388 701.736 35.2018 cv
701.723 35.1638 701.722 35.1148 701.733 35.0568 cv
701.743 34.9988 701.765 34.9248 701.797 34.8368 cv
701.822 34.7678 701.847 34.7058 701.871 34.6518 cv
701.894 34.5978 701.92 34.5508 701.948 34.5088 cv
701.975 34.4668 702.006 34.4278 702.039 34.3918 cv
702.073 34.3568 702.111 34.3198 702.154 34.2808 cv
706.269 30.8778 li
706.298 30.8548 706.334 30.8388 706.378 30.8298 cv
706.422 30.8208 706.474 30.8198 706.536 30.8248 cv
706.597 30.8308 706.67 30.8458 706.754 30.8708 cv
706.839 30.8948 706.937 30.9278 707.049 30.9688 cv
707.173 31.0138 707.279 31.0568 707.367 31.0998 cv
707.455 31.1418 707.525 31.1808 707.576 31.2158 cv
707.627 31.2518 707.663 31.2858 707.684 31.3208 cv
707.705 31.3558 707.71 31.3898 707.698 31.4228 cv
706.042 35.9708 li
706.846 36.2628 li
706.909 36.2858 706.947 36.3368 706.963 36.4148 cv
706.978 36.4928 706.961 36.5978 706.913 36.7308 cv
706.518 31.7168 mo
706.507 31.7128 li
702.794 34.7888 li
705.095 35.6258 li
cp
712.197 38.6408 mo
712.078 38.9678 711.914 39.2418 711.705 39.4628 cv
711.496 39.6838 711.251 39.8488 710.97 39.9588 cv
710.688 40.0688 710.374 40.1168 710.025 40.1048 cv
709.676 40.0918 709.305 40.0138 708.913 39.8708 cv
708.674 39.7848 708.458 39.6838 708.265 39.5698 cv
708.071 39.4558 707.904 39.3428 707.761 39.2308 cv
707.619 39.1188 707.505 39.0148 707.42 38.9198 cv
707.334 38.8238 707.282 38.7578 707.264 38.7228 cv
707.246 38.6868 707.234 38.6528 707.228 38.6218 cv
707.223 38.5908 707.222 38.5558 707.224 38.5148 cv
707.226 38.4738 707.234 38.4258 707.248 38.3708 cv
707.262 38.3158 707.283 38.2488 707.311 38.1718 cv
707.359 38.0398 707.406 37.9528 707.451 37.9108 cv
707.496 37.8698 707.543 37.8578 707.592 37.8758 cv
707.626 37.8878 707.682 37.9418 707.76 38.0368 cv
707.839 38.1318 707.944 38.2418 708.075 38.3658 cv
708.207 38.4908 708.367 38.6208 708.554 38.7558 cv
708.742 38.8908 708.964 39.0048 709.22 39.0978 cv
709.468 39.1878 709.698 39.2358 709.909 39.2428 cv
710.12 39.2488 710.31 39.2178 710.479 39.1508 cv
710.649 39.0838 710.794 38.9838 710.915 38.8508 cv
711.036 38.7178 711.129 38.5598 711.196 38.3768 cv
711.27 38.1748 711.295 37.9778 711.272 37.7868 cv
711.25 37.5958 711.181 37.4128 711.066 37.2378 cv
710.952 37.0638 710.791 36.9028 710.585 36.7568 cv
710.378 36.6118 710.129 36.4858 709.837 36.3788 cv
709.137 36.1248 li
709.107 36.1138 709.08 36.0968 709.056 36.0728 cv
709.032 36.0498 709.016 36.0198 709.005 35.9828 cv
708.995 35.9458 708.992 35.9008 708.996 35.8488 cv
709 35.7958 709.016 35.7308 709.044 35.6538 cv
709.07 35.5848 709.096 35.5288 709.124 35.4868 cv
709.152 35.4448 709.181 35.4138 709.211 35.3938 cv
709.241 35.3738 709.272 35.3618 709.302 35.3578 cv
709.332 35.3548 709.364 35.3588 709.397 35.3708 cv
710.019 35.5978 li
710.261 35.6858 710.49 35.7338 710.706 35.7408 cv
710.921 35.7488 711.117 35.7188 711.294 35.6498 cv
711.471 35.5808 711.625 35.4778 711.756 35.3408 cv
711.887 35.2038 711.989 35.0338 712.062 34.8318 cv
712.116 34.6848 712.143 34.5358 712.144 34.3848 cv
712.145 34.2338 712.116 34.0908 712.057 33.9568 cv
711.997 33.8228 711.904 33.7008 711.776 33.5898 cv
711.648 33.4788 711.486 33.3878 711.292 33.3168 cv
711.079 33.2398 710.872 33.2008 710.67 33.1998 cv
710.469 33.1998 710.285 33.2108 710.119 33.2328 cv
709.953 33.2558 709.812 33.2828 709.697 33.3138 cv
709.582 33.3438 709.506 33.3528 709.469 33.3398 cv
709.443 33.3298 709.422 33.3168 709.405 33.3008 cv
709.389 33.2838 709.379 33.2598 709.376 33.2278 cv
709.373 33.1958 709.378 33.1538 709.39 33.1018 cv
709.403 33.0508 709.424 32.9838 709.453 32.9038 cv
709.473 32.8488 709.493 32.8008 709.512 32.7598 cv
709.531 32.7188 709.552 32.6848 709.574 32.6578 cv
709.596 32.6308 709.62 32.6068 709.644 32.5858 cv
709.668 32.5658 709.703 32.5448 709.751 32.5228 cv
709.799 32.4998 709.888 32.4758 710.018 32.4478 cv
710.149 32.4208 710.304 32.4038 710.483 32.3958 cv
710.662 32.3888 710.862 32.3998 711.082 32.4298 cv
711.301 32.4598 711.529 32.5178 711.764 32.6038 cv
712.094 32.7238 712.369 32.8718 712.588 33.0468 cv
712.806 33.2218 712.971 33.4168 713.082 33.6318 cv
713.193 33.8468 713.251 34.0768 713.255 34.3218 cv
713.26 34.5668 713.214 34.8188 713.12 35.0798 cv
713.038 35.3038 712.933 35.5008 712.804 35.6728 cv
712.675 35.8438 712.527 35.9828 712.359 36.0908 cv
712.191 36.1978 712.005 36.2738 711.802 36.3178 cv
711.599 36.3628 711.382 36.3658 711.15 36.3268 cv
711.146 36.3378 li
711.383 36.4538 711.585 36.5968 711.754 36.7678 cv
711.922 36.9398 712.053 37.1258 712.146 37.3258 cv
712.24 37.5258 712.292 37.7388 712.303 37.9658 cv
712.314 38.1918 712.279 38.4178 712.197 38.6408 cv
f
804.029 30.7408 mo
803.977 30.8838 803.924 30.9768 803.871 31.0198 cv
803.818 31.0628 803.76 31.0728 803.698 31.0508 cv
801.396 30.2128 li
801.33 30.1888 801.291 30.1428 801.279 30.0738 cv
801.267 30.0048 801.286 29.9008 801.337 29.7608 cv
801.387 29.6218 801.439 29.5298 801.492 29.4868 cv
801.545 29.4438 801.605 29.4348 801.671 29.4588 cv
803.973 30.2958 li
804.002 30.3068 804.026 30.3218 804.046 30.3418 cv
804.066 30.3618 804.079 30.3898 804.084 30.4268 cv
804.089 30.4648 804.088 30.5088 804.079 30.5598 cv
804.071 30.6108 804.054 30.6708 804.029 30.7408 cv
809.328 33.2248 mo
809.189 33.6068 809.002 33.9228 808.765 34.1728 cv
808.528 34.4238 808.255 34.6078 807.946 34.7258 cv
807.637 34.8448 807.301 34.8978 806.937 34.8858 cv
806.574 34.8738 806.194 34.7958 805.797 34.6518 cv
805.577 34.5718 805.373 34.4798 805.187 34.3768 cv
805 34.2728 804.838 34.1708 804.7 34.0688 cv
804.563 33.9668 804.452 33.8758 804.369 33.7958 cv
804.286 33.7148 804.236 33.6578 804.217 33.6218 cv
804.199 33.5858 804.189 33.5548 804.186 33.5288 cv
804.183 33.5028 804.182 33.4728 804.184 33.4378 cv
804.187 33.4038 804.195 33.3618 804.208 33.3128 cv
804.222 33.2638 804.241 33.2058 804.265 33.1398 cv
804.288 33.0778 804.311 33.0228 804.334 32.9748 cv
804.358 32.9278 804.383 32.8908 804.409 32.8648 cv
804.435 32.8388 804.46 32.8228 804.486 32.8148 cv
804.512 32.8078 804.537 32.8088 804.563 32.8178 cv
804.6 32.8318 804.648 32.8748 804.709 32.9488 cv
804.769 33.0228 804.855 33.1108 804.965 33.2108 cv
805.076 33.3118 805.22 33.4208 805.395 33.5388 cv
805.57 33.6568 805.79 33.7638 806.054 33.8598 cv
806.3 33.9498 806.537 34.0018 806.764 34.0188 cv
806.991 34.0348 807.201 34.0068 807.395 33.9368 cv
807.589 33.8658 807.763 33.7508 807.916 33.5928 cv
808.069 33.4348 808.195 33.2198 808.294 32.9478 cv
808.377 32.7208 808.414 32.5068 808.406 32.3058 cv
808.398 32.1058 808.341 31.9208 808.234 31.7508 cv
808.128 31.5808 807.971 31.4258 807.764 31.2868 cv
807.557 31.1468 807.296 31.0198 806.98 30.9048 cv
806.756 30.8228 806.56 30.7638 806.39 30.7268 cv
806.221 30.6908 806.066 30.6468 805.927 30.5958 cv
805.824 30.5588 805.759 30.5078 805.732 30.4438 cv
805.706 30.3808 805.717 30.2808 805.767 30.1448 cv
806.823 27.2428 li
806.867 27.1218 806.928 27.0428 807.006 27.0048 cv
807.084 26.9668 807.177 26.9668 807.283 27.0058 cv
810.438 28.1538 li
810.468 28.1648 810.493 28.1828 810.515 28.2098 cv
810.536 28.2358 810.55 28.2698 810.556 28.3088 cv
810.563 28.3488 810.561 28.3958 810.552 28.4508 cv
810.542 28.5058 810.525 28.5678 810.499 28.6378 cv
810.451 28.7698 810.396 28.8658 810.334 28.9268 cv
810.272 28.9868 810.21 29.0058 810.146 28.9828 cv
807.599 28.0558 li
806.872 30.0548 li
807.002 30.0808 807.133 30.1158 807.263 30.1598 cv
807.394 30.2028 807.544 30.2558 807.714 30.3168 cv
808.106 30.4598 808.431 30.6338 808.689 30.8378 cv
808.948 31.0418 809.142 31.2688 809.274 31.5178 cv
809.405 31.7678 809.475 32.0368 809.484 32.3268 cv
809.493 32.6168 809.441 32.9158 809.328 33.2248 cv
811.312 35.8608 mo
811.217 36.1218 811.111 36.2788 810.993 36.3338 cv
810.876 36.3888 810.703 36.3748 810.475 36.2918 cv
810.255 36.2118 810.118 36.1138 810.065 35.9988 cv
810.011 35.8838 810.03 35.6998 810.122 35.4468 cv
810.217 35.1858 810.323 35.0278 810.441 34.9728 cv
810.559 34.9188 810.731 34.9328 810.959 35.0148 cv
811.179 35.0958 811.316 35.1928 811.37 35.3078 cv
811.423 35.4238 811.404 35.6078 811.312 35.8608 cv
818.138 36.7308 mo
818.094 36.8518 818.041 36.9398 817.979 36.9968 cv
817.917 37.0528 817.853 37.0688 817.787 37.0448 cv
816.983 36.7528 li
816.438 38.2498 li
816.427 38.2798 816.41 38.3018 816.388 38.3158 cv
816.365 38.3308 816.333 38.3388 816.289 38.3398 cv
816.246 38.3408 816.193 38.3338 816.13 38.3188 cv
816.067 38.3048 815.988 38.2798 815.893 38.2458 cv
815.803 38.2128 815.728 38.1808 815.671 38.1518 cv
815.613 38.1228 815.569 38.0938 815.538 38.0658 cv
815.507 38.0388 815.489 38.0118 815.483 37.9868 cv
815.477 37.9618 815.48 37.9348 815.491 37.9058 cv
816.036 36.4078 li
813.121 35.3468 li
813.077 35.3308 813.043 35.3118 813.018 35.2908 cv
812.993 35.2688 812.974 35.2388 812.961 35.2018 cv
812.948 35.1638 812.947 35.1148 812.958 35.0568 cv
812.968 34.9988 812.99 34.9248 813.022 34.8368 cv
813.047 34.7678 813.072 34.7058 813.096 34.6518 cv
813.119 34.5978 813.145 34.5508 813.173 34.5088 cv
813.2 34.4668 813.231 34.4278 813.264 34.3918 cv
813.298 34.3568 813.336 34.3198 813.379 34.2808 cv
817.494 30.8778 li
817.523 30.8548 817.559 30.8388 817.603 30.8298 cv
817.647 30.8208 817.699 30.8198 817.761 30.8248 cv
817.822 30.8308 817.895 30.8458 817.979 30.8708 cv
818.064 30.8948 818.162 30.9278 818.274 30.9688 cv
818.398 31.0138 818.504 31.0568 818.592 31.0998 cv
818.68 31.1418 818.75 31.1808 818.801 31.2158 cv
818.852 31.2518 818.888 31.2858 818.909 31.3208 cv
818.93 31.3558 818.935 31.3898 818.923 31.4228 cv
817.267 35.9708 li
818.071 36.2628 li
818.134 36.2858 818.172 36.3368 818.188 36.4148 cv
818.203 36.4928 818.186 36.5978 818.138 36.7308 cv
817.743 31.7168 mo
817.732 31.7128 li
814.019 34.7888 li
816.32 35.6258 li
cp
822.889 40.3298 mo
822.863 40.3998 822.836 40.4568 822.808 40.4998 cv
822.78 40.5438 822.751 40.5768 822.722 40.5998 cv
822.693 40.6228 822.664 40.6358 822.636 40.6398 cv
822.607 40.6448 822.58 40.6418 822.554 40.6328 cv
818.832 39.2778 li
818.807 39.2678 818.785 39.2528 818.768 39.2328 cv
818.75 39.2118 818.737 39.1828 818.727 39.1458 cv
818.718 39.1088 818.716 39.0648 818.723 39.0128 cv
818.729 38.9618 818.745 38.9008 818.77 38.8308 cv
818.794 38.7648 818.821 38.7098 818.849 38.6668 cv
818.877 38.6228 818.905 38.5878 818.933 38.5628 cv
818.961 38.5378 818.99 38.5218 819.02 38.5138 cv
819.05 38.5058 819.079 38.5068 819.109 38.5178 cv
820.595 39.0588 li
822.567 33.6408 li
820.892 33.9608 li
820.809 33.9718 820.745 33.9738 820.7 33.9648 cv
820.655 33.9568 820.624 33.9368 820.607 33.9038 cv
820.59 33.8698 820.587 33.8248 820.598 33.7658 cv
820.609 33.7078 820.63 33.6358 820.661 33.5518 cv
820.683 33.4898 820.705 33.4368 820.727 33.3948 cv
820.748 33.3528 820.77 33.3198 820.792 33.2938 cv
820.813 33.2688 820.838 33.2488 820.867 33.2338 cv
820.895 33.2198 820.93 33.2068 820.971 33.1968 cv
822.994 32.7428 li
823.013 32.7368 823.034 32.7348 823.059 32.7348 cv
823.084 32.7358 823.114 32.7388 823.15 32.7428 cv
823.185 32.7478 823.226 32.7568 823.27 32.7718 cv
823.315 32.7858 823.371 32.8048 823.437 32.8288 cv
823.525 32.8608 823.597 32.8908 823.653 32.9198 cv
823.709 32.9488 823.751 32.9758 823.779 33.0008 cv
823.808 33.0248 823.824 33.0498 823.828 33.0738 cv
823.831 33.0978 823.829 33.1208 823.821 33.1428 cv
821.542 39.4038 li
822.831 39.8728 li
822.86 39.8828 822.885 39.9018 822.904 39.9278 cv
822.924 39.9528 822.936 39.9848 822.942 40.0218 cv
822.947 40.0588 822.945 40.1038 822.937 40.1548 cv
822.929 40.2058 822.913 40.2638 822.889 40.3298 cv
f
%ADOBeginSubsetFont: DDAAAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.348 1.262 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /DDAAAA+Calibri-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f329bf03924000000cc000000606376
74203fba58ec0000012c000006886670676da1ea42ac000007b400000913
676c7966987330540000f95c0000067e68656164f519a792000010c80000
0036686865610dbb1c500000110000000024686d7478f578a97e00001124
000064a66c6f6361009f15f4000075cc000064ac6d61787026b61c650000
da78000000206e616d653e76046f0000da98000007de70726570f940ca73
0000e278000016e1676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e0002affc000247b00000009000000004d53202000200000
feff0600fe0001c4079e0226200001ff0000000003c0050e000000200014
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000005aa001500a0fff8ff42fea2fdbc03b6015401cc
0108010e00ff00f5006e014000a0055e006b0570fff60122fff10547ffec
04faffec0131fff4000a03a0036600b400e1044c007c40465f5e5d5c5b5a
59585554535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c208a
08234b538a4b515a5823381b2121592d2c0020b200400325b0062649618b
3812342d2c014623466023466123201020468a61b8ff80628ab140408a70
4560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2c
b012004b014b54422d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d000001000000062e14749c50ce5f0f3cf50019080000000000
bbeb7ccc00000000d406b22efbdafd350a1a085000010009000200010000
0000000100000600fe0001c40aa0fbdafa860a1a00010000000000000000
0000000000001929040e0000000000000000000001cf000004d9001704d9
001704d9001704d9001704d9001704d9001704d9001704d9001704d90017
04d9001704d900170634ffd30634ffd3047c008d043c004f043c004f043c
004f043c004f043c004f043c004f050b008d050b008d051d000f051d000f
03e7008d03e7003f03e7008d03e7003f03e7003c03e7004d03e7005503e7
007503e7008d03e7008d03ac008d05190049051900490519004905190049
05190049050c008d050c008d054300100222008d0222ff5a022200260222
ff440222ff480222ff4e0222ff5b0222ff80022200220222001e04c9008d
02a6000302a6ffaf0460008d0460008d0362008d036200720371008d0362
008d03760015047e008d06fe008d0545008d0545008d0545008d0545008d
0545008d0521008d05690050056900500569005005690050056900500569
0050056900500569005005690050057200500572005006fe00500442008d
0442008d057d00500481008d0481008d0481006a0481008d03c8003f03c8
003f03c8001f03c8002303c8003f03c8003f03f6000c03f6000c03f6000c
03f6000c0539008c0539008c0539008c0539008c0539008c0539008c0539
008c0539008c0539008c0539008c0539008c04bb00160740002b0740002b
0740002b0740002b0740002b046800210428001004280010042800100428
00100428001003d3003303d3003303d3001e03d300330447000a0447000a
0447000a0447000a0447000a0447000a0447000a0447000a0447000a0447
000a0447000a058fffe2058fffe20438008603cb005a03cb005a03cb005a
03cb005a03cb005a03cb005a049100860491008104a6002604a60026038f
0086038f0024038f0086038f0020038f0020038f001d038f0030038f003f
038f0086038f008603580086049c0058049c0058049c0058049c0058049c
0058049c0086049c008604c10034021000860210ff600210001f0210ff54
0210ff410210ff530210ff650210ff7b0210001802100016046f00860269
00000269ffa1040500860405008602fc008602fc0085030d008602fc0086
030c002c041500860648008604c7008604c7008604c7008604c7008604c7
00860497008604da005504da005504da005504da005504da005504da0055
04da005504da005504da005504e4005504e40055062e005503fd008603fd
008604de005504250086042500860425005a04250086036f0043036f0043
036f0001036f0006036f0043036f0043037b001b037b0008037b001b037b
001b04ac008404ac008404ac008404ac008404ac008404ac008404ac0084
04ac008404ac008404ac008404ac00840435001b068a002b068a002b068a
002b068a002b068a002b0404002603cd000b03cd000b03cd000b03cd000b
03cd000b038f003e038f003e038f0016038f003e03f3004703f3004703f3
004703f3004703f3003703f3004703f3004703f3004703f3004703f30047
03f300470633004706330047044b007e03590048035900480359003b0359
00480359004803590048077d004807080048060e0048060e0048044b004b
04c6004b048d004b044b004c0407004a0407004a0407004a0407004a0407
004a0407004a0407004a0407004a0407004a0407004a0288001906c20019
0909001904ce001906c2001909090019046f0019046f0019046f0019046f
001904810019048100190481001904810019046f0019046f001906b60019
06b6001906b6001906b6001906c8001906c8001906c8001906c8001906b6
001906b60019046f0019046f001906b60019064d001908950019046f0019
046f001904ea0019046f001906b60019051600190516001905450019075e
001903cb001b03cb001b03cb001b03cb001b03cb001b044b004b044b004b
044b004b044b004b044b004b044b007e044bff9f0461fff901f7006b01f7
ff7801f7001a01f7ff6301f7ff3701f7ff7601f7ff6d01f7ff7301f70008
01f7007e0403006b043a006e020bffdb020bffdb020bff6d03d7007e03d7
007e03d7007e01f7007e01f700320273007e01f7003f021c00140361007e
0682007e044b007e044b007e044b007e044b0063044b007e04faff96044b
007e044d0048044d0048044d0048044d0048044d0048044d0048044d0048
044d0048044d0048045a0048045a004806be0048044b007e044b007e044b
004b02d8007e02d8007e02d8fff202d8005703310049033100490331ffff
03310000033100490331004905d4004905d400490470007f0211007e02c6
001702e8001702c6001702d6001b0510001704af001704af001704af0017
04af001704af001704af001704af001704af001704af001704af00170540
0017078a0017072800170728001707280017072800170728001707280017
07280017072800170728001707280017044b0079044b0079044b0079044b
0079044b005e044b0079044b0079044b0079044b0079044b0079044b0079
03c9001605f6002305f6002305f6002305f6002305f6002303ad002003ca
001603ca001603ca001603ca001603ca0016032e0045032e0045032e0003
032e004503540066037b005503a5005002bf003602f5005a0244003802f5
003a02c7003a01d0001c029c001802fb005a017a004f0184ffd902c0005a
0176005a046c005a02f9005a02f5003902f5005a02f5003a0200005a023a
003c01fa001c02fb005a02a50019041b002002a9002002a60017023a0034
026700000284000002a000000000fcfe0000fce3026800000284000002a0
00000000fcfe0000fce20336000003690000039b00000000fc980000fc64
0336000003690000039b00000000fc960000fc6501fc0000038e00000392
0000039600000000fc6b0000fc6803510000030f0000036d000003880000
0000fc890000fc6d031f000003470000036e00000000fca10000fc7a0314
0000031c0000032400000000fca80000fc9f029f000002a3000002a80000
0000fce20000fcde02cf000002c2000002b5000003e30000041500000445
00000000fc400000fc0f01e2000001f7000001e2000001e200000000fd43
0000fd43026d00660000fd60028600660000fd5502020067022c000004d9
001704d9ff72047c008d0347008d049f002b03e7008d03e7fe9d03d30033
050c008d050cfe7a056900500222008d0222fe930222ff4f0460008d04c0
001a06fe008d0545008d03f0004d056900500569ff0f050c008d0442008d
03c2004a03f6000c042800100428fe4d0428001006690000046800210676
0077057200490572fef30447000a0447000a0438008603120086040e0021
038f0086038f0086038f003e049c0086049c008604f60055021000860210
00100210ff5204050086041e00110648008604c700860393005704da0055
04da0055049c008603fd0086037a004e037b001b03cd000b03cd000b03cd
000b05bb00000404002605d8006e04e1005504e1005504ba004c04ba004c
045d007e0452005203bd000c0443000003a9004703a9004702ea0040045a
007e045a007e045c0050048f0004024a0079024a0000024aff7d024aff1d
03d7007e03e400000482007e03c500160315003e031e0044044d0048044d
004804a20020043e0064045b004603410049032400020463007404630074
04630073046300280598004205980044039b000905e7007605be004f05be
004f028900000000fd0403f400000000fc360224007d0224007d0224007d
02350036021000540210005404d900170472008e047c008d0375008d0375
008d0379008d0562000a03e7008d03e7003f03e7004c06a9003a03db003e
0537008d0537008d0537008d0222008d0222ff4e02a600030481008d0481
008d0508000a072a000a06fe008d050c008d072c008d0569005005690050
050a008d0442008d043c004f03c8003f03f6000c046100080461000804e5
001605ca0000046800210543008d0507008d048e004d072d008d076a008d
051d000c0663008d046d008d044f0048044f004f074f008d049800400516
000c050f000c051a00000447000a041c0088043800860321008603210086
033a008604b6000b038f0086038f0024038f001e05d800310396004a04b0
008604b0008604b00086021000860210ff5302690000040c0086040c0086
0461000306480086049c008604da005504d700550497008603fd008603cb
005a036f0043037b001b03d6001703d60017045a001a0543000004040026
04ba00860490008604320051066f008606960086049c001805d700860419
008603e6005d03ee0055068800860432004a048a001d0490001d04810000
06430003066c008603f30047044200000443000003f5007e02d6007e02d6
007e02f0007e01f7ff6d04a80019044b004b0407004a0407004a0407004a
05e50030036a003a0474007e047400700474007e01f7006b01f7ff76020b
ffdb03f5007e03f5007e043500140636001205b5004c045d007e065a007e
044d0048044900480446007e044b0079044b007e0359004803310049031e
00090682007e03ca001603ca001603f900160567004203ad0020047f007e
044c007e03e80030061b007e0650007e0477000905b2007e03f5007e037f
003f0380004a0606007e03fc002b046dfff90461fff90441001103a20000
03a2000003a200000000fc950000fc95029b00e6029b009b029b009b03b5
007303b5005303b50053040a0058026900cf02690091035e006d03550045
0210001702350036023500a00223007d05b1007c0210006b021000170210
006b02100017037b0064037b001b037b0064037b001b02100017037b001b
02c1005802c100a902c1005802c100a9044f0059044f0097044f0059044f
009703700002033f002003cd017003fc01870370001c033f003d0273003b
0273003b03fcfff503fcfff5073e0083073e0083073e0083073e008303fc
fff903fc00940224007d0224007d027e006b027e00610299009d02990057
02c0003602c000690259006d025900630277009202770065027e006b027e
00610299009d0299005702c0003602c0006903fc008603fc006003fc0061
03fc005604c80052045d005703fc001e03fc003901de00790382007905a3
0000057600000841000007300000074400000730000006ad009e06ad009e
040e006905c3003205d9004f02bd000003fc002104b6003c040e002003fc
0049040e00520458004c03fc00a903fc0044040e004c03fc0063044d0015
040e001d03df002d039f005503f8004f039f0054039f000506350039085e
008d03fc001c073f00860437001a04a8004e02de001903f2004f03f00043
0460001e03e9004f0442006603be002f0440004d04420047040e0039040e
0094040e0058040e0055040e001a040e0060040e0054040e0051040e003d
040e00420474005802ad001c03a000510385004d03d30024038a005f03ce
0058035f002503d4003a03dc0046039f0037039f0079039f0050039f0053
039f002d039f0062039f0045039f0047039f0038039f003804a8004e02de
001903f2004f03f000430444001e03e9004f0442006603be002f0440004d
04420047040e0039040e0094040e0058040e0055040e0024040e0060040e
0054040e0051040e003d040e0042032f003d0205001d02b4003e02b00038
02ed002302b2004302e4004b029d002e02ed003c02e4003602d7003b02d0
003a02c7004b01c7004d01c70047032f003d0205001d02b4003e02b00038
02ed002302b2004302e4004b029d002e02ed003c02e4003602d7003b02d0
003a02c7004b01c7004d01c7004702b5002f020500250270003002740023
02750010026a0031027a002a0261001d028b001e026e001b02b5002f0205
0025027000300274002302750010026a0031027a002a0261001d028b001e
026e001b02d8ff2e032c003805870038059400380543003805940038055a
00380592003805fa004205fa0042059d003b05eb003b05e8003b06070023
05b1004405e800440570002c05d50039087e0039057c004607ed004603fc
003403fc003703fc005403fc002203fc005303fc005403fc005103fc0044
03fc006603fc004503fc005503fc005603fc002f05e9002c0439002206b4
0059044c004c0301000e03fcfffe049f002b057200490482007e06420053
0467005304450036073e0092073e0087073e00b6073e00b606b7007606b7
010806b7007606b701080a7b00920626007d0466002801da000001da0000
04660000046600000466ffdb0466ffde0466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
04660000046601a804d9001704d9001704d9001704d9000504d9001704d9
001704d9001704d9001704d9001704d9001704d9001704d9001703e7008d
03e7008d03e7004703e7ffe803e7ffbd03e7ffdd03e7ffdd03e700460222
002c02220088056900500569005005690050056900500569005005690050
05690050061e005005940050059400500594005005940050059400500539
008c0539008c0617008c0617008c0617008c0617008c0617008c0617008c
04280010042800100428001003f3004703f3004703f3ffca03f3ff9a03f3
ffca03f3ffc503f3004703f3ffc503f3ffc903f3ffc803f3ffc503f30047
0407004a0407004a040700300407ffdb0407ffb60407ffd90407ffd90407
004a01f7001c01f7006b044d0048044d0048044dfff2044dffd2044dffef
044dfff2044d004805100048051000480510004805100048051000480510
0048044b0079044b0079052e0079052e0079052e0079052e0079052e005e
052e007903ca001603ca001603ca0016048d004b046600380447000a0447
000a0447ffe80447ffc30447ffe80447ffe80447000a0447fff10447fff2
0447fff20447ffef0447000a038f0086038f0086038f0000038fffa8038f
ff83038fffa8038fffa8038f00410210001c0210007f04da005504da0055
04da003e04da001904da003e04da003804da0055058b0055058b0055058b
0055058b0055058b0055058b005504ac008404ac0084058a0084058a0084
058a0084058a0084058a0084058a008403cd000b03cd000b03cd000b01da
0000046600000466ffdb0466000004660000046600000466000004660000
0466000004c100660540008d0545008d0536008d04b5008604c3008604b5
008603f6000c02c60017037b001b01f70008046f0019046f0019046f0019
06b6001906b6001906b6001903130018030a007803160054036b007802b7
007802920078037c00550367007801b000780205002802f4007802670078
049a00780392007803a1005502f4007803a10055030d00780288003a02b0
001e0378006e0313001804a1002802c9001802ac0011025d001b0000fdfc
0000fdfc0466010c0466010c0466007e0466007e03c1000003c10000030c
0000030c0000030c0000030c0000022c0000022c000001ff000001ff0000
01ff000001ff00000000fcff0000fcff02aa006902aa006902aa009802aa
009801ce000002aa008202aa008202aa008202aa0082027f0050027f006a
0324ffeb029100840466010c02aa001402aa001303360000033600000314
0000030c0000038e0000031f000003fcfff903fcfff9038e0000038e0000
0000fedd0000fe4a0000fdfa0000fdfa0000fe290000fe290000fdae0000
fdae01ce000002aa00140291008302aa001502aa000002aa0000039a0000
039a00000000fdfd0000fdfd0000fd090000fd090000fd090000fd0902aa
000002aa000003fcfff90466007e02aa0098038e0000038e0000038e0000
038e0000038e0000038e000004010014040101470000000002aa000002aa
000001ce000001ce0000030c0000030c000002aa000002aa00c802aa00c8
03f100c801ce000001ce000001e2000001e2000002aa00a003b1008402aa
000002aa0000075c003c075c0000075c0000075c0000075c0000075c003f
06d2000006d20000075c0000075c0000075c004001df002001df002001e7
002401e7002400f8002f00f8002f02070022020700220209003702090037
019d0028019d002802070023020700230209003902090039030900380309
0038015f003d015f003d015200100152001001c3000601c3000601bf0008
01bf0008032700250327002503270025032700250000ff9203bd0000041a
0000041a00000416ffe40416ffe4041a000b041a000b041a000b041a000b
0401ffff0401ffff0401ffff0401ffff015f003d02aa000001ce000003f1
00c8055800190472008e049300140433003104db004f051d000f05e70019
0472003b03e7005b0543005003f1005503acffd60573004904ba00110266
008d026800110464008d071c008c0545ffd605690050066a004f051e0019
0481008d03cf003f03c2004a045c001903f6000c057200490539008c0465
001003d3003303eb003e03f10046040e004e08de008d0839008d0629008d
056d008d07eb008d0750008d04d900170222ff43056900500539008c0539
008c0539008c0539008c0539008c04d9001704d900170634ffd305290049
0519004904600073056900500569005003eb000008c5008d0839008d0519
00490714008d04e6008d0545008d04d9ffed04d9001703e7ffcd03e70055
0222feac0222ff5c0569003b056900500481ffbf04810078053900390539
008c03eb003e050c008d0523008d0439004603ec003304d9001703e7008d
056900500569005005690050056900500428001004d9ffde0446ffda0385
0011040affab0382003b0496000b055e000f04c0001a03e8ff9102c30003
050f004f049d000f04b4000704d90017047c008d047c008d047c008d043c
004f050b008d050b008d050b008d050b008d050b008d03e7007a03e7007a
03e7008203e7003e03e7008003ac008d05190049050c008d050c008d050c
008d050c0015050c008d0222ff460222ff7e0460008d0460008d0460008d
0362008d03620035036200600362006606fe008d06fe008d06fe008d0545
008d0545008d0545008d0545008d05690050056900500569005005690050
0442008d0442008d0481008d0481008d0481008d0481008d03c8003f03c8
003f03c8003f03c8003f03c8003f03f6000c03f6000c03f6000c03f6000c
0539008c0539008c0539008c0539008c0539008c04bb001604bb00160740
002b0740002b04680021046800210428001003d3003303d3003303d30033
0390002403e40012046300110481008d0562008d04cc008d03f50033043c
003003ac004903e9008d04920029044b007e045ffffb03b60048044b004b
0443004a0288fff8066e007e044b007e03d7007e0281001b03e40005044b
007e05870048044b007e033a004602ed001702c60017041c0014032e0045
03d5003e037400260362003d0779004b0402007e0656007e03f3004701f7
ff61044d0048044b0079044b0079044b0079044b0079044b007904070051
03f3004703f30047063300470474ffde03cb001b03d70042044d0048044d
004803a9001c020bff6b0779004b03cb001b044b007e03f3ffc003f30047
0407ffe30407004a01f7fecf01f7ff73044dffee044d004802d8ff7402d8
0011044b0000044b007903a9002a044b005104db004b041f0048033a0045
03f300470407004a044d0048044d0048044d0048044d004803ca001602a4
007804fc007e02cf0017069d004b069f004b0362ffe103310049032e0045
037a003b03fb00300260000502600005044b004b0308001003f2000c0391
0035040e00580325003c021d009903d9009904b30098029b00e603f30047
044b007e044b007e044b007e03590048044b004b044b004b044b004b044b
004b044b004b0407004a0407004a0407004a0407004a0407004a02880019
03cb001b044b007e044b007e044b0067044bffff044b007e01f7ff3501f7
ff3501f7ff6903d7007e03d7007e03d7006b01f7007201f7ff6d01f7ff6d
01f7ff620682007e0682007e0682007e044b007e044b007e044b007e044b
007e044d0048044d0048044d0048044d0048044b007e044b007e02d8007e
02d8007302d8000d02d8fffa033100490331004903310049033100030331
004902c6001702c6001702c6ffde02c6ffde044b0079044b006e044b0079
044b005a044b007903c9001603c9001605f6002305f6002303ad002003ad
002003ca0016032e0001032e0045032e0008044b007e02c6ffa805f60023
03ca001603f30047021100490290002403f3001a02f9ff970488007e042d
007e033d004503f400170363003802ee0027034e007e0599004204f60005
041c0088042b000a03cb00400429005a049f0019054f0005041c0041038f
006204d20055039600540358ffd304bb0058042b00140278008602fcffed
040500860690008204c7ffd304da00550622005504bb000504250086036f
0045037a004e03d90005037b001b04e1005504ac008403f9000b038f003e
038a004b038a00550385004108030086088f008d05b300860617008d06cf
00860768008d0447000a0210ff4704aa005504ac008404ac008404ac0084
04ac008404ac00840447000a0447000a055cffe2049c0058049c00580405
004804da005504da0055038a000008030086088f008d049c005806b30086
04a0008604c700860447ffc50447000a038fff9d038f004d0210feb20210
ff7004da000904da00550425ff9a0425006904acfff704ac0084038a004b
049c008604c3008604060056038f003e0447000a038f008604da005504da
005504da005504da005503cd000b0447000a03cb005402fc0000037b001b
033300320438001e04ac00000435001b038f00180269000004ad00550425
000003cdfff3039f00500333001e023000a0040600a004a90064026900cf
0447000a04380086043800860438007803cb005a04910086049100860491
00860491008604910086038f0029038f002e038f0050038f001e038f0046
03580086049c0058049c0086049c0086049c0086049c0009049c00860210
ff3e0210ff5504050086040500860405008602fc008602fc000002fc0028
02fc001e06480086064800860648008604c7008604c7008604c7008604c7
008604da005504da005504da005504da005503fd008603fd008604250086
042500860425005c04250086036f0043036f0043036f002c036ffff7036f
0043037b001b037b001b037b001b037b001b04ac008404ac008404ac0084
04ac008404ac00840435001b0435001b068a002b068a002b040400260404
002603cd000b038f000f038f003e038f0038049c0086037b000a068a002b
03cd000b0447000a02fc00000355ff9c03fd000004250086052f00860447
00860390003e03cb00400358004e040a0086047f0019047f001904c40019
047f0019046f0019046f0019047f0019049600190496001906b5001906b5
001906d6001906b5001906b6001906b6001906b5001906d2001904ce0019
04ad001704af001704af001704af001704af001704af001704af001704af
001704af0017072700170728001707280017072800170728001707280017
07280017072800170728001703f3007d044b004b044c007f044b007e0363
003803880048044b004b0461004b040700510407005105240054036a0042
036a003a044f003a043700480255000c045e004b044a004b044a004803d4
001203e0000c044b0079044b007d044b007e026b0010026b0010024a0079
029e001903270013033800130204007904ab007e06820079068200790682
007e044bffc7044b007e0468007e0449004805c1004805a7004405980042
02d8001d02d8001d02d9001d02d8007e02d8007e02a0007902a0001603ea
007e03ea007e0331004901eeffc20246ffee01eeffc2029fffae02c60038
02c6002604b1001004ad00520441007403c9001605f6002303ca001603b4
000e0338004503d5004503a9002a03ae002a0382003b038200480382003b
03590048052d005003f5007e0437004204540048045d007e02a4ffaf03d7
001c033c007e0460004b0382003b0382004806b4004b06fd004b075b004b
0522001704060017059f00170662001904f4007a04be007e0433002c03ef
0057045dffd3045effd30427000a0577ffda063300510425000a03bb005a
046200860462001203600086036a003a01f7006a026d001c03e2008602fa
002005b5004c0474007e04a8005703bb0044048a004e0489004e05280008
06be005203b90044044d0048044d004803db008603f6003403f600860355
001b04860082046f004e05e300440497006204090019063b0026036e003e
035c003a0331004103f40012030c008603eb000a0475008603db008605a4
0072044a0018031300180417000a030a00780327001e036b007802b70078
02b70046037c00550367007801b000780205002802f4007802670078049a
007803920078038d007803a1005502f9004c02f40078030d007802b0001e
0378006e04a1002802bf003602ac004702f5003a042c003602f5005a02f5
003a02c7003a02b8002e027b003802770038029c0018017a004f02c0005a
046c005a02f9005a02f500390244002a02e6003902e6003902f5005a01fa
001c02fb005a02db0044046c005a02a5001902a7001c02f2005a027e0010
02dc003703d1004d02c2002f017a004f0200005a02fb005a02a5001902f2
005a027e001002ed005203d1004d02c2002f069b007904df000e04da004b
032d000e077300140552001404bc000703660014033d001403ec0014032d
00140370001403cb001b032d006403e2003606af0017026c0013029d0013
0474000104e2001204d40012044b007e04ae004b02a8001905b5004b046b
007e0247007306d7007e04a0007e044b007e02d8007303ad0049036cffc2
03d30016042e00200352004504b8004704d2004b046a004b0411004a0388
0042036a003a041100510276006b0363003801eeffc204c80079038b0040
02e5004e02440038026e003802e000390277003401d0001c01c1fffb029c
001802fb005a01f7001401b20052017a005c01f80014022d000001bc005c
01b3005c0248005c046c005a046c005a032c0000032c005a0322006402f5
003903b70039023a003c020a000c0213001c035700160330004102eb0052
02e4005202c10017023a0034029e003402ca003402a200300316004002fb
005a02fb005a0184ffd90200005a01f60022020c002202b4005a041b0020
02a6001701c40035034300280210006b021000170210006a01ce000001ce
00000299004b0299005e03fc004403fc0066044b0032044b003202510000
026800000267000002510000032700000267000002680000023900980239
009801ce000001ce000002aa008202aa008202aa008202aa008202aa001e
02aa009302aa00160176005a023a003c02a900200299005e031000960310
009603100096031000960310009604570096045700960457009604570096
031000430457004304570043045700430457004304570043045700430457
002f0457002f0457002f0457002f0457002f0310002f0457002504570025
0457002504570025045700250310001a0457001a0457001a0457001a0457
001a0457001a031000420457004204570042045700420457004204570042
045700960457009604570096045700960310004204570042045700420457
00420457004204570042045700420457002f0457002f0457002f0457002f
0457002f0310002f0457002f0457002f0457002f0457002f0457002f0310
002604570026045700260457002604570026045700260310004204570042
045700420457004204570042045700420457009604570096045700960457
009603100042045700420457004204570042045700420457004203100026
045700260457002604570026045700260457002603100023045700230457
00230457002304570023045700230310002f0457002f0457002f0457002f
0457002f0457002f0310004b0457004b0457004b0457004b0457004b0457
004b04570096045700960457009604570096031000420457004204570042
0457004204570042045700420310001a0457001a0457001a0457001a0457
001a0457001a031000240457002404570024045700240457002404570024
0310002f0457002f0457002f0457002f0457002f0457002f0310004e0457
004e0457004e0457004e0457004e0457004e045700960457009604570096
0457009602aa006202aa006203360000049a0084037b001b02aa008502aa
008502aa00c802aa00c8029f00660267000003c1004703e30000038e0000
023500a002aa000002aa000002aa009802aa00980440fff60440fff60302
009803270000032700000324000002aa0000071200d4071200d402bf0036
02b8003a02f5003902a9002002c7003d01d9000001d9000001d9000001d9
000002890000028900000289000002890000038e0000038e000003290000
032900000329000003290000032400000324000003290000032900000329
0000032900000324ffff0324ffff03f4000003f4000003f4000003f40000
0324000003240000031f00000314000001ff000001d90000031f0000031f
0000031f0000031f00000314000003140000031400000314000003f40000
03f4000003f4000003f40000027f006a027f006a05690050043c004f0456
003a043c004f0456003a042f0008042ffe46042f000803ac008d05690050
046b000c05be008d04cc000c0433004f0442008d044a0054039400480394
003c04b8001204d7002606c50019043a0060043efff00359004803630038
035900480363002e05a1004603920079044d004803c7000c04ee007e04d0
000e03470049020bffdb045fffab04e4002604d7005503cb005a03cb0040
03cb005a03cb003d040a001e040afe33040a001e0358008604c400500454
003205540086047400370407005503fd008604d9ff9404d9fe4e04d9fe26
04d9feed04d9ff9e04d9fe5904d9fe3004d9feec04d9ff5004d9ff2604d9
001704d9001704d9001704d9ff9404d9fe5804d9fe3004d9feed04d9ff94
04d9fe5904d9fe3004d9feec06a4001706a4ff9406a4fe5806a4fe3006a4
feed06a4ff9406a4fe5906a4fe3006a4feec03e7feba04eafe7404eafe6c
03e7feba04eafe7404eafe6b03e7fe6703e7fe5d050cfeba060ffe74060f
fe6d05c7fece050cfeba060ffe74060ffe6d05c7fecc050cfe68050cfe5c
050c008d050cfeba060ffe74060ffe6c05c7fecd050cfeba060ffe74060f
fe6c05c7fecc06c2008d06c2feba07c5fe7407c5fe6c077dfecd06c2feba
07c5fe7407c5fe6c077dfecc0222feba0325fe740325fe6d02ddfecd0222
feba0325fe740325fe6d0222fecc0222fe670222fe5d0222ff5b0222ff80
0569fede0636fe740636fe420569fede0636fe730636fe440569fe9b0569
fe5e0442feba0428fe620591fe740591fe9c0591ff230428fe000428fe1c
04280010042800100572ff05063efe91063efe5a05f3fed50572fefc063e
fe91063efe5b05fafed40572feb10572fe7a057200490572ff05063efe7c
063efe5005fafecf0572fef1063efe7f063efe5005fafece074400490744
ff050810fe7c0810fe5007ccfecf0744fef10810fe7f0810fe5007ccfece
04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba
004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c
04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba
004c04ba004c04ba004c03a9004703a9004703a9004503a9004703a90047
03a9004703a9004703a90047045a007e045a007e045a007e045a007e045a
007e045a007e045a007e045a007e045a007e045a007e045a005d045a007e
045a007e045a007e045a007e045a007e045a007e045a007e045a007e045a
007e045a007e045a007e045a005d024a000b024aff86024aff83024aff6c
024a000a024aff86024aff86024aff69024aff14024aff14024aff60024a
ffef024aff7b024aff32024aff69024aff68044d0048044d0048044d0048
044d0048044d0048044d0048044d0048044d0048043e0064043e00640463
007404630074046300740463007404630074046300740463007404630074
046300080463000904630074046300740463007404630053046300710463
007405be004f05be004f05be004f05be004f05be004f05be004f05be004f
05be004f05be004f05be004f05be004f05be004f05be004f05be004f05be
004f05be004f05be004f05be004f05be004f05be004f05be004f05be004f
05be004f0447000a0447000a0447000a0447000a0447000a0447000a0447
000a0447000a0447000a0447000a0447000a0447000a0447000a0447000a
0447000a0447000a0447000a0447000a0447000a0447000a0447000a0447
000a060c000a0616000a0616000a0616000a0616000a0616000a0616000a
0616000a0616000a038f0086038f0059038f0041038f0086038f0059038f
0041038f0086038f006f049c0086049c0086049c0086049c0086049c0086
049c0086049c0086049c0086049c0086049c0086049c0086049c0086049c
0086049c0086049c0086049c0086049c0086049c0086049c0086049c0086
064a00860659008606590086065900860659008606590086065900860659
008606590086021000250210ff8b0210ff720210ff7b0210001a0210ff8b
0210ff720210ff700210ff0e0210ff0f0210ff77021000090210ffa00210
ff420210ff660210ff7b04da005504da005504da005504da005504da0055
04da005504da005504da005503fd008603fd008603cd000b040a001e03cd
000b040a001e03cd000b040a001e03cd000b040a001e03cd000b040a001e
03cd000b040a001e03cd000b040a001e03cd000b040a001e03cd000b040a
001e03cd000b040a001e03cd000b040a001e03cd000b040a001e03cd000b
040a001e04e1005504e1005504e1005504e1005504e1005504e1005504e1
005504e1005504e1005504e1005504e1005504e1005504e1005504e10055
04e1005504e1005504e1005504e1005504e1005504e100550696005506a0
005506a0005506a0005506a0005506a0005506a0005506a0005506a00055
04d9001704d9ff9404d9fe5804d9fe3004d9feed04d9ff9404d9fe5904d9
fe3004d9feec050c008d050cfeba060ffe74060ffe6c05c7fecd050cfeba
060ffe74060ffe6c05c7fecc057200490572ff05063efe7c063efe500572
fe470572fef1063efe7f063efe500572fe4606a4001706a4ff9406a4fe58
06a4fe3006a4feed06a4ff9406a4fe5906a4fe3006a4feec06c2008d06c2
feba07c5fe7407c5fe6c077dfecd06c2feba07c5fe7407c5fe6c077dfecc
074400490744ff050810fe7c0810fe5007ccfecf0744fef10810fe7f0810
fe5007ccfece01d9000001d900000289000002890000039a000003290000
032900000324000003290000032900000324ffff03f4000003f400000324
000001d90000031f0000031400000232009d01ef009d01ef009d01ef009d
0588008d048b000f0442008d03870010046f008d071a003a03db003e04f4
008d04b3008d049c0010052b000c0562008d05d2008d0758008d05470050
043c004f03f6000c042800100428001004d700210605000c04cb004d048e
004d048e008d063d001e063d001e0222008d06a9003a04ac008d0558000a
050c008d055d008d048e004d074f008d04d9001704d900170634ffd303e7
0045054300500543005006a9003a03db000b03eb003e0537008d0537008d
056900500569005005690050044f0026046100080461000804610008048e
004d036a008d0663008d0387001004c7002004680021046d00280689003c
06000029043600290710000a0714008d052600490513000c03f100550544
000a04b6007e0407000c044b007e0306001003a7007e063e0030036a003a
044b007e043b007e04170010048d000c0494007e04f5007e05f4007e0483
004803590048031d000903cf001003cf00100402002004e60009043e004e
0406004e0406007e050500160505001605e500300410007e04770014045c
007e049e007e0406004e05e1000f0222008d03f3000d03f3004706330047
04070035040700510407005105e50030036afffd03a9002a0474007e0474
007e044d0048044d0048044d0048037ffffb03ca001603ca001603ca0016
03e8002602d6007e05b2007e0306001003fe002003ad0020044b004b063b
004b0573002a03ca002a063000140657007e045d004804850009036a0042
046e001404f900860419000003fd00860321ffff04420086062200310396
004a04380086043e0086040c000004a9001b04d0008605390086068e0086
04d1005503cb005a037b001b03cd000b03cd000b045a0026054f00190465
005104320051045c008605e1002005e100200210008605d8003104400086
04aa0003049c008604e6008604320051069300860447000a0447000a058f
ffe2038f004e04c7005004c7005005d8003103960003038a004b04b00086
04b0008604da005504d7005504d7005503e6001e03d6001703d6001703d6
00170432004e0321008605d7008603210000045b00260404002604190038
05fc00380580004a0417004a063400030670008604c400580486001b0396
0053049200030400000008000000040000000800000002af000002000000
01550000040e000001bc00000199000001000000000000000000ffdc0000
ff2a040e0024040e002403d9009903fefff90210006a037b006401b70028
0343002804c5002804b200e603fcfffa0290003a052b0050045a004f043c
004f03b60010040e00600682007e05830020075c008d061b008d0799002c
061d0098047c001203f6000c08ee001e047dfffb04bb002004e1004904fa
002804270024043c004f0635003906210034057800e6059d00e603fc0053
070100bc03fc0056045201d7045200be0400fff6040001bd040001bd0400
fff6040001bd0400fff60711008a045d003f047c008d040e003f04a60016
055800560407000e0682007904390048042bfffc035c003503ce00060451
0059033a0010032700000327000003270000025400000254000002540000
0254000002aaff6502aaff6504e0004607f4000a07e2fff70798ffe30792
0056063f008d0535000a0728002905d2002007a8008d03f2000a06760077
04e5001608ca005005b9005007920056079200560424004f05c100230539
007e0495000e064f007e0502001c06ba007e0366000c05e7007603f9ffd3
07a8004804b00048065c004b05c100230342004906c3005505f600860497
000a066300860552003107000086038c000a05d8006e0470001a087a0055
0527005506c3005506c3005503cb005a03c7009602aa00cf040e005b0000
ffdc0000fe5101cf0000025900a501c70000017a004f030cff4b0aa000b4
04d5009202d5008302d5008304d500b202d500700aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40000fc48
000000000000fd170000000000000000039a0000039a0000032400000324
000003240000039a00000324000003240000025600000329000003290000
03bd000002aaff65055001c4027f006303240000039a0000025600000289
001e000000d4000000de0284001e03240000032400000324000003240000
032400000324000003240000032400000324000003240000000000000000
00000000000000000000039a0000039a0000036d00000000000004150000
031c0000036d0000036d0000039200000347000003470000039200000392
00000354000003690000000000840000003f0000fffa0000007500000075
0000007500000075000000750594fe6e0594fe910594ff15042ffe04042f
fe15042f0008042f00080447000a0447000a0447000a060c000a060c000a
060c000a049c0086049c0086049c0086064a0086064a0086064a008603cd
ffec03cdffec03cd000b04e1005504e1005504e1005506a0005506a00055
06a000550000fd7a0000fd4f0000fd5a0000fd5a0000fbfe0000fc010000
fbdc0000fbda0000fbfe0000fbfc0000fbfe0000fbfc0000fbff0000fbff
0000fc000000fc000000fc000000fc000000fbfd0000fbfd0000fda80000
fc2e0000fc2e0000fd0a0000fd0a0000fc7d0000fc7e0000fbe30000fbe3
0000fcac0000fcac0000fcaa0000fca90000fd4f0000fd4f0000fd340000
fd340000fd330000fd330000fd470000fd470000fd760000fd760000fd45
0000fd600000fd600000fd600000fd600000fd340000fd6d0000fc8a0000
fd6e0000fd0a0000fcf10000fcf10000fc970000fc990000fca90000fca9
0000fc700000fca30000fc2e0000fc2f0000fc6d0000fc6d0000fd530000
fcf10000fd6d0000fcf30000fcde0000fcde0000fc660000fc650000fcdd
0000fcdd0000fc2e0000fc7e0000fd760000fc700000fc700000fc6b0000
fc6b0000fc700000fc710000fc460000fd7a0000fced0000fce70000fd45
0000fd450000fca80000fca80000fcde0000fd9f0000fdaf0000fcfb0000
fd530000fd530000fd420000fd420000fd7e0000fcde0000fcde0000fcde
0000fc8f0000fc530000fc530000fc530000fc530000fc920000fc980000
fc980000fc530000fc530000fcbf0000fd650000fd650000fd620000fd62
0000fde60000fde60000fd510000fd510000fd630000fd630000fd800000
fd7f0000fd510000fd510000fd6a0000fd6a0000fce90000fce90000fdc0
0000fdc00000fd8a0000fd8a0000fd570000fd570000fd5b0000fd5b0000
fcc30000fcc30000fcc30000fcc30000fc720000fc3c0000fc3c0000fc01
0000fc010000fc4e0000fc4e0000fc130000fc130000fc0e0000fc0e0000
fc4a0000fc4a0000fdb50000fcd10000fd9f0000fcf60000fd4c0000fd4c
0000fd470000fd470000fd2f0000fd2f0000fccd0000fccd0000fc700000
fc710000fcb20000fcb20000fc960000fc970000fca50000fca50000fcb2
0000fcb20000fc960000fc950000fc9f0000fc9f0000fc380000fc380000
fc380000fc380000fc9f0000fc9f0000fca30000fca90000fd470000fd4c
0000fca40000fca40000fca40000fca40000fca90000fca80000fcaa0000
fcaa0000fc380000fc380000fc380000fc380000fd6d0000fd6d0000fc9f
0000fca40000fca40000fd050000fd050000fd0d0000fd0d0000fc430000
fc43042ffe62040a000a040a000a040a001e01f70072044b004b044b004b
044b004b044b004b046f001906b600190aa000b40aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40495008d040e
0018040e0034040e00150442002b05e00032040e001e075700260288ffe9
02880019044300000524008d0391fff904cb0050040500480461fff503ca
fff506fe008d04d900190574008d05a4004a02d8001e044d0048038f0062
0184ffd90313001803c8003f03d300330265007801f700640265007801f7
0050050c008d044b007e05c5000c05a7001703db003e0370004803e0001e
03c9003c046c001e047d003c03580086036f004308820019062d0047082f
00190677004707ea0019064d004706c10019059f004706c10019059f0047
06c10019059f0047043c003b0359003e0460001003d7fff90460008d03d7
007e0460001003d7fff9046a008d02f3007e0362001001f7ffef0569ffc9
0449ffd80604005004ef0048091f00500707004804420010044bffe5057d
001e0572001e0646001e068f001e057d0050044b004b0725005005c7004b
041c00500373003c04c6004a04ac004404bb001803c900160740002c05f6
002303db00490379003704420010044bffe504420010044bffe503fa008d
0381007e0366002d0366002d03df0003038b00140453005504530055026d
001805b4004b0366007e07ee007e05b7007e031d007e056e008603ac0017
03e500500569ffe9044b004c0388008d02d8007e03e2003603e2003603e2
00360362000e01f7007e0540008d044b007e0388008d02d8007e04760043
03b70036050c008d034c00220581008d0485007e044fffc20380ffdb03b3
004804be007e056c0019058b002803acffd602880019054c00500473003c
057500500462003c054c00500473003c0519ffcc03cbffe70460001103d7
00090545000b044b00110481000f02d8fffc03c8002f0331004105e80019
03db003e05740050041600220460002203f6000c056a0028035b001b047b
003d0682007e03ac00490442003f06fe008d0222008d0928001804baffde
0633004703ff00650407ffde0505001602880019044b004b0313001402ed
ffaf02ad00140664007e044b007e044b007e040b003d040b003d044d0065
06be004806be004806be004807070048070700480416005a03ed0086028d
007e0406007e03aa002504d600250421005005d2005001eeffc2044b0079
04b100100682007e0682007e04ca0028039b0009043e0009039b00090486
002003adff2b0486ff2b0377fefa03ca00160314006602fb005a02710014
0236001403540028044b004b04e1005506f8000a05be001405f4008d05be
007e065d00400645002b057d0050044b004b0740002b05f600230460008d
03d7007e0758000a05db00140758008d0603007e0543008d047b007e0506
008d046b007e050cffd5045dffc80a3c000a08870019056d002a04650023
0543000a0469001405a900280000ff8f0000ff7e0000ff300000ff100000
fefc0320004b0000ff1f0000ff230000ff470000ffa80000ff2a0000ff3d
0000ff9e0000fead0000fdb2000000000000ff3d0000ff3d000000c80000
feb00000fe1c0000ff180000ff310000ff1f0000ff420000ff450000ff3d
0000feab0000ff5a0000ff3d0000ff180000ff1f0000ff460000ff420000
00000000fe330000ff140000000000000000000000000000000000000000
000000000000000000000000000000000000ffa80000ffa8000000000000
000000000000000000000000ffa80000ffb00273003b0000ff2301f80086
0000049b0000005f0235007b0000ff960000ff960000ff0f0000fe5702fc
0079000000000465004e04be004e03fb002103080018039c001104990072
04ba007201ff007e0279001204ab007e0488005404a0005401ff007e0392
001103c4001103cf00290380001b04bb007e04ca007e04b8003d04cd003d
01ff007e02fc002104b0001e044f000d0440004804720048046700580493
005803b20012040a000f047a0072048900720392001105c8003705d70037
04e9002a0510002a03ff007e03ff007e03ff007e02100017037b001b01ff
007e0000fef303ff007e044f000d0591004d04c8001105c5007204fb0029
04ac001b05e7007e04be00110615002a03fc00340465004e0465004e04be
004e03fb002103fb00210308001803080018039c0011039c001104ba0072
049900720281001001ff007e01ff007e02d5001004a00054028100100392
00110392001103c4001103cf002903cf00290380001b03bcff5a03bcff5a
04cd003d02fc002104b0001e047200480493005804670058040a000f0489
00720392001105d7003705c8003705c8003705d7003705d700370510002a
04e9002a042f001b044a0014063e008d03d30015032e004403d30015032e
004403c8003f033100490287008d024a00790561006404a8007805bb0050
0376002808250050070d004804960000042d0000071d000c063700090678
008d05e5007e074f005006060048071d008d05e7007e04d9001903c70015
05d200200502001c071d008d059b007e04e5001803f9000c0543002c047f
001e0616000c053f001905f8000a0505001407ee008d061f004c05690050
044d004805690050044d0048091e0050070600480655007e0000fe7007e2
005b074b00b407e0001e03d1007d00000064000000640000006400000064
000000640000006400000064000000640000fe2f0000ff0f03a2000001f4
00040562000c04a8001903c8003d033100490837003e073d003a072c004d
060e003005d2000c052d00190558000c0431000903f6000c031e00090543
008d047f007003e6000c031e0009056d001e04a80014048e008d044b007e
076a008d0659007e091f00500707004805690050044d00480357000a02d5
005100000064042d008d03a0007e03f6000d03bb001e0537008d0474007e
02a600030460008d047c008d0442008d0442003f050b008d03f6000c03f6
000c051900490460008d0460002202a60003043c004f043c003003d30033
03ac008d03ac004906fe008d0545008d0362008d03c8003f0481008d0481
003404c0001a04bb0016050c008d0519006702a6008d0740002b04680021
04280010047c004604d9001704d9001703e7008d03e7005b0222008d0569
00500539008c0539008c0362000e050b004b0223007d0223007d03db007d
03db007d023500a0023500a004d60064039700640591003c052b000d087a
002e05df002b038a002e0a3b002e0a42002e0000fff4043d0042043d0042
0763000005a9007b071a007b03c4005f0283004f0354003707ab002e048c
00000283004f0218ffa803dd004f03ca0069006affa8041001680410014d
041000b004100044041000a9041000a40410007c04100044041000440410
0096050b007b023c003c025f00640340004c038000a60a96007e05ce00a3
045f00880410016804100148041000ab0410003f04100057041000660410
0097041000430410004304100096022a008f02860078037d007801990097
0241008c0241008c031a008c031a008c031a008c031a008c031a008c031a
008c033700a9033700a9022e007a0239008c0239008c02330071035400a0
035400a0028effa8028effa8028effa804be006704be00d1028e005a028e
ffa8028e002402a00000028e0055028e0067028effa8028e0064028effa8
028e006b028effa8028e006c028effa8028e0099028effa80410007e0410
00ab01fe005f023f006003490060040100480370005f0366004f03a90032
03ee003203ee00320375003101fe005f023f0060034900600401004803fd
005f03e2004f039f003003ee003203ee0032037500310392004f035a003c
027000cf027000be027000600270001d0270005802700058027000420270
0019027000190270004b02700028027000360270003b0270004202700053
02700031027000540270004002700044027000270270004b027000360270
003c0270003102700036026600d5026600c4026600680266002802660064
0266006102660049026600230266002302660059026600340266003d0266
005a0266004a026600640266003802660059026600470266004a0266002f
026600510266003d02660044026600390266003d04c2002e000000000000
000004c2002e04c2002e0000ffa80000fed60000fee00000febc0000fed6
0000fdf30000fef00000fe790000ff240000ff520000ff490000ff520000
ff0f0000fee10000ff100000ff1b0000ff3d0000ff1a0000ff290000ff58
0000ff0a0000ff4a0000ff4a0000ffa50000ff390000ff3f0000ff110000
ff250000ff260000ff7c0000ff3d0000ff1a0000ff180000ffa50000fe28
0000fe8d0000fef20000ff190000ff3a0000ff220000fe9a0000ff740000
ff840000ff370000ff650000fe9a0000ff0a0000fe9c0000ff2a0000ff57
0000ff570000ff750000ff610000ff390000ff1c0000ff1d0000ff1c0000
ff0f0000ff100000ff210000ffaa0000ff3d0000ff340000ffaa0000ff3d
0000ff340000fecd0000fec40000fecd0000ff800000ff0d0000ff1b0000
ff1a0000ff8e0000ff8e0000ff8e0000ff8e0000ff160000fea90000ff32
0000ff040000ff710000feed0000ff070000ff1d0000ff290000ff170000
ff290000ff0d0000ff1b0000ff0f0000ff350000feed0000ff3f0000ff04
0000ff00027a0000018afff00182fff101820053018affb2018affc90182
ffca023f0053018affa0018affa601d6ffc301d5ffe001d6003d01d60053
01d5ffb901d5ffb901d6001601d6005301d5ff9201d5ff990684003b0684
003b0684003b0684003b0684003b0684003b0684003b0684003b0684003b
0684003b0684003b0684003b0684003b0684003b0684003b0684003b0684
003b0684003b0684003b0684003b0684003b0218ffa80218ffa80218ffa8
0218ffa80218ffa80218ffa80218ffa80218ffa80218ffa80218ffa80218
ffa80218ffa80218ff890218ffa80218ffa80218ffa80218ffa80218ffa8
0218ffa80218ffa80218ffa80281ffa80281ffa80281ffa80281ffa80281
ffa80281ffa80281ffa80281ffa80281ffa80281ffa80281ffa80281ffa8
0281ffa80281ffa80281ffa80281ffa80281ffa80281ffa80281ffa80281
ffa80281ffa80718003b0718003b0718003b0718003b0718003b0718003b
0718003b0718003b0718003b0718003b0718003b0718003b0718003b0718
003b0718003b0718003b0718003b0718003b0718003b0718003b0718003b
04f0003b04f0003b04f0003b04f0003b04f0003b04f0003b04f0003b04f0
003b04f0003b04f0003b04f0003b04f0003b04f0003b04f0003b04f0003b
04f0003b04f0003b04f0003b051affa8051affa8051affa8051affa8051a
ffa8051affa8051affa8051affa8051affa8051affa8051affa8051affa8
051affa8051affa8051affa8051affa8051affa8051affa80564ffa80564
ffa80564ffa80564ffa80564ffa80564ffa80564ffa80564ffa80564ffa8
0564ffa80564ffa80564ffa80564ffa80564ffa80564ffa80564ffa80564
ffa80564ffa804e7003b04e7003b04e7003b04e7003b04e7003b04e7003b
04e7003b04e7003b04e7003b04e7003b04e7003b04e7003b04e7003b04e7
003b04e7003b04e7003b04e7003b04e7003b037f0055037f0055037f0055
037f0055037f0055037f0055037f0055037f0055037f0055037f0055037f
0055037f0055037f0055037f0055037f0055040e0055040e0055040e0055
040e0055040e0055040e0055040e0055040e0055040e0055040e0055040e
0055040e0055040e0055040e0055040e0055037200000372000003720000
037200000372000003720000037200000372000003720000037200000372
000003720000037200000372000003720000037200000394000003720000
03c1000003c1000003c1000003c1000003c1000003c1000003c1000003c1
000003c1000003c1000003c1000003c1000003c1000003c1000003c10000
03c1000003c9000003c100000772003b0772003b0772003b0772003b0772
003b0772003b0772003b0772003b0772003b0772003b0772003b055dffa8
055dffa8055dffa8055dffa8055dffa8055dffa8055dffa8055dffa8055d
ffa8055dffa8055dffa805b2ffa805b2ffa805b2ffa805b2ffa805b2ffa8
05b2ffa805b2ffa805b2ffa805b2ffa805b2ffa805b2ffa807e7003b07e7
003b07e7003b07e7003b07e7003b07e7003b07e7003b07e7003b07e7003b
07e7003b07e7003b0878003b0878003b0878003b0878003b0878003b0878
003b0635ffa70635ffa70635ffa70635ffa70635ffa70635ffa70661ffa7
0661ffa70661ffa70661ffa70661ffa70661ffa708a2003b08a2003b08a2
003b08a2003b08a2003b08a2003b06520027065200270652002706520027
0502ffa80502ffa80502ffa80502ffa80533ffa80533ffa80533ffa80533
ffa80687002706870027068700270687002704cd003b04cd003b04cd003b
04cd003b04cd003b04cd003b04cd003b04cd003b03efffa803efffa803ef
ffa803efffa803efffa803efffa803efffa803efffa803afffa803afffa8
03afffa803afffa803afffa803afffa803afffa803afffa80413003b0413
003b0413003b0413003b0413003b0413003b0413003b0413003b06fe003b
06fe003b06fe003b06fe003b06fe003b06fe003b06fe003b06fe003b06fe
003b06fe003b02feffa802feffa802feffa802feffa802feffa802feffa8
02feffa802feffa802feffa802feffa80379ffa80379ffa80379ffa80379
ffa80379ffa80379ffa80379ffa80379ffa80379ffa80379ffa80756003b
0756003b0756003b0756003b0756003b0756003b0756003b0756003b0756
003b0756003b0516003b0516003b0516003b0516003b0516003b02feffa8
02feffa802feffa802feffa802feffa80379ffa80379ffa80379ffa80379
ffa80379ffa8053a003b053a003b053a003b053a003b053a003b05a30027
05a3002705a3002705a3002705a3002705a30027075d003b075d003b075d
003b075d003b075d003b075d003b075d003b075d003b075d003b075d003b
075d003b075d003b075d003b075d003b03deffa703deffa703deffa703de
ffa703deffa703deffa703deffa703deffa703deffa703deffa703deffa7
03deffa703deffa703deffa703e0ffa703e0ffa703e0ffa703e0ffa703e0
ffa703e0ffa703bcffa803bcffa803bcffa803bcffa803bcffa803bcffa8
03bcffa803bcffa803bcffa803bcffa803bcffa803bcffa803bcffa803bc
ffa803bcffa803bcffa803bcffa803bcffa803bcffa803bcffa8065c003b
065c003b065c003b065c003b065c003b065c003b0752003b0752003b0752
003b0752003b0752003b0752003b0752003b0752003b0752003b0752003b
0752003b0752003b0752003b0752003b08ed002707c9ffa80804ffa8092e
0027047e003b0487003b0487003b0487003b047e003b047e003b047e003b
01f6ffa80201ffa80201ffa80201ffa801f6ffa801f6ffa801f6ffa80223
ffa80223ffa80223ffa80223ffa80223ffa80223ffa80223ffa804b2003b
04b2003b04b2003b04b2003b04b2003b04b2003b04b2003b03a0004503a0
004503a0004503a000450353ffa80353ffa80353ffa80353ffa803baffa8
03baffa803baffa803baffa8045100450451004504510045045100450474
003b0474003b0474003b0474003b0474003b0474003b0474003b0474003b
0474003b0218ffa80218ffa80218ffa80218ffa80218ffa80218ffa80218
ffa80218ffa80218ffa80281ffa80281ffa80281ffa80281ffa80281ffa8
0281ffa80281ffa80281ffa80281ffa804bb003b04bb003b04bb003b04bb
003b04bb003b04bb003b04bb003b04bb003b04bb003b0564002705640027
03b9003b056400270449ffa80449ffa80218ffa80449ffa8036affa8036a
ffa80328ffa8036affa803c3003b0578002703c3003b0578002702e1003b
02e1003b02e1003b02e1003b02e1003b03c3003b03c3003b03b9003b03b9
003b03c3003b039b0000039b0000039b0000039b0000039b0000039b0000
039b0000039b0000039b0000039b0000039b0000039b0000039b0000039b
0000039b0000039b00000351003b03f8000003f8000003f8000003f80000
03f8000003f8000003f8000003f8000003f8000003f8000003f8000003f8
000003f8000003f8000003f8000003f8000002f9003b055d003b055d003b
055d003a055d0014055d0014055d003b055d003b055d003b055d003b055d
0039055d003b055d003b055d003b055d003b055d003b055d003b055d003b
0218ffa80218ffa80218ffa80218ffa80218ffa80218ffa80218ffa80218
ffa80218ffa80218ffa80218ffa80218ffa80218ffa80218ffa80218ffa8
0218ffa80218ffa80281ffa80281ffa80281ffa80281ffa80281ffa80281
ffa80281ffa802b7ffa80281ffa80281ffa80281ffa80281ffa80281ffa8
0281ffa80281ffa80281ffa80281ffa8049a003b045f003b049a003b049a
0018049a0018049a003b049a003b049a003b049a003b049a003b049a003b
049a003b049a003b049a003b049a003b049a003b049a003b055dff16045f
feda0853003b0853003b0345003b0347003d0853003b0853003b0218ffa8
0218ffa80281ffa80281ffa80347003d0347003d030c0053030c005303a0
004503f000530458005305c9003b0631003b05f300000668000005f30000
0668000005f300000668000005f30000066800000510000005cf00000489
ffa80510000005cf00000489ffa8049b003b049b003b01d6005301820053
0475ffea0475ffe004a3002704a3002704e5000804e50027050100270501
0027094b003b07a6003b094b003b07a6003b0a45003a083f006a07630057
075700000986000007caff5a098b000009c40000095200000182ffb101d6
ffe10309005403090054018a005301d500530487003b0201ffa80223ffa8
04b2003b0565002705650027056500270565002705cc002705cc002705cc
002705cc00270565002705cf000005cf00000480ffa80483ffa80483ffa8
059f0027059f002703890000038900000389000003890000038900000389
000003890000038900000389000003890000038900000389000003890000
03890000038900000389000003c900000389000003ba000003ba000003ba
000003ba000003ba000003ba000003ba000003ba000003ba000003ba0000
03ba000003ba000003ba000003ba000003ba000003ba0000037f0055037f
0055037f0055037f0030037f0055037f0055037f00550372000003720000
06fe003b06fe003b06fe003b06fe003b06fe003b06fe003b02feffa802fe
ffa802feffa602feff4a02feffa802feffa802feffa803deffa703deffa7
03deffa703deffa703e0ff8603e0ffa701f6ff530353ffa80218ff840565
00270444ffa80326ff430326ff430326ff430326ff430326ff1f0326ff43
0347ffa70347ffa70347ffa70347ffa70347ff860347ffa70289ff430289
ff430289ff430289ff43027bff1f027bff430218ffa80218ffa80218ffa8
0218ff540218ff3d0218feeb0218ffa80218ff8a0218ff8a0218ff200218
ff970218ff8e0218ffa80218ffa80218ffa80218ff540218ff200218ffa8
0218ff200218ff200218ff200218ff200218ff200218ff200218ffa80218
ff540218ff200218ff200218ff540218ff200218ff200218ff200218ff20
0218ffa80218ffa80218ffa80218ff9a0218ff830218ff3a0218ffa80218
ff9b0218ff9b0218ff6f0218ff950218ff8b0218ffa80218ffa80218ffa8
0218ff9a0218ff6f0218ffa80218ff6f0218ff6f0218ff6f0218ff660218
ff6f0218ff6f0218ffa80218ff9a0218ff6f0218ff6f0218ff6f0218ff6f
0218ff6f0218ff6f0218ff6f0281ffa80281ffa80281ffa80281ff9a0281
ff830281ff3a0281ffa80281ff9b0281ff9b0281ff6f0281ff950281ff8b
0281ffa80281ffa80281ffa80281ff9a0281ff6f0281ffa80281ff6f0281
ff6f0281ff6f0281ff660281ff6f0281ff6f0281ffa80281ff9a0281ff6f
0281ff6f0281ff6f0281ff6f0281ff6f0281ff6f0281ff6f0217ffa80217
ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217ffa8
0217ffa80217ffa80217ffa80217ffa80217ff890217ffa80217ffa80217
ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217ffa8
0217ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217
ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217ffa8
0217ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217ffa80217
ffa80217ffa80217ffa80217ffa8024effa8024effa8024effa8024effa8
024effa8024effa8024effa8024effa8024effa8024effa8024effa8024e
ffa8024effa8024effa8024effa8024effa8024effa8024effa8024effa8
024effa8024effa8024effa8024effa8024effa8024effa8024effa8024e
ffa8024effa8024effa8024effa8024effa8024effa8024effa8024effa8
024effa8024effa8024effa80270ffa8024effa8024effa8024effa8024e
ffa8024effa8024effa8024effa8024effa8024effa8024effa8024effa8
0217ffa80217ffa80217ffa80217ff540217ff3d0217feeb0217ffa80217
ff8a0217ff8a0217ff200217ff970217ffa80217ffa80217ffa80217ffa8
0217ff540217ff200217ffa80217ff200217ff200217ff200217ff200217
ff200217ff200217ffa80217ff540217ff200217ff200217ff540217ff20
0217ff200217ff200217ff200217ffa80217ffa80217ffa80217ff9a0217
ff830217ff3a0217ffa80217ff9b0217ff9b0217ff6f0217ff950217ff8b
0217ffa80217ffa80217ffa80217ff9a0217ff6f0217ffa80217ff6f0217
ff6f0217ff6f0217ff660217ff6f0217ff6f0217ffa80217ff9a0217ff6f
0217ff6f0217ff6f0217ff6f0217ff6f0217ff6f0217ff6f024effa8024e
ffa8024effa8024eff9a024eff83024eff3a024effa8024eff9b024eff9b
024eff6f024eff95024eff8b024effa8024effa8024effa8024eff9a024e
ff6f024effa8024eff6f024eff6f024eff6f024eff66024eff6f024eff6f
024effa8024eff9a024eff6f024eff6f024eff6f024eff6f024eff6f024e
ff6f024eff6f0326ff430326ff430326ff430326ff430326ff430326ff43
0326ff430326ff430326ff430326ff430326ff430326ff430326ff430326
ff430326ff430326ff430326ff430326ff430326ff430326ff43031bff42
031bff42031bff42031bff42031bff42031bff42031bff42031bff42031b
ff42031bff42031bff42031bff42031bff42031bff42031bff42031bff42
031bff42031bff42031bff42031bff420347ffa70347ffa70347ffa70347
ffa70347ffa70347ffa70347ffa70347ffa70347ffa70347ffa70347ffa7
0347ffa70347ffa70347ffa70347ffa70347ffa70347ffa70347ffa70347
ffa70347ffa703bcffa803bcffa803bcffa803bcffa803bcffa803bcffa8
03bcffa803bcffa803bcffa803bcffa803bcffa803bcffa803bcffa803bc
ffa803bcffa803bcffa803bcffa803bcffa803bcffa803bcffa80289ff43
0289ff430289ff430289ff430289ff430289ff430289ff430289ff430289
ff430289ff430289ff430289ff430289ff430289ff43027bff43027bff43
027bff43027bff43027bff43027bff43031bff42031bff42031bff42031b
ff42031bff42031bff42031bff42031bff42031bff42031bff42031bff42
031bff42031bff42031bff42031bff42031bff42031bff42031bff42031b
ff42031bff4206c7003b06c7003b06c7003b06c7003b06c7003b06c7003b
06c7003b06c7003b06c7003b06c7003b06c7003b06c7003b06c7003b06c7
003b0752003b0752003b0752003b0752003b0752003b0752003b0752003b
0752003b0752003b0752003b0752003b0752003b0752003b0752003b06cd
003b06cd003b06cd003b06cd003b0462003b0462003b0462003b0462003b
0182ffb50182ff8501d6004801d600160218ffa80218ffa80218ffa80218
ff950218ffa80218ff640218ffa80218ffa80218ff640218ff640218ffa8
0218ff950218ff640218ff640218ff8b0218ff640218ff640281ffa80281
ffa80281ffa80281ffa80281ffa80281ffa80281ffa80281ffa80281ffa8
0281ffa80281ffa80281ffa80281ffa80281ffa80281ffa80281ffa80217
ffa80217ffa80217ffa80217ff950217ffa80217ff640217ffa80217ffa8
0217ff640217ff640217ffa80217ff950217ff640217ff640217ff8b0217
ff640217ff64024effa8024effa8024effa8024effa8024effa8024effa8
024effa8024effa8024effa8024effa8024effa8024effa8024effa8024e
ffa8024effa8024effa8051affa8051affa8051affa8051affa8051affa8
051affa8051affa8051affa80564ffa80564ffa80564ffa80564ffa80564
ffa80564ffa80564ffa80564ffa8037f0055037f0055037f0055040e0055
040e0055040e0055055dffa805b2ffa802feffa80379ffa80444ffa804a3
00270501002704a3002705010027028effa80000feb20000fed60000fee0
0000febc0000fed60000fdf30000fef00000fe790000ff240000ff520000
ff4a0000ff520000ff1b0000fedb0000ff1f0000ff1b0000ff3d0000ff21
0000ff290000ff580000ff0a0000ff4a0000ff4c0000ffa50000ff3d0000
ff3f0000ff110000ff250000ff260000ff890000ff3d0000ff1b0000ff18
0000ffa50000fe280000fe8d0000fef20000ff190000ff3a0000ff210000
fe9a0000ff740000ff8c0000ff370000ff650000fe9a0000ff0a0000feae
0000ff2a0000ff5e0000ff5e0000ff7e0000ff620000ff3d0000ff1c0000
ff1d0000ff1c0000ff100000ff100000ff1d0000ffb30000fecd0000fec4
0000fecd0000ff7f0000ff010000ff1b0000ff210000ff8e0000ff8e0000
ff8e0000ff8e0000ff160000feb20000ff3b0000ff0d0000ff710000fee7
0000ff160000ff1d0000ff290000ff170000ff290000ff0d0000ff1b0000
ff1b0000ff350000fee70000ff4a0000ff0b0000ff0604be006704be00ee
0a80006b0359ffa8035d001e0264001e023700640284004f0284004f0000
ff13043d00420000ff6d0000ff000000ff6a0000ff260000ff000000feff
0000ff300000ff000000ff7c0000ff1a0000ff8b0000ff350000ff890000
ff510000ff350000ff340000ff5b0000ff1d0000ffa20000ff5e0000ff7c
0000fee50000ff3f0000ff3f0000ff180000ff250000ff4c0000ff260000
ff4c0000fef00000fef00000ff040000fe6a0000fe6a0000ffb50000ffb5
00000003000000030000ff910000ffa60000ff650000ff690000ff510000
ff650000feda0000ff6d0000ff000000ff6a0000ff000000feff0000fe7d
0000ff000000ff7c0000ff190000ff350000ff890000ff350000ff340000
fecb0000ff1d0000ff890000ff4e0000ff930000ff4e0000ff4d0000ff2f
0000ff3f0000ff180000ff250000ff500000ff260000ff4c0000fef00000
fef00000ff040000ff190000fed70000ff470000ff650000ff650000ff65
0000ff650000ff6604a300270475002704ac0027047e00270501002704e5
00270501002704e5002705800007088a000008e20000097c000009aa0000
05aa00000897ffcc08f0ffcb098affcc09b7ffcb0693003b054b003b060b
003b066d003b0808003b0852003b0914003b09b9003b09fa003b0a07003b
093e003b0973003b075c003b06e5003b054d003b06ef003b065a003b0574
003b0651003b0651003b055f003b055f003b0637003b0637003b066b003b
07c6003b07c4003b0808003b0885003b07c4003b0894003b0808003b07f1
003b0a1900360a01003506e1003b04d1003b0799003b06ef003b078f003b
082f003b087c003b08a9003b0724003b0715003b0724003b0516003b0724
003b04d8003b06e1003b06e1003b04c2003b04c2003b06e1003b06e1003b
0426003b0426003b0724003b0591003b0724003b0724003b0660003b0724
003b0919003b0945003b0546003b0566003b0664003b078f003b087c003b
06cd003b0664003b0566003b059a003b051c003b0574003b0546003b051a
003b051a003b0546003b0546003b04b3003b04b3003b0599003b05f5003b
0645003b0645003b0660003b0664003b0918003b0841003b09c000270000
ff6eff65000000>
<000000000000013c0000013c0000013c0000013c00000296000002960000
029600000296000002960000029600000296000002960000029600000296
000002960000029600000296000002960000029600000296000002960000
029600000296000002960000029600000296000002960000029600000296
000002960000029600000296000002960000029600000296000002960000
029600000296000002960000029600000296000002960000029600000296
000002960000029600000296000003040000030400000304000003040000
030400000304000003040000030400000304000003040000030400000304
000003040000030400000304000003040000030400000304000003040000
030400000304000003040000030400000304000003040000030400000304
000003040000030400000304000003040000030400000304000003040000
030400000304000003040000030400000304000003040000030400000304
000003040000030400000304000003040000030400000304000003040000
030400000304000003040000030400000304000003040000030400000304
000003d6000003d6000003d6000003d6000003d6000003d6000003d60000
03d6000003d6000003d6000003d60000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000049a
0000049a0000049a0000049a0000049a0000049a0000049a0000049a0000
049a0000049a0000049a0000049a0000049a0000049a0000049a0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
061c0000061c0000061c0000061c0000061c0000061c0000061c0000061c
0000061c0000061c0000061c0000061c0000061c0000061c0000061c0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e0000067e0000067e0000067e0000067e0000067e0000067e0000067e
0000067e0000067e0000067e0000067e0000067e0000067e0000067e0000
067e00010000192a044200170110000800020010002f006000000cf816e1
000400010000000e00ae0000000300000000021000000000000300000007
0076021000010000000000000108028600010000000000030013038e0001
000000000004001303a10001000000000006001303b40001000000000007
003b03c70003000104090000021204020003000104090001002606140003
000104090002000e063a0003000104090003002606480003000104090004
0026066e0003000104090006002606940003000104090007007606ba00a9
002000320030003100360020004d006900630072006f0073006f00660074
00200043006f00720070006f0072006100740069006f006e002e00200041
006c006c0020005200690067006800740073002000520065007300650072
007600650064002e000d0048006500620072006500770020004f00700065
006e00540079007000650020004c00610079006f007500740020006c006f
00670069006300200063006f0070007900720069006700680074002000a9
002000320030003000330020002600200032003000300037002c00200052
0061006c00700068002000480061006e0063006f0063006b002000260020
004a006f0068006e00200048007500640073006f006e002e002000540068
006900730020006c00610079006f007500740020006c006f006700690063
00200066006f00720020004200690062006c006900630061006c00200048
006500620072006500770020006900730020006f00700065006e00200073
006f007500720063006500200073006f0066007400770061007200650020
0075006e00640065007200200074006800650020004d004900540020004c
006900630065006e00730065003b002000730065006500200065006d0062
006500640064006500640020006c006900630065006e0073006500200064
00650073006300720069007000740069006f006e00200066006f00720020
00640065007400610069006c0073002e00430061006c0069006200720069
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200074006800650020004d006900630072006f0073006f
00660074002000670072006f007500700020006f006600200063006f006d
00700061006e006900650073002ea92032303136204d6963726f736f6674
20436f72706f726174696f6e2e20416c6c20526967687473205265736572
7665642e0d486562726577204f70656e54797065204c61796f7574206c6f
67696320636f7079726967687420a92032303033202620323030372c2052
616c70682048616e636f636b2026204a6f686e20487564736f6e2e205468
6973206c61796f7574206c6f67696320666f72204269626c6963616c2048
6562726577206973206f70656e20736f7572636520736f66747761726520
756e64657220746865204d4954204c6963656e73653b2073656520656d62
6564646564206c6963656e7365206465736372697074696f6e20666f7220
64657461696c732e594b465a54582b43616c696272692d426f6c64594b46
5a54582b43616c696272692d426f6c64594b465a54582b43616c69627269
2d426f6c6443616c6962726920697320612074726164656d61726b206f66
20746865204d6963726f736f66742067726f7570206f6620636f6d70616e
6965732e00a9002000320030003100360020004d006900630072006f0073
006f0066007400200043006f00720070006f0072006100740069006f006e
002e00200041006c006c0020005200690067006800740073002000520065
007300650072007600650064002e000d000a004800650062007200650077
0020004f00700065006e00540079007000650020004c00610079006f0075
00740020006c006f00670069006300200063006f00700079007200690067
00680074002000a900200032003000300033002000260020003200300030
0037002c002000520061006c00700068002000480061006e0063006f0063
006b002000260020004a006f0068006e00200048007500640073006f006e
002e002000540068006900730020006c00610079006f007500740020006c
006f00670069006300200066006f00720020004200690062006c00690063
0061006c00200048006500620072006500770020006900730020006f0070
0065006e00200073006f007500720063006500200073006f006600740077
00610072006500200075006e00640065007200200074006800650020004d
004900540020004c006900630065006e00730065003b0020007300650065
00200065006d0062006500640064006500640020006c006900630065006e
007300650020006400650073006300720069007000740069006f006e0020
0066006f0072002000640065007400610069006c0073002e0059004b0046
005a00540058002b00430061006c0069006200720069002d0042006f006c
00640052006500670075006c006100720059004b0046005a00540058002b
00430061006c0069006200720069002d0042006f006c00640059004b0046
005a00540058002b00430061006c0069006200720069002d0042006f006c
00640059004b0046005a00540058002b00430061006c0069006200720069
002d0042006f006c006400430061006c0069006200720069002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00670072006f007500700020006f006600200063006f006d00700061006e
006900650073002e000000>
<b20903eb411d03430001003b03410001008b0330009b033000020004032f
0064032f0074032f00d4032f0004032d032a0038001f032c032a0038001f
032b032ab2381f24bf032a00a4032a00b4032a0003ffc0032ab2232746b9
ffc0032ab21c20464163033c0038033b0055033a00380339005503380038
033700550336003803350055033400380333005503230038032200550321
003803200055002b03400001006b03400001033d003803220055006b033b
00010024033100540331000200240331003403310054033100f403310004
001403270044032700e40327000300040327002403270044032700740327
008403270094032700d4032700f40327000800a403220001003403200001
001403200024032000440320005403200074032000840320000602f9b21e
1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1f
b802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802
f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb2
1e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c
1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb8
02e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802e0b21d191fb802df
b21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d
191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1f
b802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802
d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb2
1d121fb802cdb21d121fb802ccb21d121fb802cbb21d121fb802cab21d19
1fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb8
02c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1
b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb21d121fb802bdb21d
2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1f
b802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802
b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b2
1c321fb802afb21c331fb802aeb21c331fb802adb21c331fb802acb21c33
1fb802abb21c331fb802aab21c311fb802a9b21c311fb802a8b21c321fb8
02a7b21c321fb802a6b21c321fb802a5b21c321fb802a4b21c321fb802a3
b21c321fb802a2b21c331fb802a1b21c331fb802a0b21c331fb8029fb21c
331fb8029eb21c331fb8029db21c331fb8029cb21c311fb8029bb21c311f
b8029ab21c321fb80299b21c321fb80298b21c321fb80297b21c321fb802
96b21c321fb80295b21c331fb80294b21c331fb80293b21c331fb80292b2
1c331fb80291b21c331fb80290b21c331fb8028fb21c331fb8028eb21c31
1fb8028db21c321fb8028cb21c321fb8028bb21c321fb8028ab21c321fb8
0289b21c321fb80288b21c331fb80287b21c331fb80286b21c331fb80285
b21c331fb80284b21c331fb80283b21c331fb80282b21b341fb80281b21b
341fb80280b21b341fb8027fb21b341fb8027eb21b341fb8027db21b341f
b8027cb21b341fb8027bb21b341fb8027ab21b341fb80279b21b341fb802
78b21b341fb80277b21b341fb80276b21b341fb80275b21b341fb80274b2
1b341fb80273b21b341fb80272b21b341fb80271b21b341fb80270b21b34
1fb8026fb21a351fb8026eb21a351fb8026db21a351fb8026cb21a351fb8
026bb21a351fb8026ab21a351fb80269b21a351fb80268b21a351fb80267
b21a351fb80266b21a351fb80265b21a351fb80264b21a351fb80263b21a
351fb80262b21a351fb80261b21a351fb80260b21a351fb8025fb21a351f
b8025eb21a351fb8025db21a351fb8025cb21a351fb8025bb21a351fb802
5ab21a351fb80259b219371fb80258b219371fb80257b219371fb80256b2
19371fb80255b219371fb80254b219371fb80253b219371fb80252b21937
1fb80251b219371fb80250b219371fb8024fb219371fb8024eb219371fb8
024db219371fb8024cb219371fb8024bb219371fb8024ab219371fb80249
b219371fb80248b219371fb80247b219371fb80246b219371fb80245b219
371fb80244b219371fb80243b219371fb80242b219371fb80241b219371f
b80240b219371fb8023fb219371fb8023eb219371fb8023db219371fb802
3cb219371fb8023bb219371fb8023ab219371fb80239b218391fb80238b2
18391fb80237b218391fb80236b218391fb80235b218391fb80234b21839
1fb80233b218391fb80232b218391fb80231b218391fb80230b218391fb8
0301b2182e1fb8022fb218391fb8022eb218391fb8022db218391fb8022c
b218391fb8022bb218391fb8022ab218391fb80229b218391fb80228b218
391fb80227b218391fb80226b218391fb80225b2173b1fb80224b2173b1f
b80223b217321fb80222b2173a1fb80221b2173b1fb80220b2173b1fb802
1fb2173b1fb8021eb2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2
173b1fb8021ab2173b1fb80219b2173b1fb80218b2173b1fb80217b2173b
1fb80216b2173b1fb80215b217321fb80214b2173a1fb80213b2173b1fb8
0212b2173b1fb80211b2173b1fb80210b2173b1fb8020fb2173b1fb8020e
b2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2173b1fb8020ab217
3b1fb80209b217321fb80208b217321fb80207b2173b1fb80206b2173b1f
b80205b2173b1fb80204b2173b1fb80203b2173b1fb80202b2173b1fb802
01b2173b1fb80200b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2
173b1fb801fcb2173b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b
1fb801f8b2173b1fb801f7b217321fb801f6b2173a1fb801f5b2173b1fb8
01f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0
b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2173b1fb801ecb217
3b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1f
b801e7b217321fb801e6b216231fb801e5b216231fb801e4b216371fb801
e3b216371fb801e2b216381fb801e1b216381fb801e0b216431fb801dfb2
16441fb801deb216441fb801ddb216441fb801dcb216451fb801dbb21646
1fb801dab216461fb801d9b216461fb801d8b216231fb801d7b216231fb8
01d6b216381fb801d5b216431fb801d4b216431fb801d3b216431fb801d2
b216441fb801d1b216461fb801d0b216461fb801cfb216461fb801ceb216
461fb801cdb216461fb801ccb216461fb801cbb216431fb801cab216231f
b801c9b216231fb801c8b216371fb801c7b216371fb801c6b216381fb801
c5b216421fb801c4b216431fb801c3b216441fb801c2b216451fb801c1b2
16461fb801c0b216461fb801bfb216461fb801beb216461fb801bdb21646
1fb801bcb216461fb801bbb216461fb801bab216371fb801b9b216381fb8
01b8b216421fb801b7b216431fb801b6b216431fb801b5b216431fb801b4
b216441fb801b3b216441fb801b2b216441fb801b1b216451fb801b0b216
451fb801afb216451fb801aeb216461fb801adb216461fb801acb216461f
b801abb216461fb801aab216461fb801a9b215341fb801a8b215411fb801
a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b2
15521fb801a2b215401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f
1fb8019eb215521fb8019db2154d1fb8019cb215401fb8019bb2154d1fb8
019ab2154e1fb80199b2154e1fb80198b2154f1fb80197b2154f1fb80196
b215501fb80195b215521fb80194b215521fb80193b215521fb80192b215
411fb80191b2154f1fb80190b215501fb8018fb215501fb8018eb215511f
b8018db215521fb8018cb215521fb8018bb215521fb8018ab214581fb801
89b214591fb80188b2145c1fb80187b2145d1fb80186b2144a1fb80185b2
145b1fb80184b2145c1fb80183b214591fb80182b2145d1fb8018140af14
5d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561f
b20b561fb10b561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b
561faa0b561fa90b561fa80b561fa70b561fa60b561fa50b561fa40b561f
a30b561fa20b561fa10b561fa00b561f9f0b561f9e0a681f9a0a681f990a
681f980a681f970a681f960a681f950a681f940a681f930a681f920a681f
910a681f9009681f8f09681f8e09681f8d09681f8c09681f410902fc02fa
0056001f02fb02fa0068001f017fb213321fb8017eb212371fb80174b212
371fb80173b211421fb80172b211421fb80171b211421fb80170b211421f
b8016fb211421fb8016eb211421fb8016db211421fb8016cb211421fb801
6bb211421fb8016ab211421fb8013cb211421fb8013bb210421fb8013ab2
10421fb80139b210421fb80138b210421fb80137b210421fb80136b21042
1fb80135b210421fb80134b210421fb80133b210421fb80132b20f451fb8
0131b20f451fb80130b20f451fb80112b20f451fb80111b20f451fb80110
b20f451fb8010fb20f451fb8010eb20f451fb8010db20e481fb8010cb20e
481fb8010bb20e481fb8010ab20e481fb80109b20e481fb80108b20e481f
b80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a
1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda
0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b56
1fba0b561f9d0a681f9c0a681fb80180b213321fb8017ab211401fb80179
b211421fb80178b211421fb80177b211421fb80176b211421fb80175b211
421fb80143b211421fb80142b210421fb80141b210421fb80140b210421f
b8013fb210421fb8013eb210421fb8013db20f451fb80115b20f451fb801
14b20f451fb80113b20f451fb903030302b2401fa4be030200b4030200c4
030200030300b213321fb8017bb213321fb80153b212371fb80152b21140
1fb80151b211401fb80150b211401fb8014fb211401fb8014eb211401fb8
014db211401fb8014cb211401fb8014bb211401fb8014ab211401fb80149
b211401fb80148b211401fb80147b211401fb80146b211401fb80145b211
401fb80144b211401fb80122b211401fb80121b210421fb80120b210421f
b8011fb210421fb8011eb210421fb8011db210421fb8011cb210421fb801
1bb210421fb8011ab210421fb80119b210421fb80118b20f451fb80117b2
0f451fb80116409b0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e48
1ff80e481ff70e481ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff1
0d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e
1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc6
0c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b56
1fb40b561fb30b561f9b0a681fb802fdb212371fb8017db212371fb8017c
b212371fb80169b2112e1fb80168b2112e1fb80167b211401fb80166b211
401fb80165b211401fb80164b211401fb80163b211401fb80162b211401f
b80161b211401fb80160b211401fb8015fb211401fb8015eb211401fb801
5db211401fb8015cb211401fb8015bb211401fb8015ab211401fb80159b2
11401fb80158b211401fb80157b211401fb80156b211401fb80155b21140
1fb80154b211401fb8012fb211401fb8012eb210421fb8012db210421fb8
012cb210421fb8012bb210421fb8012ab210421fb80129b210421fb80128
b210421fb80127b210421fb80126b210421fb80125b20f451fb80124b20f
451fb80123b20f451fb80105b20f451fb80104b20f451fb80103b20f451f
b80102b20f451fb80101b20e481fb8010040a20e481fff0e481ffe0e481f
e80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c
4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f83012e1f82488055
81ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb
7d067c487a557bab7a55047a147a020a7948775578ab77550b77010c7648
75555475e475f4750314755475647574759475d475e47507a475b475c475
03b8ffc0401275383b46807590750214757475020075010fb8ffc0402175
0b0e467448725573ab725504723472023bf47201e0720102307201507260
7202b8ffc0b372242846b8ffc0403572161a461072307240720371486f55
70ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d46
6e486d55df6d0100bc02ff001002ff00c002ffb2030a6fbb02fe000100ef
02fe40ff016b032e1f6a03251f692e675568ab6755662e645565ab645563
2e6255612e60555f2e5d555eab5d555c2e5a555bab5a55592e5855570325
1f562e545555ab5455532e515552ab51554f2e4e554e03251f4d2e4b554c
ab4b554a2e485549ab4855504801472e46554503361f001f01001e01001e
701e801ef01e040b601d701d02701de01df01d03701cf01c027f1b010f1a
7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f19af19050f198f19
9f19030c7012801202701180110230114011d011e011040011a011020f8f
0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f
0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f
0d038f0d01400d2e3246400d2427463f0c4f0c5f0c039f0c01400c262946
ef0aff0a02400a242746ef09ff0902ff0901000301200101000110012001
0308b8ffc0b401151f4603bd0100010000050001019000542b4bb807ff52
4bb008505bb00188b02553b00188b040515ab00688b000555a5b58b10101
8e59b101024354b0144b515a58b101018e59858d8d001d424bb01d5358b2
03a0a01d42594bb0805358b20340401d42594bb0ff5358b20300001d4259
2b5e73757373742b732b73742b2b73745e732b5e7374757374755e737475
73015e7374737475757473745e737473002b2b732b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b732b2b73
755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b73742b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b0073747373747374732b73742b2b2b2b2b2b2b2b2b732b2b2b
73737373185f5e00000000>
[1663 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 1564 876 <00010002fed1035605cf00150019bc0015024d000b0000024eb20a100500
2f2f012feddded3031130e0323222e0237013e0333321e0207fc05101d2b
2129341b0406025604101c2d202a331a0405fefd0d100a0508101911068f
0d110a0508101911>DDAAAA+Calibri-Bold AddT42Char 
3 316 4 <00020017fffa04c305140022002600ddb10102435558b90024ffe8b40b0f
014c23b8ffe8401d0b0f014c250c0d23180d0016010e16260b0a23220a00
04230111232625b8012a401e400b000c0112030c0c271d2423231e0a0d16
0023221807121d521255055500183f3f3f1217393811331112392f5f5e5d
331aed3201192f5e5d18cd32337d87c4c40118c45e5d32337d87c4c43031
002b2b1bb90024ffe8b40b0f014c23b8ffe8b50b0f014c2625b8012a401e
400b000c0112030c0c271d2423231e0a0d160023221807121d5212550555
00183f3f3f1217393811331112392f5f5e5d331aed3230312b2b59251616
060623222e02270321070e03232226263637013e0333321e021707230321
04b10c0616383133391e0c0457fe1a52040d1d352b2e3414060c018f0610
233e333b46271106c201b7016f62242a15050309100d0104fd0e130b0406
172a23047c11150b03030b1613c6fdda>DDAAAA+Calibri-Bold AddT42Char 
3 662 47 <0001008dfffa0195051400150029b10102435558b900000294b5400a1052
055500183f3f012f1aed30311bb31052055500183f3f30315925140e0223
222e023511343e0233321e021501950d1e322726331e0d0d1f322627321e
0d240a100a06060a100a04c60a100a06060a100a>DDAAAA+Calibri-Bold AddT42Char 
3 1178 373 <0001007efffa060903d7005000a9b10102435558b14613b8025fb31e1e32
0ab8025fb2503e27bb026000320010ffe8b40b0f014c10b8014db24b4a24
b8ffe8b40b0f014c24b8014d400e40414a3e462d38492d4c194c054c0018
3f3f3f3f1239393f1aed2b3fed2b012fed39d4ed11392fed3930311bb900
10ffe8b40b0f014c10b8014db24b4a24b8ffe8b40b0f014c24b8014d400e
40414a3e462d38492d4c194c054c00183f3f3f3f1239393f1aed2b3fed2b
30315925140e0223222e023511342e022322060711140e0223222e023511
342e022322060711140e0223222e023511343e0233321e02151536363332
1e02173e0333321e021506090c1c302526301d0b112335252d5c360c1d30
2425301d0c112236242e5c350c1d302525301d0c0a1a291f202a170a4a93
503758453211284d4b4b27597a4b20220a0f0a05050a0f0a02112d4a351d
4643fdaf0a0f0a05050a0f0a02112d4a351d4643fdaf0a0f0a05050a0f0a
037c0a0f0a05050a0f0a675050172b3c252b3e27133c678a4d00>DDAAAA+Calibri-Bold AddT42Char 
3 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3031011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>DDAAAA+Calibri-Bold AddT42Char 
DDAAAA+Calibri-Bold /CharStrings get begin
/slash 876 def
/A 4 def
/I 47 def
/m 373 def
end
DDAAAA+Calibri-Bold /Encoding get
dup 47 /slash put
dup 65 /A put
dup 73 /I put
dup 109 /m put
pop
end
%ADOEndSubsetFont
/XQGFFI+Calibri-Bold /DDAAAA+Calibri-Bold findfont ct_VMDictPut
/XQGFFI+Calibri-Bold*1 
[47{/.notdef}rp /slash 17{/.notdef}rp /A 7{/.notdef}rp /I 35{/.notdef}rp /m 
146{/.notdef}rp]
XQGFFI+Calibri-Bold nf
XQGFFI+Calibri-Bold*1 [0 -12 -12 0 0 0 ]msf
15.901 306.576 mo
(I/mA)
[-3.23999 -5.15991 -9.72003 0 ]ysh
gsave
3.00095 583.921 mo
830.761 583.921 li
830.761 2.03998 li
3.00095 2.03998 li
cp
clp
%ADOBeginSubsetFont: DDAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XQGFFI+Calibri-Bold gcheck setglobal} if
3 772 104 <0001008cffe904ad0514002b0055b10102435558bc002002900000001602
93400c0a265210521b180b0f014c1bb8015cb240055600183f1aed2b3f3f
012fedd4ed30311b400b265210521b180b0f014c1bb8015cb24005560018
3f1aed2b3f3f30315901140e0223222e023511343e0233321e021511141e
0233323e023511343e0233321e021504ad4688c8827ac286470c1f322726
321e0d2647633d3e6244250c1e332626311e0c01e277bc82443d7cb97c03
130a100a06060a100afd044d714a2526496b44030b0a100a06060a100a00
>XQGFFI+Calibri-Bold AddT42Char 
3 982 115 <00010016fffa04a605140024004eb10102435558b200191ab8024db42419
0c1917b80294400b400d191f5218051252055500183f3f12393f01192f18
d41aed123910dded123930311bb71f5218051252055500183f3f12393f30
3159250e0323222e0427012626363633321e02170133013e033332161606
0703110510243e3228392819110904fe7f0c05193c362e341c0b05013b01
0135040c1d362f2e3313070c2e11150b030104080c110d047b242a150504
0a140ffc1a03e111150c0406172a2300>XQGFFI+Calibri-Bold AddT42Char 
XQGFFI+Calibri-Bold /CharStrings get begin
/U 104 def
/V 115 def
end
XQGFFI+Calibri-Bold /Encoding get
dup 85 /U put
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XQGFFI+Calibri-Bold*1 
[47{/.notdef}rp /slash 17{/.notdef}rp /A 7{/.notdef}rp /I 11{/.notdef}rp /U 
/V 22{/.notdef}rp /m 146{/.notdef}rp]
XQGFFI+Calibri-Bold nf
XQGFFI+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
402.065 579.235 mo
(U/V)
[7.79999 5.15991 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/XQGFFI+Calibri-Bold*1 uf
/XQGFFI+Calibri-Bold uf
/DDAAAA+Calibri-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
